// -------------------------------------------------------------
// üìÑ FICHIER : lib/services/current_user_service.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Service Singleton pour g√©rer le profil de l'utilisateur actuellement connect√©.
// ‚úÖ Stocke et expose les donn√©es du profil utilisateur (UserProfile) via un ValueNotifier.
// ‚úÖ Permet d'acc√©der aux donn√©es du profil (pr√©nom, r√¥le, langue) et √† l'UID de l'utilisateur courant.
// ‚úÖ Servira de source de v√©rit√© pour les informations du profil utilisateur partout dans l'application.
// ‚úÖ La logique de chargement initial des donn√©es depuis Firestore est impl√©ment√©e (√âtape 2.3).
// ‚úÖ La logique de synchronisation des donn√©es via un listener Firestore est ajout√©e (√âtape 2.4).
// ‚úÖ La gestion du cycle de vie (en fonction de l'√©tat d'authentification) est ajout√©e (√âtape 2.5).
// ‚úÖ Re√ßoit l'instance de FirestoreService via injection de d√©pendances.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V006 - Impl√©mentation logique gestion cycle de vie (√©coute authStateChanges, m√©thodes _startAuthListener, _cancelAuthListener, _authStateSubscription). Appel de loadUserProfile, _startProfileSubscription, clearUserProfile et _cancelProfileSubscription selon l'√©tat d'authentification. Appel _startAuthListener dans init(). - 2025/06/14 00h15 (Heure √† remplir)
// V005 - Ajout logique gestion cycle de vie (√©coute authStateChanges, m√©thodes _startAuthListener, _cancelAuthListener, _authStateSubscription). Appel de loadUserProfile, _startProfileSubscription, clearUserProfile et _cancelProfileSubscription selon l'√©tat d'authentification. - 2025/06/13 23h51
// V004 - Ajout logique synchronisation profil (listener Firestore, m√©thodes _startProfileSubscription, _cancelProfileSubscription, _profileSubscription). - 2025/06/13 23h50
// V003 - Ajout de la d√©pendance √† FirestoreService via constructeur. Mise √† jour de la description des fonctionnalit√©s. - 2025/06/13 23h25
// V002 - Refactorisation pour g√©rer et exposer un objet UserProfile via ValueNotifier. Remplacement des champs individuels (_isReceiver, etc.) par _userProfileNotifier. Ajout getters pour userProfile et uid. La logique de chargement/synchronisation sera ajout√©e ult√©rieurement. - 2025/06/13 23h17
// V001 - Cr√©ation initiale du service Singleton pour l'utilisateur actuel. - 2025/06/03
// -------------------------------------------------------------

import 'package:flutter/foundation.dart'; // For ValueNotifier
import 'package:firebase_auth/firebase_auth.dart'; // To get the current user UID and listen to authStateChanges
import 'package:jelamvp01/models/user_profile.dart'; // Import du nouveau mod√®le UserProfile
import 'firestore_service.dart'; // Import de FirestoreService
import '../utils/debug_log.dart'; // Import the logger
import 'dart:async'; // Import pour StreamSubscription et Timestamp (potentiel)
import 'package:cloud_firestore/cloud_firestore.dart'; // Import pour DocumentSnapshot

class CurrentUserService {
  // ‚≠êÔ∏è √âtape 1 : Cr√©er l'instance statique et le factory constructor (inchang√©)
  // La seule instance de ce service.
  static final CurrentUserService _instance = CurrentUserService._internal();

  // Factory constructor pour retourner l'instance unique.
  factory CurrentUserService() {
    return _instance;
  }

  // Constructeur priv√© pour emp√™cher l'instanciation directe.
  CurrentUserService._internal();

  // Champ pour l'instance inject√©e de FirestoreService (inchang√©)
  late final FirestoreService _firestoreService;

  // ‚úÖ √âtape 2.5 : Ajouter le champ pour la souscription au listener d'√©tat d'authentification
  StreamSubscription<User?>? _authStateSubscription;

  // M√©thode d'initialisation pour injecter les d√©pendances (appel√©e par service_locator)
  // Nous utilisons une m√©thode init() au lieu du constructeur pour les Singletons
  // enregistr√©s comme LazySingleton dans GetIt qui ont des d√©pendances cycliques
  // ou des d√©pendances non disponibles au moment de la cr√©ation du Singleton.
  // Initialize le service avec ses d√©pendances.
  void init({required FirestoreService firestoreService}) {
    _firestoreService = firestoreService;
    debugLog('üë§ [CurrentUserService] Initialized with FirestoreService.', level: 'INFO');
    // ‚úÖ MODIF (√âtape 2.5) : D√©marrer l'√©coute des changements d'√©tat d'authentification ici
    _startAuthListener();
  }

  // ‚≠êÔ∏è √âtape 2 : D√©clarer le ValueNotifier pour stocker et exposer le profil (inchang√©)
  // Remplace les champs individuels (_isReceiver, _deviceLang, _displayName).
  // Initialis√© √† null, car l'utilisateur n'est pas forc√©ment connect√© ou le profil charg√© au d√©marrage.
  final ValueNotifier<UserProfile?> _userProfileNotifier = ValueNotifier<UserProfile?>(null);

  // Champ pour la souscription au listener Firestore (inchang√©)
  StreamSubscription<DocumentSnapshot<Map<String, dynamic>>>? _profileSubscription;

  // ‚≠êÔ∏è √âtape 3 : D√©finir les getters publics (inchang√©)
  // Expose le ValueNotifier pour permettre √† l'UI de l'√©couter (ex: via ValueListenableBuilder).
  ValueListenable<UserProfile?> get userProfileListenable => _userProfileNotifier;

  // Expose l'objet UserProfile actuel (sera null si non charg√©)
  UserProfile? get userProfile => _userProfileNotifier.value;

  // Fournit l'UID de l'utilisateur actuellement connect√© (directement depuis FirebaseAuth pour l'instant)
  // Id√©alement, cela pourrait √™tre g√©r√© en interne en √©coutant authStateChanges pour √™tre r√©actif,
  // mais pour un acc√®s synchrone √† l'√©tat actuel connu, c'sont accessibles via Firebase Auth
  String? get currentUid => FirebaseAuth.instance.currentUser?.uid;

  // ‚≠êÔ∏è √âtape 4 : M√©thode interne pour mettre √† jour le profil (sera appel√©e par la logique de chargement/synchro) (inchang√©)
  // Cette m√©thode est priv√©e car la logique de chargement doit √™tre g√©r√©e par le service lui-m√™me.
  void _setUserProfile(UserProfile? profile) {
    debugLog('üë§ [CurrentUserService] Profil mis √† jour: ${profile != null ? profile.uid : 'null'}', level: 'DEBUG');
    _userProfileNotifier.value = profile;
  }

  // ‚≠êÔ∏è √âtape 5 : M√©thode pour nettoyer le profil lors de la d√©connexion (sera appel√©e par la logique du cycle de vie) (inchang√©)
  void clearUserProfile() {
    debugLog('üë§ [CurrentUserService] Nettoyage du profil utilisateur.', level: 'INFO');
    _cancelProfileSubscription(); // Annule le listener Firestore du profil
    _setUserProfile(null); // Met le profil √† null
  }

  // ‚úÖ √âtape 2.3 : Logique de chargement initial du profil depuis Firestore (inchang√©)
  // Cette m√©thode est responsable de lire le document '/users/{uid}' pour l'utilisateur courant
  // et de mettre √† jour le _userProfileNotifier.
  // Elle sera appel√©e lors des changements d'√©tat d'authentification (√âtape 2.5).
  Future<void> loadUserProfile() async {
    final uid = currentUid; // R√©cup√®re l'UID de l'utilisateur courant
    if (uid == null) {
      debugLog('üë§ [CurrentUserService - loadUserProfile] Aucun utilisateur connect√©. Nettoyage du profil.', level: 'WARNING');
      _setUserProfile(null); // Assure que le profil est null si pas d'utilisateur
      return;
    }

    debugLog('üîÑ [CurrentUserService - loadUserProfile] Tentative de chargement initial du profil pour UID: $uid', level: 'INFO');
    // On utilise get() pour le chargement initial. La synchronisation se fera via le listener.
    try {
      // Utilise le FirestoreService inject√© pour obtenir les donn√©es brutes du profil
      final userData = await _firestoreService.getUserProfile(uid); // FirestoreService.getUserProfile retourne Map<String, dynamic>?

      if (userData != null) {
        final userProfile = UserProfile.fromFirestore(uid, userData);
        _setUserProfile(userProfile);
        debugLog('‚úÖ [CurrentUserService - loadUserProfile] Profil charg√© et mis √† jour via get() pour UID: $uid', level: 'INFO');
        // ‚úÖ MODIF (√âtape 2.5) : D√©marrer l'√©coute des mises √† jour apr√®s le chargement initial r√©ussi
        _startProfileSubscription(); // D√©marrer le listener maintenant
      } else {
        debugLog('‚ö†Ô∏è [CurrentUserService - loadUserProfile] Document profil non trouv√© pour UID: $uid. Cr√©ation d\'un profil par d√©faut.', level: 'WARNING');
        // Le document utilisateur n'existe pas encore. Cr√©er un profil de base et le sauvegarder.
        UserProfile defaultProfile = UserProfile(
          uid: uid,
          firstName: 'Nouveau', // Nom par d√©faut
          isReceiver: false,    // R√¥le par d√©faut
          // TODO: R√©cup√©rer la langue du syst√®me ou une langue par d√©faut plus intelligente (√âtape 2.3.1)
          deviceLang: 'en', // Langue par d√©faut
        );
        _setUserProfile(defaultProfile);
        debugLog('‚úÖ [CurrentUserService - loadUserProfile] Profil par d√©faut cr√©√© pour UID: $uid', level: 'INFO');
        // TODO: Ajouter une logique pour sauvegarder ce profil par d√©faut si cr√©√© ici (√âtape 2.3.2)
        // await _firestoreService.saveUserProfile(uid: uid, email: FirebaseAuth.instance.currentUser!.email!, firstName: defaultProfile.firstName, isReceiver: defaultProfile.isReceiver);
        // D√©marrer le listener m√™me si on vient de cr√©er le document.
        _startProfileSubscription(); // D√©marrer le listener maintenant
      }
    } catch (e) {
      debugLog('‚ùå [CurrentUserService - loadUserProfile] Erreur lors du chargement initial du profil pour UID $uid: $e', level: 'ERROR');
      _setUserProfile(null); // Assure que le profil est null en cas d'erreur
      // TODO: G√©rer l'erreur (ex: afficher un message √† l'utilisateur ?) (√âtape 2.3.3)
    }
  }

  // ‚úÖ √âtape 2.4 : Logique de synchronisation du profil (listener Firestore) (inchang√©)
  // D√©marre l'√©coute en temps r√©el des changements sur le document /users/{uid}.
  void _startProfileSubscription() {
    final uid = currentUid;
    if (uid == null) {
      debugLog('üë§ [CurrentUserService - _startProfileSubscription] Aucun utilisateur connect√©. Annulation.', level: 'WARNING');
      _cancelProfileSubscription(); // Assure qu'aucune souscription n'est active
      _setUserProfile(null);
      return;
    }

    // Annule toute souscription existante avant d'en d√©marrer une nouvelle
    _cancelProfileSubscription();

    debugLog('üîÑ [CurrentUserService - _startProfileSubscription] D√©marrage du listener Firestore pour profil UID: $uid', level: 'INFO');

    // Utilise le FirestoreService pour obtenir une r√©f√©rence au document utilisateur
    // et √©coute les snapshots en temps r√©el.
    // TODO: Impl√©menter getUserProfileStream dans FirestoreService (√âtape 5)
    _profileSubscription = _firestoreService
        .getUserProfileStream(uid) // Supposons que FirestoreService a une m√©thode pour obtenir un stream de document
        .listen(
          (DocumentSnapshot<Map<String, dynamic>> snapshot) {
        debugLog('üì© [CurrentUserService - _startProfileSubscription] Snapshot re√ßu pour profil UID: ${snapshot.id}', level: 'DEBUG');
        if (snapshot.exists && snapshot.data() != null) {
          // Cr√©e/met √† jour le UserProfile √† partir des donn√©es du snapshot
          final userProfile = UserProfile.fromFirestore(snapshot.id, snapshot.data());
          _setUserProfile(userProfile); // Met √† jour le ValueNotifier
          debugLog('‚úÖ [CurrentUserService - _startProfileSubscription] Profil mis √† jour depuis snapshot pour UID: ${snapshot.id}', level: 'INFO');
        } else {
          // Document supprim√© ou vide. Traiter cela
          debugLog('‚ö†Ô∏è [CurrentUserService - _startProfileSubscription] Document profil UID ${snapshot.id} non trouv√© ou vide dans le snapshot. Nettoyage du profil.', level: 'WARNING');
          _setUserProfile(null); // Met le profil √† null si le document dispara√Æt
          // TODO: Annuler la souscription ici si le document dispara√Æt est le signal de d√©connexion du profil (√âtape 2.5)
          // _cancelProfileSubscription();
        }
      }, // <-- Fin du callback du listen
      onError: (error) {
        debugLog('‚ùå [CurrentUserService - _startProfileSubscription] Erreur lors de l\'√©coute du profil UID $uid: $error', level: 'ERROR');
        _setUserProfile(null); // Met le profil √† null en cas d'erreur du listener
        // TODO: G√©rer l'erreur du listener (ex: r√©essayer, afficher un message) (√âtape 2.4.1)
      },
      // L'√©v√©nement 'onDone' n'est g√©n√©ralement pas √©mis pour les listeners Firestore en temps r√©el
      // car le stream est con√ßu pour √™tre permanent tant que la connexion est active.
      // On peut l'ignorer ou le logguer si n√©cessaire.
      // onDone: () {
      //   debugLog('‚ÑπÔ∏è [CurrentUserService - _startProfileSubscription] Listener de profil Firestore termin√©.', level: 'INFO');
      //   _setUserProfile(null); // Assure le nettoyage si le stream se termine inopin√©ment
      // },
    ); // <-- Fin de l'appel .listen()
  }

  // ‚úÖ √âtape 2.4 : Ajouter la logique d'annulation du listener Firestore
  // Annule la souscription active au listener Firestore pour √©viter les fuites de m√©moire.
  // Appel√©e lors de la d√©connexion de l'utilisateur (√âtape 2.5) ou avant de red√©marrer un listener.
  void _cancelProfileSubscription() {
    if (_profileSubscription != null) {
      debugLog('üßπ [CurrentUserService - _cancelProfileSubscription] Annulation de la souscription Firestore pour le profil.', level: 'INFO');
      _profileSubscription?.cancel(); // Annule la souscription
      _profileSubscription = null; // Remet la r√©f√©rence √† null
    }
  }

  // ‚úÖ √âtape 2.5 : Ajouter la logique du cycle de vie (√©couter FirebaseAuth.instance.authStateChanges)
  // Cette m√©thode √©coute les changements d'√©tat d'authentification (connexion/d√©connexion)
  // et d√©clenche le chargement/synchronisation ou le nettoyage du profil.
  void _startAuthListener() {
    debugLog('üîÑ [CurrentUserService - _startAuthListener] D√©marrage de l\'√©coute des changements d\'√©tat d\'authentification.', level: 'INFO');
    // Annule toute souscription existante avant d'en d√©marrer une nouvelle
    _cancelAuthListener(); // Assure qu'un seul listener d'auth est actif

    // TODO: Annuler le listener de profil aussi en cas de red√©marrage du listener d'auth ? _cancelProfileSubscription();
    // Si le listener d'auth est relanc√©, on veut s'assurer que l'ancien listener de profil est bien arr√™t√©.
    // _cancelProfileSubscription(); // <- √Ä appeler ici ? Ou seulement dans clearUserProfile ?
    // La logique est : si l'√©tat change (ex: d√©connexion), clearUserProfile est appel√© qui annule le listener profil.
    // Si on red√©marre le listener d'auth (ce qui ne devrait arriver qu'√† l'initialisation du service),
    // on veut aussi s'assurer que le listener profil est arr√™t√©. L'appel dans clearUserProfile est la bonne place
    // pour la d√©connexion. Appeler ici pourrait √™tre redondant ou incorrect si on relance le listener d'auth
    // sans changer d'√©tat. Laissons l'appel dans clearUserProfile pour l'instant.


    // √âcoute le stream des changements d'√©tat d'authentification
    _authStateSubscription = FirebaseAuth.instance.authStateChanges().listen((User? user) {
      if (user != null) {
        // Utilisateur connect√©. Charger/Synchroniser son profil.
        debugLog('üë§ [CurrentUserService - _startAuthListener] Changement d\'√©tat: Utilisateur connect√© (UID: ${user.uid}).', level: 'INFO');
        // TODO: G√©rer le cas o√π l'utilisateur est d√©j√† connect√© au d√©marrage (getInitialUser() ou √©quivalent) (√âtape 2.5.1)
        // loadUserProfile() est appel√© pour un chargement unique. Pour la synchronisation continue, _startProfileSubscription est pr√©f√©rable.
        // On peut appeler loadUserProfile() la premi√®re fois qu'un utilisateur se connecte APR√àS l'initialisation de l'app,
        // puis _startProfileSubscription() pour les mises √† jour. Ou simplement toujours _startProfileSubscription().
        // L'approche avec listener est plus r√©active. Utilisons directement _startProfileSubscription().
        _startProfileSubscription(); // D√©marre l'√©coute en temps r√©el du profil.
        // TODO: G√©rer l'affichage du profil par d√©faut si le document n'existe pas encore lors de la premi√®re connexion. (√âtape 2.3.1, 2.3.2)

      } else {
        // Utilisateur d√©connect√©. Nettoyer le profil.
        debugLog('üë§ [CurrentUserService - _startAuthListener] Changement d\'√©tat: Utilisateur d√©connect√©.', level: 'INFO');
        clearUserProfile(); // Nettoie le profil et annule le listener Firestore du profil
      }
    },
      onError: (error) {
        debugLog('‚ùå [CurrentUserService - _startAuthListener] Erreur lors de l\'√©coute des changements d\'√©tat d\'authentification : $error', level: 'ERROR');
        // En cas d'erreur sur le listener d'auth, on consid√®re l'utilisateur comme d√©connect√© par s√©curit√©.
        clearUserProfile();
        // TODO: G√©rer l'erreur du listener d'auth (ex: afficher un message) (√âtape 2.5.2)
      },
      // L'√©v√©nement 'onDone' n'est g√©n√©ralement pas √©mis pour authStateChanges stream.
    );
  }

  // ‚úÖ √âtape 2.5 : Ajouter la logique d'annulation du listener d'√©tat d'authentification
  // Annule la souscription active au listener authStateChanges.
  // Utile si le service devait √™tre d√©truit (peu probable pour un Singleton global) ou lors d'un arr√™t propre de l'app.
  void _cancelAuthListener() {
    if (_authStateSubscription != null) {
      debugLog('üßπ [CurrentUserService - _cancelAuthListener] Annulation de la souscription authStateChanges.', level: 'INFO');
      _authStateSubscription?.cancel(); // Annule la souscription
      _authStateSubscription = null; // Remet la r√©f√©rence √† null
    }
  }


// TODO: Ajouter la logique pour sauvegarder les modifications du profil utilisateur (√âtape 2.6/5)
// Future<void> saveUserProfileChanges(UserProfile profile) async { ... }
// Utiliserait _firestoreService.saveUserProfile ou updateUserProfileFields

// Ancienne structure du service (champs individuels et setUserData) (inchang√© - toujours comment√©)
// ‚õîÔ∏è √Ä supprimer ‚Äî Remplac√©e par la gestion de UserProfile et ValueNotifier ‚Äî 2025/06/13
/*
        // ‚≠êÔ∏è √âtape 2 (Ancienne) : D√©clarer les champs pour stocker les donn√©es utilisateur
        // Utilise 'late' car ces champs seront initialis√©s plus tard par setUserData.
        // Utilise nullable String pour displayName car il peut √™tre absent.
        late bool _isReceiver;
        late String _deviceLang;
        String? _displayName; // displayName peut √™tre nullable

          // ‚≠êÔ∏è √âtape 3 (Ancienne) : D√©finir une m√©thode pour initialiser/mettre √† jour les donn√©es
        void setUserData({
          required bool isReceiver,
          required String deviceLang,
          String? displayName, // Accepte un displayName nullable
        }) {
          _isReceiver = isReceiver;
          _deviceLang = deviceLang;
          _displayName = displayName;
          // Optionnel: ajouter un log pour confirmer que les donn√©es sont d√©finies
          // print('‚úÖ CurrentUserService initialis√©/mis √† jour : isReceiver=$_isReceiver, deviceLang=$_deviceLang, displayName=$_displayName');
        }

        // ‚≠êÔ∏è √âtape 4 (Ancienne) : D√©finir les getters publics pour acc√©der aux donn√©es
        // Utilise 'instance' pour acc√©der aux getters : CurrentUserService.instance.isReceiver
        // bool get isReceiver => _isReceiver; // Commented out or removed in V002
        // String get deviceLang => _deviceLang; // Commented out or removed in V002
        // String? get displayName => _displayName; // Commented out or removed in V002

        // Optionnel (Ancienne): Ajouter une m√©thode pour v√©rifier si les donn√©es sont initialis√©es
        // bool get isInitialized => ::_isReceiver != null && _deviceLang != null; // Commented out or removed in V002
        // Note: Avec 'late', l'acc√®s avant initialisation l√®vera une LateInitializationError.
        // Si tu veux √©viter √ßa, utilise des champs nullable (bool?, String?) et g√®re les nulls dans les getters ou √† l'appel.
        // Pour une approche lean post-auth flow, 'late' est acceptable si HomeSelector garantit l'appel √† setUserData.
        */ // ‚õîÔ∏è FIN du bloc √† supprimer ‚Äî 2025/06/13

} // <-- Fin de la classe CurrentUserService

// üìÑ FIN de lib/services/current_user_service.dart
