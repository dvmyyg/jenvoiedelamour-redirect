// -------------------------------------------------------------
// üìÑ FICHIER : lib/services/pairing_service.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Cr√©er une relation d‚Äôappairage bilat√©rale dans Firestore
// ‚úÖ Supprimer la relation d‚Äôappairage bilat√©rale dans Firestore
// ‚úÖ V√©rifier si deux utilisateurs sont appair√©s dans Firestore
// ‚úÖ R√©cup√©rer les donn√©es d‚Äôun partenaire appair√© depuis Firestore
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V003 - Correction chemins Firestore, restauration getRecipientData, am√©lioration pairUsers pour enregistrer donn√©es compl√®tes Recipient. - 2025/06/14 18h00 (√Ä remplir)
// V002 - Correction des chemins Firestore pour coh√©rence avec l‚Äôapp - 2025/06/13 17h12
// V001 - Cr√©ation initiale du squelette PairingService - 2025/06/13 15h24
// -------------------------------------------------------------

import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:get_it/get_it.dart'; // Pas utilis√© pour le moment, les acc√®s se font directement ici.
// import 'firestore_service.dart'; // Pas utilis√© pour le moment.
import 'package:jelamvp01/models/recipient.dart'; // Importe le mod√®le Recipient
import 'package:jelamvp01/utils/debug_log.dart'; // Importe l'utilitaire de log

class PairingService {
  // Acc√®s direct √† l'instance Firestore. Ce service agit comme une couche basse
  // pour les documents de relation d'appairage sp√©cifiquement.
  // √Ä l'avenir, si FirestoreService englobe TOUT, cela pourrait √™tre revu (√âtape 3/5).
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // NOTE sur FirestoreService injection : L'injection a √©t√© retir√©e car ce service
  // utilise directement FirebaseFirestore.instance. Pour l'instant, PairingService
  // est la couche "basse" pour la gestion des *documents de relation r√©ciproque*.
  // L'√âtape 3/5 de la roadmap pr√©voit de centraliser TOUS les acc√®s bas niveau via FirestoreService.
  // Il faudrait alors que PairingService utilise FirestoreService.get/set/delete/batch
  // au lieu de _firestore.collection(...).
  // Pour l'instant, la priorit√© est de rendre CE service fonctionnel et correct dans ses chemins.
  // final FirestoreService _firestoreService = GetIt.I<FirestoreService>();


  // =============================================================
  // ‚ù§Ô∏è APPAIRAGE ‚Äî Cr√©er une relation bilat√©rale
  // =============================================================
  /// üîó Cr√©e ou met √† jour la relation d'appairage bilat√©rale dans Firestore.
  /// userAId est l'UID de l'utilisateur qui initie ou accepte l'appairage (l'utilisateur courant).
  /// userBId est l'UID de l'autre utilisateur (le partenaire).
  /// La fonction r√©cup√®re les noms d'affichage depuis les documents utilisateurs respectifs
  /// et les enregistre dans les documents recipients de chaque c√¥t√©.
  Future<void> pairUsers(String userAId, String userBId) async {
    if (userAId.isEmpty || userBId.isEmpty || userAId == userBId) {
      debugLog("‚ö†Ô∏è [PairingService] Appairage tent√© avec UID(s) invalide(s) ou auto-appairage.", level: 'WARN');
      return; // Ne rien faire si UIDs invalides ou identiques
    }

    try {
      final batch = _firestore.batch();

      // Chemins corrects :
      // On va chercher les documents utilisateurs pour r√©cup√©rer les noms
      final userASnap = await _firestore.collection('users').doc(userAId).get();
      final userADisplayName = userASnap.exists ? (userASnap.data()?['firstName'] ?? 'Utilisateur A') : 'Utilisateur A'; // Nom de userA pour userB
      debugLog("‚úÖ [PairingService] Nom d'affichage User A ($userAId) : $userADisplayName", level: 'DEBUG');

      final userBSnap = await _firestore.collection('users').doc(userBId).get();
      final userBDisplayName = userBSnap.exists ? (userBSnap.data()?['firstName'] ?? 'Utilisateur B') : 'Utilisateur B'; // Nom de userB pour userA
      debugLog("‚úÖ [PairingService] Nom d'affichage User B ($userBId) : $userBDisplayName", level: 'DEBUG');


      // 1. Ajouter/Mettre √† jour le document destinataire chez l'utilisateur A pour userB
      // Chemin : users/{userAId}/recipients/{userBId}
      final recipientAtoBRef = _firestore
          .collection('users')
          .doc(userAId)
          .collection('recipients')
          .doc(userBId); // ID du document est l'UID de l'autre utilisateur (userB)

      batch.set(recipientAtoBRef, {
        'id': userBId, // L'UID du partenaire (userB)
        'displayName': userBDisplayName, // Le nom de userB vu par userA
        // TODO: Ces champs doivent √™tre coh√©rents avec ton mod√®le Recipient et potentiellement g√©r√©s ailleurs (ex: par userA)
        'icon': 'üíå', // Ic√¥ne par d√©faut - Peut-√™tre charg√©e depuis un profil public ou g√©r√©e par l'utilisateur
        'relation': 'relation_partner', // Relation par d√©faut
        'allowedPacks': [], // Packs par d√©faut
        'paired': true, // Marqu√© comme appair√©
        'catalogType': 'partner', // Type de catalogue par d√©faut
        'createdAt': FieldValue.serverTimestamp(), // Horodatage de cr√©ation ou de mise √† jour (pour la premi√®re fois)
        // On utilise SetOptions(merge: true) pour ne pas √©craser d'autres champs potentiellement existants (ex: modifi√©s par l'utilisateur)
      }, SetOptions(merge: true));
      debugLog("‚úÖ [PairingService] Pr√©paration batch: document recipient A->B ($userAId -> $userBId)", level: 'DEBUG');


      // 2. Ajouter/Mettre √† jour le document destinataire chez l'utilisateur B pour userA
      // Chemin : users/{userBId}/recipients/{userAId}
      final recipientBtoARef = _firestore
          .collection('users')
          .doc(userBId)
          .collection('recipients')
          .doc(userAId); // ID du document est l'UID de l'autre utilisateur (userA)

      batch.set(recipientBtoARef, {
        'id': userAId, // L'UID du partenaire (userA)
        'displayName': userADisplayName, // Le nom de userA vu par userB
        // TODO: Ces champs doivent √™tre coh√©rents avec ton mod√®le Recipient
        'icon': 'üíå', // Ic√¥ne par d√©faut
        'relation': 'relation_partner', // Relation par d√©faut
        'allowedPacks': [], // Packs par d√©faut
        'paired': true, // Marqu√© comme appair√©
        'catalogType': 'partner', // Type de catalogue par d√©faut
        'createdAt': FieldValue.serverTimestamp(), // Horodatage
        // On utilise SetOptions(merge: true)
      }, SetOptions(merge: true));
      debugLog("‚úÖ [PairingService] Pr√©paration batch: document recipient B->A ($userBId -> $userAId)", level: 'DEBUG');


      // Ex√©cuter le batch
      await batch.commit();
      debugLog("‚úÖ [PairingService] Batch d'appairage ex√©cut√© entre $userAId et $userBId", level: 'SUCCESS');

    } catch (e) {
      debugLog("‚ùå [PairingService] Erreur lors de l‚Äôappairage Firestore entre $userAId et $userBId : $e", level: 'ERROR');
      // TODO: G√©rer cette erreur (ex: la propager, la logguer plus sp√©cifiquement)
      throw e; // Relancer l'exception pour que l'appelant puisse la g√©rer
    }
  } // <-- Fin de la fonction pairUsers

  // =============================================================
  // ‚ùå APPAIRAGE ‚Äî Supprimer une relation bilat√©rale
  // =============================================================
  /// ‚ùå Supprime la relation d'appairage bilat√©rale dans Firestore.
  /// Supprime les documents recipients sous users/{userUid}/recipients/{partnerUid} des deux c√¥t√©s.
  Future<void> unpairUsers(String userAUid, String userBUid) async {
    if (userAUid.isEmpty || userBUid.isEmpty || userAUid == userBUid) {
      debugLog("‚ö†Ô∏è [PairingService] Suppression d‚Äôappairage tent√©e avec UID(s) invalide(s).", level: 'WARN');
      return;
    }

    try {
      final batch = _firestore.batch();

      // Chemin correct pour supprimer le document recipient de userB chez userA
      final recipientAtoBRef = _firestore
          .collection('users')
          .doc(userAUid)
          .collection('recipients')
          .doc(userBUid);

      // Chemin correct pour supprimer le document recipient de userA chez userB
      final recipientBtoARef = _firestore
          .collection('users')
          .doc(userBUid)
          .collection('recipients')
          .doc(userAUid);

      batch.delete(recipientAtoBRef);
      batch.delete(recipientBtoARef);

      await batch.commit();
      debugLog("‚úÖ [PairingService] Suppression d'appairage r√©ussie entre $userAUid et $userBUid", level: 'SUCCESS');

    } catch (e) {
      debugLog("‚ùå [PairingService] Erreur lors de la suppression d‚Äôappairage entre $userAUid et $userBUid : $e", level: 'ERROR');
      // TODO: G√©rer cette erreur
      throw e; // Relancer l'exception
    }
  } // <-- Fin de la fonction unpairUsers


  // =============================================================
  // üîç APPAIRAGE ‚Äî V√©rifier si un utilisateur est appair√© avec un partenaire sp√©cifique
  // =============================================================
  /// üîç V√©rifie l'existence du document recipient de partnerUid sous users/userUid/recipients/.
  /// Cette m√©thode v√©rifie l'existence d'UN SEUL C√îT√â de la relation.
  /// Pour une v√©rification bilat√©rale stricte, il faudrait v√©rifier les deux sens.
  Future<bool> isPairedWith(String userUid, String partnerUid) async {
    if (userUid.isEmpty || partnerUid.isEmpty || userUid == partnerUid) {
      debugLog("‚ö†Ô∏è [PairingService] V√©rification d‚Äôappairage tent√©e avec UID(s) invalide(s) ou auto-v√©rification.", level: 'WARN');
      return false;
    }
    try {
      // Chemin correct pour v√©rifier le document recipient de partnerUid chez userUid
      final doc = await _firestore
          .collection('users')
          .doc(userUid)
          .collection('recipients')
          .doc(partnerUid)
          .get();

      final isActuallyPaired = doc.exists && (doc.data()?['paired'] == true); // Double check le champ 'paired'
      debugLog("‚úÖ [PairingService] V√©rification appairage ($userUid <-> $partnerUid): ${isActuallyPaired ? 'Oui' : 'Non'}", level: isActuallyPaired ? 'INFO' : 'DEBUG');
      return isActuallyPaired;

    } catch (e) {
      debugLog("‚ùå [PairingService] Erreur lors de la v√©rification d‚Äôappairage entre $userUid et $partnerUid : $e", level: 'ERROR');
      // TODO: G√©rer cette erreur
      throw e; // Relancer l'exception
    }
  } // <-- Fin de la fonction isPairedWith

  // =============================================================
  // üì• APPAIRAGE ‚Äî R√©cup√©rer les donn√©es du partenaire
  // =============================================================
  /// üì• R√©cup√®re les donn√©es du document Recipient de partnerUid stock√© sous users/userUid/recipients/.
  /// Retourne un objet Recipient si le document existe et contient les donn√©es n√©cessaires.
  /// Retourne null si le document n'existe pas ou si les donn√©es sont insuffisantes/invalides.
  Future<Recipient?> getRecipientData(String userUid, String partnerUid) async {
    if (userUid.isEmpty || partnerUid.isEmpty || userUid == partnerUid) {
      debugLog("‚ö†Ô∏è [PairingService] R√©cup√©ration donn√©es destinataire tent√©e avec UID(s) invalide(s).", level: 'WARN');
      return null;
    }
    try {
      // Chemin correct pour r√©cup√©rer le document recipient de partnerUid chez userUid
      final doc = await _firestore
          .collection('users')
          .doc(userUid)
          .collection('recipients')
          .doc(partnerUid)
          .get();

      if (doc.exists && doc.data() != null) {
        final data = doc.data()!;
        // Tente de mapper les donn√©es au mod√®le Recipient
        try {
          // Assure-toi que tous les champs obligatoires de ton mod√®le Recipient sont pr√©sents ici
          // et que les types correspondent.
          // Ce mappage devrait id√©alement √™tre une m√©thode dans la classe Recipient ou un service d√©di√©.
          final recipient = Recipient(
            id: data['id'] ?? partnerUid, // Assure l'UID est pr√©sent, fallback sur partnerUid
            displayName: data['displayName'] ?? 'Inconnu', // Nom d'affichage
            icon: data['icon'] ?? 'üí¨', // Ic√¥ne
            relation: data['relation'] ?? 'relation_partner', // Relation
            allowedPacks: (data['allowedPacks'] as List?)?.cast<String>() ?? [], // Liste de strings
            paired: data['paired'] == true, // Bool√©en, assure qu'il est bien true si appair√©
            catalogType: data['catalogType'] ?? 'partner', // Type de catalogue
            createdAt: data['createdAt'] as Timestamp?, // Timestamp
            // TODO: Ajouter d'autres champs si ton mod√®le Recipient en a.
          );
          debugLog("‚úÖ [PairingService] D√©tails destinataire ($partnerUid pour $userUid) charg√©s.", level: 'INFO');
          return recipient;

        } catch (e) {
          debugLog("‚ùå [PairingService] Erreur de mappage Recipient pour UID $partnerUid : $e", level: 'ERROR');
          return null; // √âchec du mappage
        }
      } else {
        debugLog("‚ö†Ô∏è [PairingService] Document destinataire ($partnerUid pour $userUid) non trouv√© ou vide.", level: 'WARNING');
        return null; // Document non trouv√© ou vide
      }

    } catch (e) {
      debugLog("‚ùå [PairingService] Erreur lors de la r√©cup√©ration des donn√©es du destinataire ($partnerUid pour $userUid) : $e", level: 'ERROR');
      // TODO: G√©rer cette erreur
      throw e; // Relancer l'exception
    }
  } // <-- Fin de la fonction getRecipientData


} // <-- Fin de la classe PairingService


// üìÑ FIN de lib/services/pairing_service.dart
