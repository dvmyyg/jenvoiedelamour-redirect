// -------------------------------------------------------------
// üìÑ FICHIER : lib/services/message_service.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ G√®re l'envoi et la r√©ception de messages entre deux utilisateurs (identifi√©s par UID)
// ‚úÖ Interagit avec la sous-collection 'messages' sous le chemin users/{userId}/recipients/{otherUserId}
// ‚úÖ Utilise FirestoreService pour l'envoi atomique de messages dans les collections miroir des deux utilisateurs.
// ‚úÖ Fournit un stream temps r√©el des messages d'une conversation.
// ‚úÖ D√©pend de FirestoreService pour l'envoi.
// ‚úÖ Logs internes via DebugLog
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V005 - Suppression des blocs de code marqu√©s ‚õîÔ∏è √Ä supprimer. - 2025/06/18 13h44
// V004 - Refactor de sendMessage pour utiliser FirestoreService (√©criture atomique via batch). Ajout injection de d√©pendances FirestoreService. - 2025/06/18 13h40
// V003 - Remplacement des identifiants deviceId/recipientId par les UID Firebase des deux utilisateurs. Adaptation des chemins Firestore (users/{userId}/recipients/{otherUserId}/messages). - 2025/05/29
// V002 - correction r√©cup√©ration messages : affichage pour A et B - 2025/05/28 15h12
// V001 - ajout du stream temps r√©el pour les messages - 2025/05/26 18h34
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/29

import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/message.dart'; // Utilise le mod√®le Message refactoris√© (avec UID)
import '../utils/debug_log.dart';
import 'firestore_service.dart'; // ‚úÖ AJOUT V004 : Import de FirestoreService

class MessageService {
  // L'identifiant de l'utilisateur actuel (son UID Firebase)
  final String currentUserId;
  // L'identifiant de l'autre utilisateur (le destinataire, son UID Firebase)
  final String recipientUserId; // Renomm√© de recipientId pour plus de clart√©

  // ‚úÖ AJOUT V004 : Champ pour l'instance inject√©e de FirestoreService
  final FirestoreService _firestoreService;

  // Le service est initialis√© avec les UID des deux utilisateurs impliqu√©s et FirestoreService
  // üîÑ MODIF V004 : Ajout de la d√©pendance √† FirestoreService
  MessageService({required this.currentUserId, required this.recipientUserId, required FirestoreService firestoreService})
      : _firestoreService = firestoreService; // Initialise l'instance FirestoreService

  // R√©f√©rence √† la collection de messages pour CET utilisateur (chemin bas√© sur UID)
  // Cette r√©f√©rence est utilis√©e pour le streaming des messages dans streamMessages()
  CollectionReference get _messageRef => FirebaseFirestore.instance // NOTE : Utilise toujours FirebaseFirestore.instance pour le stream car FirestoreService n'a pas de m√©thode √©quivalente.
      .collection('users') // Collection de premier niveau bas√©e sur l'UID
      .doc(currentUserId) // Document de l'utilisateur actuel (UID)
      .collection('recipients') // Sous-collection des destinataires
      .doc(recipientUserId) // Document du destinataire (son UID)
      .collection('messages'); // Sous-collection des messages de cette conversation

  // ‚úÖ Stream temps r√©el de tous les messages de cette conversation
  // NOTE : Cette m√©thode utilise toujours FirebaseFirestore.instance directement.
  // TODO: Ajouter une m√©thode dans FirestoreService pour streamer les messages d'une conversation si la centralisation compl√®te est n√©cessaire. (√âtape 7.1)
  Stream<List<Message>> streamMessages() {
    debugLog("üîÑ Ouverture du flux de messages entre UID $currentUserId et $recipientUserId");
    // La requ√™te reste la m√™me, mais op√®re sur la r√©f√©rence de collection locale
    return _messageRef
        .orderBy('sentAt', descending: false)
        .snapshots()
        .map((snapshot) => snapshot.docs
        .map((doc) => Message.fromMap(doc.id, doc.data() as Map<String, dynamic>)) // Utilise le factory Message.fromMap (qui attend l'ID du doc et un Map avec des UID)
        .toList());
  }

  // ‚úÖ MODIF V004 : Ajout d'un nouveau message (√©crit de mani√®re atomique dans les collections miroir des 2 utilisateurs via FirestoreService)
  Future<void> sendMessage(Message message) async {
    // Le message doit d√©j√† avoir les UID corrects dans message.from et message.to
    debugLog("üì§ Envoi d'un message de type '${message.type}' de UID ${message.from} vers UID ${message.to} via FirestoreService."); // ‚úÖ MODIF log

    try {
      // ‚úÖ Utilise le FirestoreService inject√© pour envoyer le message de mani√®re atomique (Point 3 du plan)
      await _firestoreService.sendMessage(
        senderUid: message.from,
        recipientUid: message.to,
        message: message,
      );
      debugLog(
        "‚úÖ Message ${message.id} envoy√© avec succ√®s de ${message.from} √† ${message.to} via FirestoreService (√©criture atomique).", // ‚úÖ MODIF log
      );
    } on FirebaseException catch (e) {
      debugLog("‚ùå [sendMessage] Erreur Firebase lors de l'envoi du message ${message.id} via FirestoreService : ${e.code} - ${e.message}", level: 'ERROR'); // ‚úÖ MODIF log
      // TODO: G√©rer cette erreur de mani√®re appropri√©e pour l'UI (√âtape 7.2)
      rethrow;
    } catch (e) {
      debugLog("‚ùå [sendMessage] Erreur inattendue lors de l'envoi du message ${message.id} via FirestoreService : $e", level: 'ERROR'); // ‚úÖ MODIF log
      // TODO: G√©rer cette erreur de mani√®re appropri√©e pour l'UI (√âtape 7.2)
      rethrow;
    }
  }
}

// <-- Fin de la classe MessageService // ‚úÖ CORRECTION : S'assurer que le commentaire est bien √† la fin de la classe

// üìÑ FIN de lib/services/message_service.dart
