// -------------------------------------------------------------
// üìÑ FICHIER : lib/services/user_service.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Service utilitaire simple pour r√©cup√©rer l'identifiant unique (UID) de l'utilisateur Firebase actuellement connect√©.
// ‚úÖ Permet aux autres parties de l'application d'acc√©der facilement √† l'UID de l'utilisateur sans interagir directement avec l'instance FirebaseAuth.
// ‚úÖ Retourne l'UID si un utilisateur est connect√©, ou null sinon.
// ‚úÖ S'appuie sur FirebaseAuth.instance.currentUser pour obtenir l'utilisateur.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V002 - Code examin√© par Gemini. Fonction getCurrentUserUid confirm√©e comme utilisant correctement FirebaseAuth.instance.currentUser.uid. Le fichier est valid√© pour son r√¥le simple d'acc√®s √† l'UID. - 2025/05/31
// V001 - refactoring deviceId > userId - Cr√©ation initiale de la fonction getCurrentUserUid bas√©e sur FirebaseAuth. - 2025/05/29
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/31 // Mise √† jour le 31/05

// On importe le package Firebase Authentication
import 'package:firebase_auth/firebase_auth.dart';
// On garde l'import pour le log, si vous souhaitez continuer √† l'utiliser
import '../utils/debug_log.dart';

/// R√©cup√®re l'UID de l'utilisateur Firebase actuellement connect√©.
/// Retourne l'UID (String?) si un utilisateur est sign√©, sinon retourne null.
/// Cette fonction ne cr√©e PAS d'utilisateur ; elle r√©cup√®re simplement celui qui est d√©j√† sign√©.
Future<String?> getCurrentUserUid() async { // Le type de retour est maintenant Future<String?> car l'UID peut √™tre null
  // On acc√®de √† l'instance de Firebase Authentication
  final user = FirebaseAuth.instance.currentUser;

  if (user != null) {
    // Si user n'est pas null, cela signifie qu'un utilisateur est connect√©
    debugLog(
      'üë§ [getCurrentUserUid] Utilisateur connect√© trouv√©. UID: ${user.uid}',
      level: 'INFO',
    );
    // On retourne l'UID de l'utilisateur connect√©
    return user.uid;
  } else {
    // Si user est null, aucun utilisateur n'est connect√©
    debugLog(
      'üö´ [getCurrentUserUid] Aucun utilisateur connect√© trouv√©.',
      level: 'INFO',
    );
    // On retourne null pour indiquer qu'il n'y a pas d'utilisateur connect√©
    return null;
  }
}

// TODO: Ajoutez ici d'autres fonctions li√©es √† l'utilisateur si n√©cessaire,
// comme signInWithEmailPassword, signUpWithEmailPassword, signOut,
// ou un stream pour √©couter les changements d'√©tat d'authentification.
