// -------------------------------------------------------------
// üìÑ FICHIER : lib/services/fcm_service.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ G√®re la r√©cup√©ration du token FCM de l'appareil et son stockage via Firestore.
// ‚úÖ √âcoute les changements de token FCM et met √† jour Firestore.
// ‚úÖ G√®re les messages FCM re√ßus quand l'application est au premier plan et affiche une notification locale.
// ‚úÖ G√®re le clic sur les notifications quand l'application est ouverte par le clic (via onMessageOpenedApp).
// ‚úÖ G√®re le message initial (lancement de l'app depuis √©tat termin√© par notif) et d√©l√®gue navigation.
// ‚úÖ D√©l√®gue la logique de navigation post-notification √† NotificationRouter.
// ‚úÖ Re√ßoit l'instance de FlutterLocalNotificationsPlugin via injection de d√©pendances.
// ‚úÖ Utilise la configuration de notification centralis√©e (notification_config.dart).
// ‚úÖ G√®re la nullit√© potentielle de message.messageId pour g√©n√©rer l'ID local de notification.
// ‚úÖ Initialise le plugin flutter_local_notifications et enregistre les handlers de clic (d√©plac√© de main.dart).
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V011 - Int√©gration du traitement du message initial FCM et nettoyage des imports non utilis√©s. - 2025/06/16 19h25
// V010 - Gestion de l'avertissement "unused_element" pour la r√©f√©rence au handler top-level. - 2025/06/15 20h55
// V009 - D√©placement de l'initialisation du plugin flutter_local_notifications et de ses handlers de clic (onDidReceiveNotificationResponse, onDidReceiveBackgroundNotificationResponseTopLevel) depuis main.dart vers ce service. Ajout des m√©thodes correspondantes. Appel de la nouvelle m√©thode d'initialisation dans initializeFcmHandlers(). - 2025/06/15 20h00
// V008 - Utilisation de notification_config.dart pour la configuration des notifications locales (messageNotificationDetails). Ajout gestion null message.messageId pour ID local. - 2025/06/13 20h55
// V007 - Injection de FlutterLocalNotificationsPlugin via constructeur et utilisation du champ inject√©. - 2025/06/13 20h53
// V006 - Suppression de la m√©thode obsol√®te handleNotificationClick + nettoyage imports. - 2025/06/10 16h52
// V005 - Utilise CurrentUserService pour les param√®tres isReceiver et deviceLang dans handleNotificationClick. - 2025/06/04
// V004 - Correction de l'acc√®s aux getters statiques onMessage et onMessageOpenedApp. - 2025/06/02
// V003 - Ajout d'un point d'entr√©e pour la navigation. - 2025/06/02
// V002 - Ajout des listeners pour les messages FCM re√ßus. - 2025/06/02
// V001 - Cr√©ation du service FCM pour la gestion du token. - 2025/06/02
// -------------------------------------------------------------

// =============================================================
// üß© IMPORTS & DEPENDANCES
// =============================================================
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:jelamvp01/utils/debug_log.dart';
// ‚úÖ R√©tabli - Import de main.dart n√©cessaire pour r√©f√©rencer la fonction top-level onDidReceiveBackgroundNotificationResponse pass√©e au plugin local notifications. Id√©alement, cette fonction serait dans un fichier top-level d√©di√©. - 2025/06/16 19h05
import 'package:jelamvp01/main.dart'; // import r√©active le 2025/06/15
import 'package:jelamvp01/navigation/notification_router.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // Import n√©cessaire pour le type inject√©
import 'notification_config.dart'; // ‚úÖ Import de la configuration centralis√©e
import 'dart:async'; // Import n√©cessaire pour DateTime

// ‚õîÔ∏è √Ä supprimer - Import de Recipient non utilis√© directement dans FcmService - 2025/06/16
// import 'package:jelamvp01/models/recipient.dart'; // Importe le mod√®le Recipient

// Note : L'import de CurrentUserService n'est pas n√©cessaire ici car la logique de navigation
// (qui pourrait utiliser CurrentUserService) est d√©l√©gu√©e au NotificationRouter,
// et les handlers de clic locaux g√®rent la lecture directe depuis Firestore si n√©cessaire.

// --- FIN   DU BLOC Imports --- // (Ajout d'un commentaire de fin de bloc pour clart√©)

// =============================================================
// üîê TOKEN ‚Äî R√©cup√©ration et mise √† jour
// =============================================================
class FcmService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  // Champ pour l'instance inject√©e de FlutterLocalNotificationsPlugin (inchang√©)
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin;

  // Constructeur qui accepte le plugin en param√®tre (inchang√©)
  FcmService(this._flutterLocalNotificationsPlugin);

  Future<void> updateTokenForCurrentUser() async {
    User? currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      debugLog('üë§ [FCM Service] Utilisateur non connect√©. Impossible de mettre √† jour le token FCM.', level: 'WARNING');
      return;
    }
    final String uid = currentUser.uid;
    try {
      String? token = await FirebaseMessaging.instance.getToken();
      if (token == null) {
        debugLog('‚ùå [FCM Service] Impossible d\'obtenir le token FCM.', level: 'ERROR');
        return;
      }
      debugLog('ü™™ [FCM Service] Token FCM obtenu : $token', level: 'DEBUG');
      DocumentReference userRef = _firestore.collection('users').doc(uid);
      await userRef.set({'fcmToken': token}, SetOptions(merge: true));
      debugLog('‚úÖ [FCM Service] Token FCM mis √† jour dans Firestore pour l\'UID $uid.', level: 'INFO');
      FirebaseMessaging.instance.onTokenRefresh.listen((newToken) async {
        debugLog('üîÑ [FCM Service] Token FCM actualis√©. Nouveau token : $newToken', level: 'INFO');
        await userRef.set({'fcmToken': newToken}, SetOptions(merge: true));
        debugLog('‚úÖ [FCM Service] Nouveau token FCM actualis√© dans Firestore pour l\'UID $uid.', level: 'INFO');
      }).onError((error) {
        debugLog('‚ùå [FCM Service] Erreur lors de l\'√©coute des mises √† jour du token FCM: $error', level: 'ERROR');
      });
    } catch (e) {
      debugLog('‚ùå [FCM Service] Erreur lors de la mise √† jour du token FCM: $e', level: 'ERROR');
    }
  }

  // =============================================================
// üîî FCM ‚Äî Initialisation des Handlers de Message et Notifications
// =============================================================
// ‚úÖ MODIF (√âtape 6.1.1) : Inclure l'initialisation des notifications locales ici.
// ‚úÖ AJOUT (√âtape 6.2) : G√©rer le message initial si l'app a √©t√© lanc√©e par une notification.
  Future<void> initializeFcmHandlers() async { // ‚úÖ MODIF (√âtape 6.2) : Rendre la m√©thode async
    debugLog('üöÄ [FCM Service] Initialisation des Handlers FCM et notifications locales...', level: 'INFO');
    updateTokenForCurrentUser();
    // ‚úÖ AJOUT (√âtape 6.1.1) : Appeler la nouvelle m√©thode d'initialisation des notifs locales
    initializeLocalNotifications();

    // ‚úÖ AJOUT (√âtape 6.2) : G√©rer le message initial qui a potentiellement lanc√© l'application
    // Ceci est l'√©quivalent du FirebaseMessaging.instance.getInitialMessage().then(...) qui √©tait dans main.dart
    try {
      final RemoteMessage? initialMessage = await FirebaseMessaging.instance.getInitialMessage();
      if (initialMessage != null) {
        debugLog("üîî [FCM Service - INITIAL MESSAGE] App ouverte par notif initiale: ${initialMessage.messageId}", level: 'INFO');
        debugLog("üîî [FCM Service - INITIAL MESSAGE] Data payload from initial message: ${initialMessage.data}", level: 'DEBUG');

        // D√©l√©guer la logique de navigation au NotificationRouter
        // Le Router doit √™tre capable de charger les donn√©es utilisateur/destinataire n√©cessaires
        // m√™me si l'app d√©marre de l'√©tat termin√©.
        NotificationRouter.routeFromNotification(initialMessage.data);
        debugLog('‚û°Ô∏è [FCM Service - INITIAL MESSAGE] Logique de navigation d√©clench√©e pour message initial.', level: 'INFO');
      } else {
        debugLog('üñô [FCM Service - INITIAL MESSAGE] Aucun message FCM initial pour lancer l\'app.', level: 'INFO');
      }
    } catch (e) {
      debugLog("‚ùå [FCM Service - INITIAL MESSAGE] Erreur lors du traitement du message initial: $e", level: 'ERROR');
      // TODO: G√©rer cette erreur (logguer dans Crashlytics?) (√âtape 6.2.1)
    }


    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      debugLog('üîî [FCM Service - FOREGROUND] Message re√ßu: ${message.messageId}', level: 'INFO');
      debugLog('üîî [FCM Service - FOREGROUND] Notification: ${message.notification?.title} / ${message.notification?.body}', level: 'DEBUG');
      debugLog('üîî [FCM Service - FOREGROUND] Data: ${message.data}', level: 'DEBUG');
      showLocalNotification(message);
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      debugLog('üîî [FCM Service - CLICK OPEN] App ouverte par clic notif: ${message.messageId}', level: 'INFO');
      debugLog('üîî [FCM Service - CLICK OPEN] Data: ${message.data}', level: 'DEBUG');
      NotificationRouter.routeFromNotification(message.data);
    });

    debugLog('üöÄ [FCM Service] Handlers FCM et initialisation notifications locales activ√©s.', level: 'INFO');
  }

// --- FIN   DU BLOC Initialisation Handlers --- // (Ajout d'un commentaire de fin de bloc pour clart√©)

  // =============================================================
  // üì≤ NOTIFICATIONS LOCALES ‚Äî Initialisation du Plugin
  // =============================================================
  // ‚úÖ √âtape 6.1.1 : M√©thode pour initialiser le plugin flutter_local_notifications
  // Cette logique est d√©plac√©e ici depuis la fonction main() dans main.dart.
  Future<void> initializeLocalNotifications() async {
    debugLog("üîî [FCM Service] Initialisation de flutter_local_notifications...", level: 'INFO');

    // Configurer les param√®tres sp√©cifiques √† Android (utilise les d√©tails d√©finis dans notification_config.dart)
    // Utilise le canal sp√©cifique aux messages que nous avons d√©fini.
    const AndroidInitializationSettings initializationSettingsAndroid =
    AndroidInitializationSettings('@mipmap/ic_launcher'); // Utilise l'ic√¥ne de ton app

    // TODO: Ajouter la configuration pour iOS si tu vises cette plateforme (DarwinInitializationSettings) (√âtape 6.1.1.2)
    // Utilise les d√©tails Darwin sp√©cifiques aux messages que nous avons d√©finis.
    const InitializationSettings initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      // iOS: DarwinInitializationSettings(...), // Exemple pour iOS - Utilise darwinMessageDetails si tu veux une config iOS d√©di√©e
      // macOS: DarwinInitializationSettings(...), // Exemple pour macOS - Utilise darwinMessageDetails
    );

    // Effectuer l'initialisation du plugin en lui passant les handlers de clic.
    // onDidReceiveNotificationResponse g√®re les clics sur la notification quand l'app est au premier plan ou en arri√®re-plan.
    // onDidReceiveBackgroundNotificationResponse g√®re les clics quand l'app est termin√©e sur Android >= 13+.
    // Ces handlers sont d√©finis plus bas dans ce fichier (pour onDidReceiveNotificationResponse)
    // ou comme fonction top-level dans main.dart (pour onDidReceiveBackgroundNotificationResponse).
    try {
      // ‚úÖ Utilise le champ inject√© _flutterLocalNotificationsPlugin
      await _flutterLocalNotificationsPlugin.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse, // Passe la r√©f√©rence √† la m√©thode du service
        // onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse, // ‚úÖ MODIF (√âtape 6.1.1) : Passer la r√©f√©rence √† la fonction top-level de main.dart
        // NOTE : onDidReceiveBackgroundNotificationResponse DOIT rester une fonction top-level et √™tre enregistr√©e au NIVEAU NATIF.
        // La mani√®re correcte d'enregistrer le handler background pour Android >= 13 est au moment de initialize.
        // La fonction top-level onDidReceiveBackgroundNotificationResponse dans main.dart EST le handler background qui est appel√©.
        // L'initialisation ci-dessus via onDidReceiveBackgroundNotificationResponse (si d√©comment√©) est pour le handler de "clic" pour cet handler background.
        // La logique de navigation qui √©tait dans main.dart pour ce handler a d√©j√† √©t√© d√©compos√©e
        // et utilise getIt, ce qui est bon. Nous devons juste nous assurer que cette fonction top-level
        // est bien celle pass√©e ici.

        // La logique √©tait d√©j√† bien en place dans main.dart pour ces handlers.
        // L'√©tape 6.1.1 est principalement de d√©placer l'appel √† .initialize() et de s'assurer
        // que les handlers pass√©s ici (qui restent dans main.dart) peuvent acc√©der aux services via getIt.
        // Ce qui est d√©j√† le cas.

        // TODO: Clarifier o√π doit r√©sider onDidReceiveBackgroundNotificationResponse (id√©alement, un fichier top-level d√©di√©?) et comment y acc√©der depuis ici. (√âtape 6.1.1.3)
        // Pour l'instant, il r√©side dans main.dart et est accessible ici car main.dart est import√©.

        // L'enregistrement du handler de clic pour le background (Android >= 13+)
        // est un param√®tre de la m√©thode initialize.
        onDidReceiveBackgroundNotificationResponse: onDidReceiveBackgroundNotificationResponse, // Utilise la fonction top-level de main.dart
      );
      debugLog("üîî [FCM Service] flutter_local_notifications initialis√© et handlers enregistr√©s.", level: 'INFO');
    } catch (e) {
      debugLog("‚ùå [FCM Service] Erreur lors de l'initialisation de flutter_local_notifications : $e", level: 'ERROR');
      // TODO: G√©rer l'erreur (ex: r√©essayer, logguer dans Crashlytics, afficher un message) (√âtape 6.1.1.1)
    }
  }

// =============================================================
// üì≤ NOTIFICATIONS LOCALES ‚Äî Handlers de Clic
// =============================================================

  // ‚úÖ √âtape 6.1.1 : Handler de clic pour les notifications locales (App Ouverte/Background)
  // Cette logique est d√©plac√©e ici depuis la fonction main() dans main.dart (handler de initialize).
  // Elle est appel√©e par le plugin flutter_local_notifications quand l'utilisateur clique
  // sur une notification locale et que l'app est au premier plan ou en arri√®re-plan (pas termin√©e).
  // Le 'payload' contient les donn√©es pass√©es lors de l'affichage de la notification locale.
  Future<void> _onDidReceiveNotificationResponse(NotificationResponse notificationResponse) async {
    debugLog("üîî [FCM Service - NOTIF CLICK] Clic sur notification locale (ouverte/background). Payload: ${notificationResponse.payload}", level: 'INFO');

    final String? senderUid = notificationResponse.payload; // Le payload est l'UID de l'exp√©diteur

    if (senderUid != null && senderUid.isNotEmpty) {
      debugLog('‚û°Ô∏è [FCM Service - NOTIF CLICK] D√©clencher logique de navigation vers conversation avec $senderUid', level: 'INFO');

      // Ici, nous devons d√©clencher la navigation. Cette logique √©tait dans main().
      // Id√©alement, cette navigation devrait √™tre g√©r√©e par un NotificationRouter ou similaire.
      // Ce service (FcmService) devrait DEPENDRE du NavigationService ou NotificationRouter.
      // Pour l'instant, nous allons appeler directement le NotificationRouter existant.
      // NOTE : NotificationRouter.routeFromNotification a √©t√© cr√©√© pour √™tre appel√© depuis FCM onMessageOpenedApp.
      // Sa logique DOIT g√©rer la navigation en utilisant un Navigator Key GLOBAL (disponible via getIt).
      // Nous devons nous assurer que le Navigator Key est bien disponible via getIt ici.
      // NotificationRouter utilise d√©j√† getIt pour NavigatorKey.

      // TODO: Mettre √† jour NotificationRouter.routeFromNotification pour accepter potentiellement
      // un UID sender direct comme param√®tre, ou s'assurer que le payload est bien l'UID.
      // Pour l'instant, on appelle avec un Map comme s'il venait de FCM data payload.
      final Map<String, dynamic> payloadMap = {'senderId': senderUid}; // Recr√©e une map minimale pour NotificationRouter
      NotificationRouter.routeFromNotification(payloadMap);

    } else {
      debugLog('‚ö†Ô∏è [FCM Service - NOTIF CLICK] Payload senderId manquant ou invalide dans la r√©ponse de notification locale. Pas de navigation cibl√©e.', level: 'WARNING');
      // L'app continuera son flux normal.
    }
  } // <-- Fin de la m√©thode _onDidReceiveNotificationResponse


// =============================================================
// üì≤ NOTIFICATIONS LOCALES ‚Äî Affichage (via FCM onMessage)
// =============================================================
  // ‚úÖ Logique pour afficher une notification locale quand l'app est au premier plan (inchang√©)
  Future<void> showLocalNotification(RemoteMessage message) async {
    RemoteNotification? notification = message.notification;
    if (notification != null && notification.title != null && notification.body != null && message.data.isNotEmpty) {
      try {
        // Utilise le hash de l'ID message ou un timestamp comme ID de notif locale (doit √™tre un int).
        final int notificationId = message.messageId?.hashCode ?? DateTime.now().millisecondsSinceEpoch;
        final String notificationClickPayload = message.data['senderId'] ?? '';

        // ‚úÖ Utilise le champ inject√© _flutterLocalNotificationsPlugin
        // ‚úÖ Utilise messageNotificationDetails import√© depuis notification_config.dart
        await _flutterLocalNotificationsPlugin.show(
          notificationId,
          notification.title,
          notification.body,
          messageNotificationDetails, // Utilise la constante import√©e
          payload: notificationClickPayload,
        );
        debugLog("üîî [FCM Service] Notification locale affich√©e au premier plan (ID: $notificationId). Payload clic: $notificationClickPayload", level: 'INFO');
      } catch (e) {
        debugLog("‚ùå [FCM Service] Erreur lors de l'affichage de la notification locale au premier plan : $e", level: 'ERROR');
      }
    } else {
      debugLog("üñô [FCM Service] Message re√ßu au premier plan ne contient pas les donn√©es suffisantes pour l'affichage local de notification.", level: 'DEBUG');
    }
  }

  // ‚úÖ √âtape 6.1.1 : Handler de clic pour les notifications locales (App Termin√©e Android >= 13)
  // Cette fonction DOIT rester une fonction TOP-LEVEL en dehors de la classe FcmService
  // pour √™tre enregistr√©e par le plugin flutter_local_notifications au niveau natif.
  // Elle EST le point d'entr√©e appel√© par l'OS.
  // Le code r√©el se trouve dans la fonction top-level onDidReceiveBackgroundNotificationResponse dans main.dart (ou un fichier top-level d√©di√©).
  // Cette m√©thode dans la classe FcmService sert juste de *r√©f√©rence conceptuelle* pour dire
  // "l'initialisation du plugin dans initializeLocalNotifications() enregistre CE handler top-level ici".
  // Il n'y a pas de logique √† dupliquer dans la classe FcmService pour ce handler sp√©cifique.
  // Le code de navigation et d'acc√®s aux services doit √™tre dans la fonction top-level elle-m√™me (main.dart).
  // NOTE : Le code de main.dart pour ce handler utilise d√©j√† getIt et messageNotificationDetails.

  // ignore: unused_element // ‚úÖ AJOUT : Ignorer l'avertissement "unused_element" pour cette m√©thode
  void _onDidReceiveBackgroundNotificationResponseTopLevel(NotificationResponse notificationResponse) {
    // Ce corps de m√©thode est vide car la logique est dans la fonction top-level r√©elle.
    // Cette m√©thode n'est qu'une r√©f√©rence interne dans le service.
    // debugLog('üîî [FCM Service - NOTIF CLICK BG REF] Handler top-level appel√© (r√©f√©rence interne).', level: 'DEBUG');
  }
} // <-- Fin de la classe FcmService

// üìÑ FIN de lib/services/fcm_service.dart
