// -------------------------------------------------------------
// üìÑ FICHIER : lib/services/fcm_service.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ G√®re la r√©cup√©ration du token FCM de l'appareil et son stockage via Firestore.
// ‚úÖ √âcoute les changements de token FCM et met √† jour Firestore.
// ‚úÖ G√®re les messages FCM re√ßus quand l'application est au premier plan et affiche une notification locale.
// ‚úÖ G√®re le clic sur les notifications quand l'application est ouverte par le clic (via onMessageOpenedApp).
// ‚úÖ D√©l√®gue la logique de navigation post-notification √† NotificationRouter.
// ‚úÖ Re√ßoit l'instance de FlutterLocalNotificationsPlugin via injection de d√©pendances.
// ‚úÖ Utilise la configuration de notification centralis√©e (notification_config.dart).
// ‚úÖ G√®re la nullit√© potentielle de message.messageId pour g√©n√©rer l'ID local de notification.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V008 - Utilisation de notification_config.dart pour la configuration des notifications locales (messageNotificationDetails). Ajout gestion null message.messageId pour ID local. - 2025/06/13 20h55
// V007 - Injection de FlutterLocalNotificationsPlugin via constructeur et utilisation du champ inject√©. - 2025/06/13 20h53
// V006 - Suppression de la m√©thode obsol√®te handleNotificationClick + nettoyage imports. - 2025/06/10 16h52
// V005 - Utilise CurrentUserService pour les param√®tres isReceiver et deviceLang dans handleNotificationClick. - 2025/06/04
// V004 - Correction de l'acc√®s aux getters statiques onMessage et onMessageOpenedApp. - 2025/06/02
// V003 - Ajout d'un point d'entr√©e pour la navigation. - 2025/06/02
// V002 - Ajout des listeners pour les messages FCM re√ßus. - 2025/06/02
// V001 - Cr√©ation du service FCM pour la gestion du token. - 2025/06/02
// -------------------------------------------------------------

// =============================================================
// üß© IMPORTS & DEPENDANCES
// =============================================================
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:jelamvp01/utils/debug_log.dart';
// import 'package:jelamvp01/main.dart'; // Import de main.dart non n√©cessaire ici pour la configuration des notifications
import 'package:jelamvp01/navigation/notification_router.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // Import n√©cessaire pour le type inject√©
import 'notification_config.dart'; // ‚úÖ MODIF : Import de la configuration centralis√©e
import 'dart:async'; // Import n√©cessaire pour DateTime

// =============================================================
// üîê TOKEN ‚Äî R√©cup√©ration et mise √† jour
// =============================================================
class FcmService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  // ‚úÖ MODIF : Champ pour l'instance inject√©e de FlutterLocalNotificationsPlugin
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin;

  // ‚úÖ MODIF : Constructeur qui accepte le plugin en param√®tre
  FcmService(this._flutterLocalNotificationsPlugin);

  Future<void> updateTokenForCurrentUser() async {
    User? currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      debugLog('üë§ [FCM Service] Utilisateur non connect√©. Impossible de mettre √† jour le token FCM.', level: 'WARNING');
      return;
    }
    final String uid = currentUser.uid;
    try {
      String? token = await FirebaseMessaging.instance.getToken();
      if (token == null) {
        debugLog('‚ùå [FCM Service] Impossible d\'obtenir le token FCM.', level: 'ERROR');
        return;
      }
      debugLog('ü™™ [FCM Service] Token FCM obtenu : $token', level: 'DEBUG');
      DocumentReference userRef = _firestore.collection('users').doc(uid);
      await userRef.set({'fcmToken': token}, SetOptions(merge: true));
      debugLog('‚úÖ [FCM Service] Token FCM mis √† jour dans Firestore pour l\'UID $uid.', level: 'INFO');
      FirebaseMessaging.instance.onTokenRefresh.listen((newToken) async {
        debugLog('üîÑ [FCM Service] Token FCM actualis√©. Nouveau token : $newToken', level: 'INFO');
        await userRef.set({'fcmToken': newToken}, SetOptions(merge: true));
        debugLog('‚úÖ [FCM Service] Nouveau token FCM actualis√© dans Firestore pour l\'UID $uid.', level: 'INFO');
      }).onError((error) {
        debugLog('‚ùå [FCM Service] Erreur lors de l\'√©coute des mises √† jour du token FCM: $error', level: 'ERROR');
      });
    } catch (e) {
      debugLog('‚ùå [FCM Service] Erreur lors de la mise √† jour du token FCM: $e', level: 'ERROR');
    }
  }

  // =============================================================
  // üîî FCM ‚Äî Initialisation des Handlers de Message
  // =============================================================
  void initializeFcmHandlers() {
    updateTokenForCurrentUser();

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      debugLog('üîî [FCM Service - FOREGROUND] Message re√ßu: ${message.messageId}', level: 'INFO');
      debugLog('üîî [FCM Service - FOREGROUND] Notification: ${message.notification?.title} / ${message.notification?.body}', level: 'DEBUG');
      debugLog('üîî [FCM Service - FOREGROUND] Data: ${message.data}', level: 'DEBUG');
      showLocalNotification(message);
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      debugLog('üîî [FCM Service - CLICK OPEN] App ouverte par clic notif: ${message.messageId}', level: 'INFO');
      debugLog('üîî [FCM Service - CLICK OPEN] Data: ${message.data}', level: 'DEBUG');
      NotificationRouter.routeFromNotification(message.data);
    });

    debugLog('üöÄ [FCM Service] Handlers FCM initialis√©s (token update et listeners activ√©s).', level: 'INFO');
  }

  // =============================================================
  // üì≤ NOTIFICATIONS LOCALES ‚Äî Affichage au premier plan
  // =============================================================
  Future<void> showLocalNotification(RemoteMessage message) async {
    RemoteNotification? notification = message.notification;
    if (notification != null && notification.title != null && notification.body != null && message.data.isNotEmpty) {
      try {
        // ‚úÖ MODIF : Ajout gestion null message.messageId avec fallback sur timestamp
        final int notificationId = message.messageId?.hashCode ?? DateTime.now().millisecondsSinceEpoch;
        final String notificationClickPayload = message.data['senderId'] ?? '';

        // ‚úÖ MODIF : Utilise le champ inject√© _flutterLocalNotificationsPlugin
        // ‚úÖ Utilise messageNotificationDetails import√© depuis notification_config.dart
        await _flutterLocalNotificationsPlugin.show(
          notificationId,
          notification.title,
          notification.body,
          messageNotificationDetails, // Utilise la nouvelle constante import√©e
          payload: notificationClickPayload,
        );
        debugLog("üîî [FCM Service] Notification locale affich√©e au premier plan (ID: $notificationId). Payload clic: $notificationClickPayload", level: 'INFO');
      } catch (e) {
        debugLog("‚ùå [FCM Service] Erreur lors de l'affichage de la notification locale au premier plan : $e", level: 'ERROR');
      }
    } else {
      debugLog("üñô [FCM Service] Message re√ßu au premier plan ne contient pas les donn√©es suffisantes pour l'affichage local de notification.", level: 'DEBUG');
    }
  }

} // <-- Fin de la classe FcmService

// üìÑ FIN de lib/services/fcm_service.dart
