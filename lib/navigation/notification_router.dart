// -------------------------------------------------------------
// üìÑ FICHIER : lib/navigation/notification_router.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Centralise la navigation suite √† un clic sur une notification FCM ou locale (sauf handler background Android 13+).
// ‚úÖ Re√ßoit le data payload de la notification (doit contenir 'senderId').
// ‚úÖ Charge les informations n√©cessaires (utilisateur actuel, destinataire) via Firestore et PairingService.
// ‚úÖ Redirige vers l'√©cran de chat (RecipientDetailsScreen) si les donn√©es sont valides.
// ‚úÖ Utilise le NavigatorKey global via GetIt pour la navigation.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V002 - Impl√©mentation de la logique de chargement des donn√©es utilisateur/destinataire et navigation vers RecipientDetailsScreen √† partir du data payload. Correction de l'√©cran de destination et des param√®tres requis. Nettoyage des imports inutilis√©s. - 2025/06/16 21h15
// V001 - Cr√©ation initiale du routeur de notifications pour centraliser la logique post-clic. - 2025/06/10 16h30
// -------------------------------------------------------------

import 'package:flutter/material.dart';
import 'dart:ui'; // Pour lire la langue du device (fallback)
// ‚õîÔ∏è √Ä supprimer - Import de main.dart n√©cessaire uniquement pour la r√©f√©rence √† navigatorKey, qui est maintenant acc√©d√© via getIt. - 2025/06/16 19h45
// import 'package:jelamvp01/main.dart'; // Access to navigatorKey (ancienne m√©thode)
import 'package:jelamvp01/utils/debug_log.dart'; // Pour les logs
import 'package:jelamvp01/screens/recipient_details_screen.dart'; // Le bon √©cran de destination
import 'package:firebase_auth/firebase_auth.dart'; // Pour obtenir l'utilisateur actuel
import 'package:cloud_firestore/cloud_firestore.dart'; // Pour lire isReceiver
import 'package:jelamvp01/models/recipient.dart'; // Pour le type Recipient
import 'package:jelamvp01/services/pairing_service.dart'; // Pour charger les d√©tails du destinataire
import 'package:jelamvp01/utils/service_locator.dart'; // Pour getIt (contient navigatorKey et PairingService)

// ‚õîÔ∏è √Ä supprimer - Import de LoveScreen plus utilis√© - 2025/06/16 19h45
// import 'package:jelamvp01/screens/love_screen.dart';

// --- FIN   DU BLOC Imports --- // (Ajout d'un commentaire de fin de bloc pour clart√©)

class NotificationRouter {
  // Cette m√©thode est appel√©e par FcmService (pour les messages foreground/opened/initial).
  // Elle re√ßoit les donn√©es de la notification (qui devraient contenir au moins 'senderId').
  static Future<void> routeFromNotification(Map<String, dynamic> data) async { // Rendre async est correct

    final String? senderUid = data['senderId']; // Extraire le senderId de la map data

    if (senderUid == null || senderUid.isEmpty) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Donn√©es de navigation manquantes ou invalides (senderId).', level: 'WARNING');
      // Naviguer vers l'√©cran principal si l'UID de l'exp√©diteur est manquant
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/'); // Navigation par d√©faut
      return; // Sortie pr√©coce
    }

    final User? currentUser = FirebaseAuth.instance.currentUser;

    if (currentUser == null) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Utilisateur non connect√©. Impossible de naviguer post-notification.', level: 'WARNING');
      // L'app devrait afficher l'√©cran de connexion via le StreamBuilder dans main().
      return; // Sortie pr√©coce
    }

    if (currentUser.uid == senderUid) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Clic sur notification de soi-m√™me ($senderUid). Pas de navigation cibl√©e.', level: 'INFO');
      // Optionnel : naviguer vers l'√©cran principal si tu veux
      // getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/');
      return; // Sortie pr√©coce
    }

    debugLog('‚û°Ô∏è [NotificationRouter] Tentative de navigation vers conversation avec $senderUid...', level: 'INFO');

    // Charger les donn√©es n√©cessaires pour RecipientDetailsScreen
    // Utilise la m√™me logique que celle qui √©tait dans les handlers de main.dart
    String currentUserDeviceLang = PlatformDispatcher.instance.locale.languageCode; // Langue du device comme fallback
    bool currentUserIsReceiver = false; // Valeur par d√©faut

    try {
      final userDoc = await FirebaseFirestore.instance.collection('users').doc(currentUser.uid).get();
      if (userDoc.exists) {
        final userData = userDoc.data();
        currentUserIsReceiver = userData?['isReceiver'] == true;
        // La langue pourrait aussi √™tre lue ici si stock√©e dans Firestore
        // currentUserDeviceLang = userData?['deviceLang'] ?? currentUserDeviceLang;
        debugLog("‚úÖ [NotificationRouter] Donn√©es utilisateur (isReceiver) charg√©es depuis Firestore.", level: 'INFO');
      } else {
        debugLog("‚ö†Ô∏è [NotificationRouter] Document utilisateur actuel (${currentUser.uid}) non trouv√© pour charger isReceiver.", level: 'WARNING');
      }
    } catch (e) {
      debugLog("‚ùå [NotificationRouter] Erreur lors du chargement des donn√©es utilisateur : $e", level: 'ERROR');
      // Continuer avec les valeurs par d√©faut ou g√©rer l'erreur
    }

    Recipient? recipientDetails; // Initialise √† null

    try {
      // Utilise le service PairingService pour charger les d√©tails du destinataire
      recipientDetails = await getIt<PairingService>().getRecipientData(currentUser.uid, senderUid);
      debugLog("‚úÖ [NotificationRouter] D√©tails destinataire ($senderUid) charg√©s via PairingService.", level: 'INFO');
    } catch (e) {
      debugLog("‚ùå [NotificationRouter] Erreur lors du chargement des d√©tails du destinataire ($senderUid) via PairingService : $e", level: 'ERROR');
      recipientDetails = null; // S'assurer que recipientDetails est null en cas d'erreur
      // TODO: G√©rer l'erreur (afficher un message √† l'utilisateur, naviguer vers l'√©cran principal?) (√âtape 6.3.1)
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/'); // Exemple de navigation d'erreur
      return; // Sortie pr√©coce si le destinataire ne peut pas √™tre charg√©
    }


    // Naviguer si les details du destinataire sont trouv√©s.
    if (recipientDetails != null) {
      // Utilise le navigatorKey global via getIt pour naviguer.
      // Utiliser Future.delayed(Duration.zero) est une bonne pratique pour s'assurer
      // que la navigation est pouss√©e apr√®s que l'UI initiale soit construite,
      // surtout si l'app vient d'√™tre lanc√©e.
      Future.delayed(Duration.zero, () {
        getIt<GlobalKey<NavigatorState>>().currentState?.push(MaterialPageRoute(
          builder: (context) => RecipientDetailsScreen(
            deviceLang: currentUserDeviceLang, // Langue - lue depuis Firestore ou PlatformDispatcher
            recipient: recipientDetails!, // Objet Recipient charg√©
            isReceiver: currentUserIsReceiver, // R√¥le de l'utilisateur actuel - lue depuis Firestore
          ),
        ));
        debugLog("‚û°Ô∏è [NotificationRouter] Navigation vers RecipientDetailsScreen r√©ussie pour UID destinataire $senderUid", level: 'INFO');
      });

    } else {
      // Ce cas ne devrait normalement pas arriver si PairingService.getRecipientData a d√©j√† g√©r√© l'erreur,
      // mais c'est une v√©rification suppl√©mentaire.
      debugLog("‚ö†Ô∏è [NotificationRouter] Navigation vers RecipientDetailsScreen annul√©e car d√©tails destinataire non charg√©s ou introuvables.", level: 'WARNING');
      // Optionnel : naviguer vers l'√©cran principal si les d√©tails du destinataire ne sont pas trouv√©s
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/'); // Navigation par d√©faut en cas d'√©chec de chargement
    }
  }
} // <-- Fin de la classe NotificationRouter

// üìÑ FIN de lib/navigation/notification_router.dart
