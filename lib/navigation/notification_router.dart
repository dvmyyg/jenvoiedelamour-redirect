// -------------------------------------------------------------
// üìÑ FICHIER : lib/navigation/notification_router.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Centralise la navigation suite √† un clic sur une notification FCM ou locale.
// ‚úÖ Re√ßoit le data payload de la notification (doit contenir 'senderId').
// ‚úÖ Charge les informations n√©cessaires (utilisateur actuel via CurrentUserService, destinataire via PairingService).
// ‚úÖ Redirige vers l'√©cran de chat (RecipientDetailsScreen) si les donn√©es sont valides.
// ‚úÖ Utilise le NavigatorKey global via GetIt pour la navigation.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V005 - Rendu la m√©thode routeFromNotification autonome pour l'initialisation de GetIt/services. - 2025/06/21 10h40
// V004 - Suppression des blocs de code marqu√©s ‚õîÔ∏è √Ä supprimer. - 2025/06/20 03h44
// V003 - Refactor de routeFromNotification pour utiliser CurrentUserService afin d'obtenir les donn√©es de l'utilisateur actuel. - 2025/06/18 13h48
// V002 - Impl√©mentation de la logique de chargement des donn√©es utilisateur/destinataire et navigation vers RecipientDetailsScreen √† partir du data payload. Correction de l'√©cran de destination et des param√®tres requis. Nettoyage des imports inutilis√©s. - 2025/06/16 21h15
// V001 - Cr√©ation initiale du routeur de notifications pour centraliser la logique post-clic. - 2025/06/10 16h30
// -------------------------------------------------------------

import 'package:flutter/material.dart';
import 'dart:ui'; // Pour lire la langue du device (fallback)
import 'package:jelamvp01/utils/debug_log.dart'; // Pour les logs
import 'package:jelamvp01/screens/recipient_details_screen.dart'; // Le bon √©cran de destination
import 'package:firebase_auth/firebase_auth.dart'; // Pour obtenir l'utilisateur actuel (UID)
import 'package:jelamvp01/models/recipient.dart'; // Pour le type Recipient
import 'package:jelamvp01/models/user_profile.dart'; // ‚úÖ AJOUT V004 (Correction Import) : Import du mod√®le UserProfile
import 'package:jelamvp01/services/pairing_service.dart'; // Pour charger les d√©tails du destinataire
import 'package:jelamvp01/utils/service_locator.dart'; // Pour getIt (contient navigatorKey, PairingService et CurrentUserService)
import 'package:jelamvp01/services/current_user_service.dart'; // ‚úÖ AJOUT V003 : Import de CurrentUserService

// --- FIN   DU BLOC Imports ---

class NotificationRouter {
  // Cette m√©thode est appel√©e par FcmService (pour les messages foreground/opened/initial)
  // ou par onDidReceiveBackgroundNotificationResponse (pour les clics sur notifications locales).
  // Elle re√ßoit le data payload de la notification (doit contenir 'senderId').
  static Future<void> routeFromNotification(Map<String, dynamic> data) async {
    debugLog("üîî [NotificationRouter] Tentative de routage depuis notification. Data: $data", level: 'INFO');

    // --- √âTAPE CRITIQUE : Assurer l'initialisation de GetIt et des services ---
    // Cette fonction peut √™tre appel√©e quand l'app est lanc√©e depuis un √©tat 'terminated'
    // par un clic sur notification, AVANT que main() n'ait eu l'occasion de configurer GetIt.
    try {
      if (!getIt.isRegistered<CurrentUserService>()) { // V√©rifie si un service cl√© est enregistr√© pour juger si GetIt est "pr√™t"
        debugLog("üñô [NotificationRouter] GetIt non configur√© ou services non enregistr√©s. Appel de setupLocator().", level: 'INFO');
        setupLocator();
        // Force l'initialisation de CurrentUserService si c'est un LazySingleton et que c'est la premi√®re fois
        getIt<CurrentUserService>(); // Ceci d√©clenchera l'initialisation de CurrentUserService (et ses d√©pendances comme FirestoreService)
        debugLog("üñô [NotificationRouter] GetIt et services essentiels configur√©s et initialis√©s.", level: 'INFO');
      } else {
        debugLog("üñô [NotificationRouter] GetIt et services essentiels d√©j√† initialis√©s.", level: 'DEBUG');
      }
    } catch (e) {
      debugLog("‚ùå [NotificationRouter] Erreur critique lors de l'initialisation de GetIt/Services : $e", level: 'ERROR');
      // Si GetIt/Services ne s'initialisent pas, la navigation ne peut pas fonctionner.
      // On tente de naviguer vers l'√©cran principal comme fallback.
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/');
      return; // Sortie pr√©coce
    }

    final String? senderUid = data['senderId'];

    if (senderUid == null || senderUid.isEmpty) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Donn√©es de navigation manquantes ou invalides (senderId).', level: 'WARNING');
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/');
      return;
    }

    // Utilise FirebaseAuth pour v√©rifier si un utilisateur est connect√©.
    // FirebaseAuth.instance.currentUser est robuste m√™me si l'app vient d'√™tre lanc√©e depuis l'√©tat termin√©.
    final User? currentUser = FirebaseAuth.instance.currentUser;

    if (currentUser == null) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Utilisateur non connect√©. Impossible de naviguer post-notification.', level: 'WARNING');
      // L'app devrait afficher l'√©cran de connexion via le StreamBuilder dans main().
      return; // Sortie pr√©coce
    }

    if (currentUser.uid == senderUid) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Clic sur notification de soi-m√™me ($senderUid). Pas de navigation cibl√©e.', level: 'INFO');
      return; // Sortie pr√©coce
    }

    // Obtenir les donn√©es de l'utilisateur actuel depuis CurrentUserService.
    // CurrentUserService est maintenant garanti d'√™tre initialis√© gr√¢ce au bloc try/catch initial.
    final CurrentUserService currentUserService = getIt<CurrentUserService>();
    final UserProfile? currentUserProfile = currentUserService.userProfile;

    if (currentUserProfile == null) {
      debugLog('‚ö†Ô∏è [NotificationRouter] Profil utilisateur actuel non charg√© dans CurrentUserService. Impossible de naviguer post-notification.', level: 'WARNING');
      // Le profil utilisateur devrait √™tre charg√© par CurrentUserService au moment o√π l'utilisateur est connect√©.
      // Si CurrentUserService n'a pas encore charg√© le profil, il y a potentiellement un probl√®me d'initialisation
      // ou de synchronisation.
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/'); // Navigation par d√©faut
      // TODO: G√©rer ce cas d'erreur plus finement (ex: attendre le chargement du profil, afficher un message) (√âtape 6.3.2)
      return; // Sortie pr√©coce si le profil utilisateur n'est pas disponible
    }

    debugLog('‚û°Ô∏è [NotificationRouter] Tentative de navigation vers conversation avec $senderUid...', level: 'INFO');

    // Charger les donn√©es n√©cessaires pour RecipientDetailsScreen
    final String currentUserDeviceLang = currentUserProfile.deviceLang; // Utilise la langue du profil
    final bool currentUserIsReceiver = currentUserProfile.isReceiver; // Utilise le r√¥le du profil

    Recipient? recipientDetails; // Initialise √† null

    try {
      // Utilise le service PairingService pour charger les d√©tails du destinataire.
      // PairingService est maintenant garanti d'√™tre initialis√© gr√¢ce au bloc try/catch initial.
      recipientDetails = await getIt<PairingService>().getRecipientData(currentUser.uid, senderUid);
      debugLog("‚úÖ [NotificationRouter] D√©tails destinataire ($senderUid) charg√©s via PairingService (qui utilise RecipientService).", level: 'INFO');
    } catch (e) {
      debugLog("‚ùå [NotificationRouter] Erreur lors du chargement des d√©tails du destinataire ($senderUid) via PairingService : $e", level: 'ERROR');
      recipientDetails = null; // S'assurer que recipientDetails est null en cas d'erreur
      // TODO: G√©rer l'erreur (afficher un message √† l'utilisateur, naviguer vers l'√©cran principal?) (√âtape 6.3.1)
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/'); // Exemple de navigation d'erreur
      return; // Sortie pr√©coce si le destinataire ne peut pas √™tre charg√©
    }

    // Naviguer si les details du destinataire sont trouv√©s.
    if (recipientDetails != null) {
      // Utilise le navigatorKey global via getIt pour naviguer.
      // Utiliser Future.delayed(Duration.zero) est une bonne pratique pour s'assurer
      // que la navigation est pouss√©e apr√®s que l'UI initiale soit construite,
      // surtout si l'app vient d'√™tre lanc√©e.
      Future.delayed(Duration.zero, () {
        getIt<GlobalKey<NavigatorState>>().currentState?.push(MaterialPageRoute(
          builder: (context) => RecipientDetailsScreen(
            deviceLang: currentUserDeviceLang, // Langue - lue depuis CurrentUserService
            recipient: recipientDetails!, // Objet Recipient charg√©
            isReceiver: currentUserIsReceiver, // R√¥le de l'utilisateur actuel - lue depuis CurrentUserService
          ),
        ));
        debugLog("‚û°Ô∏è [NotificationRouter] Navigation vers RecipientDetailsScreen r√©ussie pour UID destinataire $senderUid", level: 'INFO');
      });

    } else {
      // Ce cas ne devrait normalement pas arriver si PairingService.getRecipientData a d√©j√† g√©r√© l'erreur,
      // mais c'est une v√©rification suppl√©mentaire.
      debugLog("‚ö†Ô∏è [NotificationRouter] Navigation vers RecipientDetailsScreen annul√©e car d√©tails destinataire non charg√©s ou introuvables.", level: 'WARNING');
      getIt<GlobalKey<NavigatorState>>().currentState?.pushReplacementNamed('/'); // Navigation par d√©faut en cas d'√©chec de chargement
    }
  }
} // <-- Fin de la classe NotificationRouter

// üìÑ FIN de lib/navigation/notification_router.dart
