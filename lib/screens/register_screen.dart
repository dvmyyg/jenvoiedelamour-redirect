// -------------------------------------------------------------
// üìÑ FICHIER : lib/screens/register_screen.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Permet aux nouveaux utilisateurs de cr√©er un compte avec email et mot de passe via Firebase Auth.
// ‚úÖ G√®re la saisie du pr√©nom, de l'email et du mot de passe.
// ‚úÖ Valide les donn√©es du formulaire.
// ‚úÖ Sauvegarde le pr√©nom et l'email dans la collection 'users' sous l'UID du nouvel utilisateur via FirestoreService.
// ‚úÖ Envoie un email de v√©rification au nouvel utilisateur.
// ‚úÖ S'appuie sur le flux d'authentification centralis√© (main.dart) pour la navigation post-inscription.
// ‚úÖ Affiche des indicateurs de chargement et des messages d'erreur.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V005 - Correction de l'appel √† saveUserProfile pour utiliser l'instance de FirestoreService. - 2025/05/30
// V004 - Am√©lioration de la gestion d'erreurs Firebase Auth. Utilisation coh√©rente de debugLog. Ajout de TODOs pour i18n. Ajout de commentaires sur l'int√©gration potentielle avec AuthService. - 2025/05/30
// V003 - Refactoring : Suppression du param√®tre deviceId. L'√©cran s'appuie sur FirebaseAuth pour l'inscription. Suppression de l'√©criture obsol√®te dans devices/{deviceId} apr√®s inscription. S'appuie sur main.dart pour la navigation apr√®s changement d'√©tat d'auth (vers EmailVerificationScreen). Utilisation potentielle de AuthService (si impl√©ment√©/pr√©f√©r√©) pour la logique d'inscription. - 2025/05/29
// V002 - ajout de la sauvegarde du pr√©nom dans Firestore et Firebase Auth + champ pr√©nom - 2025/05/25 21h30 (Historique h√©rit√©)
// V001 - version initiale - 2025/05/22 (Historique h√©rit√©)
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/30 // Mise √† jour de la date au 30/05

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Essentiel pour l'inscription
import '../services/firestore_service.dart'; // Import du FirestoreService
// L'import de cloud_firestore n'est plus n√©cessaire ici car on utilise firestore_service pour saveUserProfile.
// import 'package:cloud_firestore/cloud_firestore.dart'; // <-- SUPPRIM√â
import '../services/i18n_service.dart'; // Pour les traductions UI
import '../utils/debug_log.dart'; // Votre utilitaire de log
// EmailVerificationScreen n'est pas import√© si on ne navigue pas directement vers lui.
// import '../screens/email_verification_screen.dart'; // <-- SUPPRIM√â
// L'import de firestore_service est d√©j√† fait au-dessus.
// import '../services/firestore_service.dart'; // <-- Redondant, supprim√©

// Optionnel : Importer AuthService si vous pr√©f√©rez centraliser la logique d'inscription l√†-bas.
// import '../services/auth_service.dart'; // <-- Optionnel

class RegisterScreen extends StatefulWidget {
  // Le deviceId n'est plus requis ici. L'√©cran g√®re l'inscription via Firebase Auth.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste pertinente

  const RegisterScreen({
    super.key,
    required this.deviceLang,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
  });

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController(); // Champ pr√©nom

  // Ajoutez cette ligne pour cr√©er une instance de FirestoreService
  final FirestoreService _firestoreService = FirestoreService(); // Initialise le service Firestore


  bool _isLoading = false; // Indicateur de chargement
  String? _errorMessage; // Pour afficher les erreurs

  @override
  void dispose() {
    debugLog("üö™ RegisterScreen dispose. Lib√©ration des contr√¥leurs.", level: 'INFO');
    // Lib√®re les contr√¥leurs lorsqu'ils ne sont plus n√©cessaires.
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    super.dispose();
  }

  // G√®re le processus d'inscription utilisateur
  Future<void> _register() async {
    // Valider le formulaire
    if (!_formKey.currentState!.validate()) {
      debugLog("‚ö†Ô∏è [register] Formulaire invalide. Inscription annul√©e.", level: 'WARN');
      // Optionnel: Afficher un message g√©n√©rique si validation √©choue
      // setState(() => _errorMessage = getUILabel('form_validation_error', widget.deviceLang)); // TODO: Add key
      return;
    }

    setState(() {
      _isLoading = true; // Active l'indicateur de chargement
      _errorMessage = null; // R√©initialise l'erreur pr√©c√©dente
    });

    final email = _emailController.text.trim();
    final password = _passwordController.text; // Ne pas trimmer le mot de passe
    final displayName = _nameController.text.trim(); // Pr√©nom

    debugLog("üîÑ [register] Tentative d'inscription pour email : $email", level: 'INFO');

    try {
      // --- Inscription Firebase Auth ---
      // Optionnel : Utiliser AuthService().register(email, password) ici si vous centralisez dans AuthService
      final credential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);

      // V√©rifie si la cr√©ation a vraiment retourn√© un utilisateur
      final user = credential.user;
      if (user == null) {
        // Ce cas ne devrait pas arriver avec une cr√©ation r√©ussie de Firebase Auth
        debugLog("‚ùå [register] Erreur interne: Utilisateur null apr√®s createUserWithEmailAndPassword.", level: 'ERROR');
        // Lancer une erreur pour qu'elle soit g√©r√©e par le catch g√©n√©rique
        throw Exception("Internal error: User object is null after registration.");
      }
      final uid = user.uid; // UID du nouvel utilisateur

      debugLog("‚úÖ [register] Compte Firebase Auth cr√©√© pour ${user.email} (UID: $uid)", level: 'SUCCESS');

      // **Suppression de l'√©criture obsol√®te dans devices/{deviceId}**
      // Cette √©criture associait des infos utilisateur √† l'ancien deviceId. Elle est obsol√®te et a √©t√© retir√©e.
      /*
      await FirebaseFirestore.instance.collection('devices').doc(widget.deviceId).set({ ... });
      */ // <-- Logique obsol√®te retir√©e

      // --- Sauvegarde du profil dans Firestore (users/{uid}) ---
      // Utilise firestore_service.dart pour sauvegarder les donn√©es utilisateur.
      // Appelle saveUserProfile VIA L'INSTANCE DE FirestoreService.
      await _firestoreService.saveUserProfile( // <-- CORRIG√â ICI !
        uid: uid, // UID du nouvel utilisateur
        email: email, // Email de l'utilisateur
        firstName: displayName, // Pr√©nom
      );
      debugLog("üíæ [register] Profil utilisateur sauvegard√© dans Firestore (users/$uid)", level: 'INFO');
      // --- Mise √† jour du displayName dans le profil Firebase Auth (Optionnel mais bonne pratique) ---
      // Permet d'afficher le nom dans la console Firebase ou d'autres services Auth.
      await user.updateDisplayName(displayName);
      debugLog("‚úÖ [register] updateDisplayName Firebase Auth r√©ussi", level: 'INFO');


      // --- Envoi de l'email de v√©rification ---
      // L'utilisateur cr√©√© aura user.emailVerified = false initialement.
      // Cet email contient un lien que l'utilisateur doit cliquer.
      await user.sendEmailVerification();
      debugLog("üì© [register] Email de v√©rification envoy√© √† ${user.email}", level: 'INFO');


      // --- Navigation post-inscription ---
      // L'inscription a r√©ussi et l'email de v√©rification a √©t√© envoy√©.
      // **IMPORTANT :** Ne pas naviguer directement ici vers EmailVerificationScreen !
      // main.dart (qui √©coute authStateChanges()) d√©tectera que user est non-null
      // et que user.emailVerified est false, et naviguera automatiquement
      // vers EmailVerificationScreen au prochain rebuild de MyApp.
      // Cela centralise la logique de flux post-authentification.

      // Afficher un message de succ√®s temporaire (optionnel) avant que la navigation automatique ait lieu.
      if (mounted) { // V√©rifie si le widget est mont√©
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(getUILabel('register_success_check_email', widget.deviceLang))), // TODO: Add success message key
        );
        // Ne pas naviguer ici. La navigation est g√©r√©e par main.dart.
        // Navigator.pop(context); // Optionnel: Revenir √† l'√©cran pr√©c√©dent si la navigation auto ne suffit pas
      }
      debugLog("‚úÖ [register] Processus d'inscription termin√©. Attente de la navigation automatique via main.dart.", level: 'INFO');


    } on FirebaseAuthException catch (e) {
      // --- G√©rer les erreurs sp√©cifiques de Firebase Auth lors de l'inscription ---
      debugLog("‚ùå [register] Erreur Firebase Auth lors de la cr√©ation compte : ${e.code} - ${e.message}", level: 'ERROR');
      String errorMessage = getUILabel('register_error_generic', widget.deviceLang); // Message g√©n√©rique par d√©faut

      // TODO: Affiner le message d'erreur bas√© sur e.code pour une meilleure exp√©rience utilisateur
      switch (e.code) {
        case 'email-already-in-use':
          errorMessage = getUILabel('register_error_email_in_use', widget.deviceLang); // TODO: Add key: "Cet email est d√©j√† utilis√©."
          break;
        case 'weak-password':
          errorMessage = getUILabel('register_error_weak_password', widget.deviceLang); // TODO: Add key: "Mot de passe trop faible. Il doit contenir au moins 6 caract√®res."
          break;
        case 'invalid-email':
          errorMessage = getUILabel('register_error_invalid_email', widget.deviceLang); // TODO: Add key: "L'adresse email n'est pas valide."
          break;
      // ... g√©rer d'autres codes d'erreur pertinents si n√©cessaire ...
        default:
        // Utilise le message d'erreur Firebase par d√©faut si on n'a pas de traduction sp√©cifique
          errorMessage = "${getUILabel('register_error_firebase', widget.deviceLang)}: ${e.message}"; // TODO: Add key: "Erreur Firebase"
          break;
      }

      setState(() => _errorMessage = errorMessage); // Affiche le message d'erreur √† l'utilisateur
    } catch (e) {
      // --- G√©rer les autres types d'erreurs inattendues ---
      debugLog("‚ùå [register] Erreur inattendue lors de la cr√©ation compte (autre erreur) : $e", level: 'ERROR');
      // Afficher un message d'erreur g√©n√©rique pour les erreurs non Firebase Auth
      setState(() => _errorMessage = getUILabel('register_error_unexpected', widget.deviceLang)); // TODO: Add key: "Une erreur inattendue est survenue."
    } finally {
      // S'ex√©cute apr√®s try/catch, que l'inscription ait r√©ussi ou √©chou√©
      if (mounted) { // Assurez-vous que le widget est toujours mont√© avant de mettre √† jour l'√©tat
        setState(() => _isLoading = false); // D√©sactive l'indicateur de chargement
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final lang = widget.deviceLang;

    // L'UI reste globalement la m√™me pour les champs et les boutons.
// La logique du bouton appelle la m√©thode _register refactoris√©e.
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        title: Text(getUILabel('register_title', lang)), // Utilise i18n_service
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Form(
          key: _formKey,
          child: ListView( // Utilise ListView pour permettre
            shrinkWrap: true, // Permet au ListView de ne prendre que l'espace n√©cessaire
            // Si le formulaire devient tr√®s long, ajouter physics: AlwaysScrollableScrollPhysics() ou similaire
            children: [
              // Champ Pr√©nom
    TextFormField(
    controller: _nameController,
    style: const TextStyle(color: Colors.white),
    decoration: InputDecoration(
    labelText: getUILabel('profile_firstname_label', lang), // Utilise i18n_service
    labelStyle: const TextStyle(color: Colors.white),
    enabledBorder: const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.white24),
    ),
    focusedBorder: const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.pink),
    ),
    ),
    validator: (value) =>
    value == null || value.trim().isEmpty ? getUILabel('required_field', lang) : null, // Utilise i18n_service
    ),
    const SizedBox(height: 16),
    // Champ Email
    TextFormField(
    controller: _emailController,
    keyboardType: TextInputType.emailAddress, // Clavier adapt√© pour email
    style: const TextStyle(color: Colors.white),
    decoration: InputDecoration(
    labelText: getUILabel('email_label', lang), // Utilise i18n_service
    labelStyle: const TextStyle(color: Colors.white),
    enabledBorder: const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.white24),
    ),
    focusedBorder: const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.pink),
    ),
    ),
    // Validation basique de l'email (pr√©sence de '@', non vide apr√®s trim)
    validator: (value) {
    if (value == null || value.trim().isEmpty) {
    return getUILabel('required_field', lang); // Champ requis
    }
    if (!value.contains('@')) {
    return getUILabel('invalid_email', lang); // Format email invalide
    }
    // Vous pourriez ajouter une validation regex plus compl√®te ici
    return null; // Validation r√©ussie
    },
    ),
    const SizedBox(height: 16),
    // Champ Mot de passe
    TextFormField(
    controller: _passwordController,
    obscureText: true, // Masque le texte
      style: const TextStyle(color: Colors.white),
      decoration: InputDecoration(
        labelText: getUILabel('password_label', lang), // Utilise i18n_service
        labelStyle: const TextStyle(color: Colors.white),
        enabledBorder: const UnderlineInputBorder(
          borderSide: BorderSide(color: Colors.white24),
        ),
        focusedBorder: const UnderlineInputBorder(
          borderSide: BorderSide(color: Colors.pink),
        ),
      ),
      // Validation basique du mot de passe (longueur minimum)
      validator: (value) {
        if (value == null || value.isEmpty) {
          return getUILabel('required_field', lang); // Champ requis
        }
        if (value.length < 6) { // Minimum 6 caract√®res comme requis par Firebase Auth
          return getUILabel('password_min_length', lang); // TODO: Add key: "Le mot de passe doit contenir au moins 6 caract√®res."
        }
        return null; // Validation r√©ussie
      },
    ),
      const SizedBox(height: 32), // Espacement avant le message d'erreur ou le bouton
      // Affichage du message d'erreur si _errorMessage n'est pas null
      if (_errorMessage != null)
        Padding(
          padding: const EdgeInsets.only(bottom: 20), // Espacement avant le bouton
          child: Text(
            _errorMessage!,
            style: const TextStyle(color: Colors.redAccent), // Couleur pour les erreurs
            textAlign: TextAlign.center, // Centrer le texte d'erreur
          ),
        ),
      // Bouton d'Inscription
      ElevatedButton.icon(
        // D√©sactiver le bouton et afficher un indicateur si _isLoading est vrai
        onPressed: _isLoading ? null : _register,
        // Afficher un indicateur de chargement sur l'ic√¥ne ou le texte
        icon: _isLoading ? const SizedBox( // Utilise un SizedBox pour centrer le CircularProgressIndicator
          width: 24, // Largeur √©gale √† l'ic√¥ne
          height: 24, // Hauteur √©gale √† l'ic√¥ne
          child: CircularProgressIndicator( // Indicateur de chargement
            color: Colors.white, // Couleur de l'indicateur
            strokeWidth: 3, // √âpaisseur de l'indicateur
          ),
        ) : const Icon(Icons.person_add), // Ic√¥ne par d√©faut
        // Modifier le texte du bouton en fonction de l'√©tat de chargement
        label: _isLoading ? Text(getUILabel('registering', lang)) : Text(getUILabel('register_button', lang)), // TODO: Add 'registering' key, texte du bouton (internationalis√©)
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.pink, // Couleur de fond du bouton
          foregroundColor: Colors.white, // Couleur du texte/ic√¥ne
          minimumSize: const Size.fromHeight(48), // Bouton pleine largeur
        ),
      ),
      // TODO: Optionnel : Bouton pour revenir √† l'√©cran de connexion si l'utilisateur a cliqu√© "Cr√©er un compte" par erreur.
      const SizedBox(height: 16), // Espacement entre les boutons
      TextButton(
                onPressed: _isLoading ? null : () {
                  debugLog("‚û°Ô∏è Navigation retour vers LoginScreen", level: 'INFO');
                  Navigator.pop(context);
                },
                style: TextButton.styleFrom(foregroundColor: Colors.white70),
                child: Text(getUILabel('back_to_login_button', lang)), // plac√© en dernier
              ),
              // TODO: Ajouter un lien "Mot de passe oubli√© ?" si n√©cessaire.
      // Cela naviguerait vers un √©cran de r√©initialisation de mot de passe.

    ], // <-- Fin des enfants du ListView
    ), // <-- Fin du ListView
    ), // <-- Fin du Form
        ), // <-- Fin du Padding
    ); // <-- Fin du Scaffold
  } // <-- Fin de la m√©thode build
} // <-- Fin de la classe _RegisterScreenState et de la classe RegisterScreen

// TODO: S'assurer que RegisterScreen n'est pas appel√© avec un deviceId n'importe o√π dans l'application.
// V√©rifier tous les appels √† RegisterScreen(...) et retirer le param√®tre deviceId s'il est pr√©sent.

// üìÑ FIN de lib/screens/register_screen.dart
