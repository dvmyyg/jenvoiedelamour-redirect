// -------------------------------------------------------------
// üìÑ FICHIER : lib/screens/send_message_screen.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Permet √† l'utilisateur actuel d'envoyer des messages rapides (type 'quick') √† un destinataire sp√©cifique.
// ‚úÖ Affiche les types de messages rapides autoris√©s pour ce destinataire.
// ‚úÖ Utilise les UID Firebase de l'utilisateur actuel et du destinataire pour cr√©er et envoyer le message via MessageService.
// ‚úÖ G√®re le retour haptique lors de l'envoi.
// ‚úÖ Affiche un message de succ√®s ou d'erreur apr√®s l'envoi.
// ‚úÖ N'utilise plus deviceId pour l'identification ou les op√©rations d'envoi.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V003 - Ajout de la gestion d'erreurs (try/catch) autour de l'envoi. V√©rification de l'utilisateur connect√© avant d'envoyer. Utilisation coh√©rente de debugLog et gestion des SnackBar avec 'mounted'. Ajout d'import uuid. - 2025/05/30
// V002 - Refactoring : Suppression de deviceId. Utilise l'UID du destinataire (via Recipient.id). Remplacement de l'ancienne logique d'envoi par mise √† jour de devices/{recipient.deviceId}. Utilise le MessageService refactoris√© pour envoyer un message de type rapide dans la sous-collection de messages. Suppression du param√®tre deviceId. Obtention de l'UID de l'utilisateur actuel si n√©cessaire (mais sendMessage du service le g√®re). - 2025/05/29
// V001 - version initiale (envoi par mise √† jour de champ dans devices/{deviceId} du destinataire) - 2025/05/21
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/30 // Mise √† jour de la date au 30/05

import '../utils/debug_log.dart'; // Utilise le logger
import 'package:flutter/material.dart';
// On n'a plus besoin d'importer cloud_firestore directement ici car on utilise MessageService.
// import 'package:cloud_firestore/cloud_firestore.dart'; // <-- SUPPRIM√â
import 'package:flutter/services.dart'; // Pour le retour haptique
import 'package:firebase_auth/firebase_auth.dart'; // N√©cessaire pour obtenir l'UID de l'utilisateur actuel
import '../models/recipient.dart'; // Utilise le mod√®le Recipient refactoris√© (contient l'UID du destinataire dans .id)
import '../models/message.dart'; // Ajout de l'import du mod√®le Message
import '../services/i18n_service.dart'; // Pour les traductions (getMessageBody, getUILabel)
import '../services/message_service.dart'; // Utilise le MessageService refactoris√©
//import 'package:uuid/uuid.dart'; // Ajout de l'import pour g√©n√©rer l'ID unique du message
//import 'package:cloud_firestore/cloud_firestore.dart'; // Ajout de l'import pour Timestamp (utilis√© dans le mod√®le Message)


class SendMessageScreen extends StatefulWidget {
  // Le deviceId n'est plus requis. L'identifiant de l'utilisateur actuel est son UID Firebase,
  // accessible via FirebaseAuth.instance.currentUser.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste pertinente
  // Le destinataire √† qui envoyer le message. Son champ 'id' doit contenir l'UID Firebase de l'autre utilisateur.
  final Recipient recipient; // Cet objet Recipient doit avoir l'UID du destinataire dans son champ 'id'

  const SendMessageScreen({
    super.key,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
    required this.deviceLang,
    required this.recipient,
  });

  @override
  State<SendMessageScreen> createState() => _SendMessageScreenState();
}

class _SendMessageScreenState extends State<SendMessageScreen> {
  // MessageService sera initialis√© DANS la m√©thode sendLove car ses d√©pendances (les UIDs)
  // sont obtenues au moment de l'envoi.
  // late MessageService _messageService; // <-- Pas d'initialisation ici si fait dans sendLove

  // Stocke l'UID de l'utilisateur actuel une fois obtenu.
  String? _currentUserId;

  @override
  void initState() {
    super.initState();
    debugLog("üîÑ SendMessageScreen initialis√©.", level: 'INFO');
    // Obtenir l'UID de l'utilisateur actuel d√®s que possible.
    _currentUserId = FirebaseAuth.instance.currentUser?.uid;

    // V√©rifier si l'utilisateur est connect√©
    if (_currentUserId == null) {
      // G√©rer le cas o√π l'utilisateur n'est pas connect√©.
      // Cela indique un probl√®me de navigation/flux si on arrive ici sans utilisateur.
      debugLog("‚ö†Ô∏è SendMessageScreen : Utilisateur non connect√©. Impossible d'envoyer de message.", level: 'ERROR');
      // L'UI dans build g√©rera l'affichage d'un message d'erreur.
      // TODO: Potentiellement, naviguer automatiquement vers la page de connexion si cela arrive ici.
    }
  }

  // G√®re l'envoi d'un message de type rapide
  Future<void> sendLove(String type) async {
    // V√©rification si l'UID de l'exp√©diteur est disponible.
    final user = FirebaseAuth.instance.currentUser; // Peut aussi utiliser _currentUserId si initialis√© en initState
    if (user == null) {
      // Protection suppl√©mentaire si l'UID de l'exp√©diteur n'est pas disponible
      debugLog("‚ö†Ô∏è [sendLove] Impossible d'envoyer le message : UID de l'utilisateur actuel est null.", level: 'ERROR');
      if (mounted) { // V√©rifie si le widget est mont√© avant d'utiliser context
        ScaffoldMessenger.of(context).showSnackBar( // TODO: Utiliser i18n_service pour ce message
          SnackBar(content: Text("Erreur: Vous devez √™tre connect√© pour envoyer un message.")),
        );
      }
      return;
    }
    final String currentUserId = user.uid; // UID de l'exp√©diteur

    // L'UID du destinataire est stock√© dans recipient.id (mod√®le Recipient refactoris√©)
    final String recipientUserId = widget.recipient.id;

    // V√©rifier si le destinataire est appair√© (important avant d'envoyer)
    // Cette v√©rification est faite au niveau de l'UI/Business logic ici.
    // Vous pourriez aussi ajouter une v√©rification dans le MessageService,
    // ou vous appuyer sur les r√®gles de s√©curit√© Firestore (qui devraient emp√™cher l'√©criture
    // si les destinataires ne sont pas appair√©s dans les collections respectives).
    if (!widget.recipient.paired) {
      debugLog("‚ö†Ô∏è [sendLove] Envoi annul√© : destinataire '${widget.recipient.displayName}' (UID: $recipientUserId) non appair√©", level: 'WARN');
      if (mounted) { // V√©rifie si le widget est mont√©
        ScaffoldMessenger.of(context).showSnackBar( // TODO: Utiliser i18n_service pour ce message
          SnackBar(content: Text("Impossible d'envoyer un message: Destinataire non appair√©.")),
        );
      }
      return;
    }


    // --- Nouvelle logique d'envoi utilisant MessageService refactoris√© ---
    debugLog(
      "üì§ [sendLove] Tentative d'envoi d'un message de type '$type' de UID $currentUserId vers UID $recipientUserId",
      level: 'INFO',
    );

    try {
      HapticFeedback.mediumImpact(); // retour haptique

      // Cr√©er un objet Message en utilisant le mod√®le Message refactoris√©
      // L'ID du message est g√©n√©r√© localement (UUID).
      // Les champs 'from' et 'to' contiennent les UID Firebase.
      // Utilise getMessageBody pour le contenu bas√© sur le type.
      final msg = Message.quick( // Utilise la factory quick
        from: currentUserId,   // UID de l'exp√©diteur (utilisateur actuel)
        to: recipientUserId,   // UID du destinataire
        content: getMessageBody(type, widget.deviceLang), // Utilise i18n_service pour le contenu
        // La factory quick fixe le type √† 'quick'. Si vous voulez utiliser le type 'type' pass√© en param,
        // vous devriez utiliser le constructeur Message(...) au lieu de la factory quick.
        // Ex:
        // final msg = Message(
        //   id: const Uuid().v4(),
        //   from: currentUserId,
        //   to: recipientUserId,
        //   type: type, // Utilise le type pass√©
        //   content: getMessageBody(type, widget.deviceLang),
        //   sentAt: Timestamp.now(),
        // );
      );

      // Initialiser MessageService AVEC les UIDs corrects pour CET envoi.
      // On le fait ici car il est utilis√© seulement dans cette m√©thode.
      final messageService = MessageService(currentUserId: currentUserId, recipientUserId: recipientUserId);


      // Appelle la m√©thode sendMessage du MessageService refactoris√©.
      // Ce service g√®re l'√©criture bidirectionnelle atomique dans Firestore.
      await messageService.sendMessage(msg); // Attend la fin de l'envoi

      debugLog(
        "‚úÖ [sendLove] Message de type '${msg.type}' envoy√© avec succ√®s √† UID $recipientUserId", // Log le type r√©el du message envoy√© (quick)
        level: 'SUCCESS',
      );

      // Afficher un message de succ√®s √† l'utilisateur SEULEMENT si l'envoi a r√©ussi
      if (mounted) { // V√©rifie si le widget est mont√©
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(getUILabel('message_sent', widget.deviceLang))), // Utilise i18n_service
        );

        // Revenir √† l'√©cran pr√©c√©dent apr√®s l'envoi r√©ussi
        Navigator.pop(context);
      }


    } on FirebaseException catch (e) {
      // G√©rer les erreurs sp√©cifiques √† Firebase
      debugLog("‚ùå [sendLove] Erreur Firebase lors de l'envoi : ${e.code} - ${e.message}", level: 'ERROR');
      if (mounted) { // V√©rifie si le widget est mont√©
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("‚ùå ${getUILabel('message_send_error', widget.deviceLang)} : ${e.message}"), // Utilise i18n_service et le message de l'erreur
          ),
        );
      }
      // Ne rethrow pas car l'erreur est g√©r√©e et affich√©e
    } catch (e) {
      // G√©rer toute autre erreur inattendue
      debugLog("‚ùå [sendLove] Erreur inattendue lors de l'envoi : $e", level: 'ERROR');
      if (mounted) { // V√©rifie si le widget est mont√©
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("‚ùå ${getUILabel('message_send_error_unexpected', widget.deviceLang)} : $e"), // TODO: Add key for unexpected error
          ),
        );
      }
      // Ne rethrow pas
    }
  }

  @override
  Widget build(BuildContext context) {
    // L'UI affiche une liste de boutons (un par type de message rapide) pour le destinataire.
    // Elle utilise les donn√©es du mod√®le Recipient refactoris√© (allowedPacks).
    final allowedMessages = widget.recipient.allowedPacks;

    // Afficher un message si l'utilisateur actuel n'est pas identifi√© (bien que main.dart le g√®re normalement)
    if (_currentUserId == null) {
      debugLog("‚ö†Ô∏è SendMessageScreen build : _currentUserId est null. Affichage de l'√©cran d'erreur.", level: 'ERROR');
      return Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          title: Text("üíå ${widget.recipient.displayName}"), // Peut-√™tre un titre g√©n√©rique ici
          backgroundColor: Colors.black,
          foregroundColor: Colors.white,
        ),
        body: Center(
          // TODO: Utiliser i18n_service pour ce message
          child: Text("Erreur : Impossible de charger l'√©cran d'envoi sans utilisateur identifi√©.", style: TextStyle(color: Colors.red)),
        ),
      );
    }


    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text("üíå ${widget.recipient.displayName}"), // Affiche le nom du destinataire (du mod√®le Recipient)
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
      ),
      body: allowedMessages.isEmpty // Afficher un message s'il n'y a pas de types de messages autoris√©s
          ? Center(
        child: Text(
          getUILabel('no_message_packs_allowed', widget.deviceLang), // TODO: Add this key
          style: const TextStyle(color: Colors.white70, fontSize: 18),
          textAlign: TextAlign.center,
        ),
      )
          : ListView.separated( // Affiche la liste des types de messages autoris√©s
        padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),
        itemCount: allowedMessages.length,
        separatorBuilder: (_, __) => const SizedBox(height: 12),
        itemBuilder: (context, index) {
          final messageType = allowedMessages[index];
          // Utilise getPreviewText pour obtenir le texte du bouton (ex: l'√©motic√¥ne ‚ù§Ô∏è)
          final previewText = getPreviewText(messageType, widget.deviceLang); // Utilise i18n_service


          return GestureDetector(
            // D√©sactiver le bouton si l'utilisateur n'est pas connect√©
            onTap: _currentUserId == null ? null : () => sendLove(messageType), // Appelle la m√©thode d'envoi refactoris√©e
            child: Container(
              height: 90,
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _currentUserId == null ? Colors.grey : Colors.pink, // Couleur du bouton d√©sactiv√©/activ√©
                borderRadius: BorderRadius.circular(16),
              ),
              child: Center(
                child: Text(
                  previewText,
                  style: TextStyle(
                      fontSize: 22,
                      color: _currentUserId == null ? Colors.white70 : Colors.white // Couleur du texte d√©sactiv√©/activ√©
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}
// üìÑ FIN de lib/screens/send_message_screen.dart
