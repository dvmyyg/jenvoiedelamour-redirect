// -------------------------------------------------------------
// üìÑ FICHIER : lib/screens/profile_screen.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Affiche et permet d'√©diter le profil de l'utilisateur authentifi√© (Pr√©nom, Email).
// ‚úÖ G√®re la sauvegarde du pr√©nom mis √† jour dans Firestore via le FirestoreService.
// ‚úÖ Permet la d√©connexion de l'utilisateur via Firebase Authentication.
// ‚úÖ G√®re la navigation pour revenir √† l'√©cran d'accueil.
// ‚úÖ S'appuie enti√®rement sur l'UID Firebase (FirebaseAuth.currentUser) pour identifier l'utilisateur.
// ‚úÖ Utilise le FirestoreService pour toutes les interactions avec Firestore (chargement/sauvegarde profil).
// ‚úÖ Utilise l'I18nService pour la traduction des textes de l'interface.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V008 - Suppression de l'import inutilis√© 'package:cloud_firestore/cloud_firestore.dart)' suite √† la centralisation des op√©rations Firestore dans FirestoreService. - 2025/05/30
// V007 - Correction de l'erreur 'The name '_initialDisplayName' est d√©j√† d√©fini' en supprimant la d√©claration en double. Correction des appels aux m√©thodes du service (getUserProfile, saveUserProfile) pour utiliser l'instance _firestoreService, r√©solvant ainsi les erreurs de m√©thode ind√©finie et les avertissements d'imports inutilis√©s. - 2025/05/30
// V005 - Correction de l'erreur Undefined name 'getUserProfile' en d√©commentant l'import de firestore_service.dart. Code refactoris√© vers UID confirm√©. - 2025/05/30
// V004 - Refactoring : Remplacement de deviceId par l'UID Firebase pour l'identification utilisateur. Suppression du param√®tre deviceId et de la logique bas√©e sur devices/{deviceId}. Mise √† jour des param√®tres pass√©s √† HomeSelector. - 2025/05/29
// V003 - Ajout import cloud_firestore pour FirebaseFirestore & SetOptions (historique h√©rit√©). - 2025/05/24 10h31
// V002 - Ajout import firebase_auth et import firestore_service (historique h√©rit√©). - 2025/05/25
// V001 - Version initiale (historique h√©rit√©). - 2025/05/21
// -------------------------------------------------------------

// GEM - Code corrig√© par G√©mini le 2025/05/30 // Mise √† jour le 30/05


import 'package:flutter/material.dart';
//import 'package:cloud_firestore/cloud_firestore.dart'; // Toujours n√©cessaire pour interagir avec Firestore
import 'package:firebase_auth/firebase_auth.dart'; // Essentiel pour obtenir l'utilisateur authentifi√© et son UID
import '../utils/debug_log.dart';
import '../services/i18n_service.dart'; // Pour les traductions
import '../services/firestore_service.dart'; // <-- CORRIG√â : D√©comment√© l'import pour acc√©der √† getUserProfile/saveUserProfile
// On importe HomeSelector, qui n'a plus besoin de deviceId en param√®tre
import 'home_selector.dart';

class ProfileScreen extends StatefulWidget {
  // Le deviceId n'est plus pertinent ici. L'identifiant de l'utilisateur actuel est son UID Firebase,
  // obtenu via FirebaseAuth.instance.currentUser.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste pertinente

  const ProfileScreen({
    super.key,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
    required this.deviceLang,
  });

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final _displayNameController = TextEditingController();
  String? _email;
  bool _hasChanged = false; // Pour indiquer si le pr√©nom a √©t√© modifi√©
  bool _isLoading = true; // Pour l'√©tat de chargement initial du profil
  String? _errorMessage; // Pour afficher les erreurs
  String? _successMessage; // Pour afficher les messages de succ√®s

  // => AJOUT DE CETTE LIGNE :
  late final FirestoreService _firestoreService; // Variable pour l'instance du service
  String? _initialDisplayName; // Stocke le pr√©nom initial charg√©

  @override
  void initState() {
    super.initState();
    // => AJOUTEZ CETTE LIGNE POUR INITIALISER LE SERVICE :
    // D'apr√®s votre firestore_service.dart, le constructeur est vide.
    _firestoreService = FirestoreService(); // Cr√©e l'instance du service
    _loadProfile(); // Charge le profil au d√©marrage de l'√©cran
    // Ajoute un √©couteur pour d√©tecter les changements dans le champ du pr√©nom
    _displayNameController.addListener(_onDisplayNameChanged);
  }

  // Lib√®re les contr√¥leurs lorsqu'ils ne sont plus n√©cessaires.
  @override
  void dispose() {
    _displayNameController.removeListener(_onDisplayNameChanged); // Retire l'√©couteur
    _displayNameController.dispose();
    super.dispose();
  }

  // Callback pour d√©tecter les modifications dans le champ du pr√©nom
  void _onDisplayNameChanged() {
    // Active le bouton de sauvegarde si le texte initial n'est pas le m√™me que le texte actuel
    // tout en √©vitant de d√©clencher setState inutilement si le texte est identique
    if (_displayNameController.text.trim() != (_initialDisplayName ?? '')) {
      if (!_hasChanged) {
        setState(() => _hasChanged = true);
      }
    } else {
      if (_hasChanged) {
        setState(() => _hasChanged = false);
      }
    }
  }

  // Modifi√© pour charger le profil UNIQUEMENT depuis users/{uid}
  Future<void> _loadProfile() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
      _successMessage = null;
    });

    // Obtenir l'utilisateur Firebase actuellement connect√© pour son UID et email
    final user = FirebaseAuth.instance.currentUser;

    if (user == null) {
      // G√©rer le cas o√π l'utilisateur n'est pas connect√© (ne devrait pas arriver ici si main.dart redirige correctement)
      debugLog("‚ö†Ô∏è ProfileScreen : Utilisateur non connect√©. Ne devrait pas arriver.", level: 'ERROR');
      setState(() {
        _email = '(Utilisateur non connect√©)'; // TODO: Utiliser i18n_service
        _displayNameController.text = '';
        _initialDisplayName = '';
        _isLoading = false;
        _errorMessage = getUILabel('profile_load_error_not_logged_in', widget.deviceLang); // TODO: Add key
      });
      return;
    }

    // Utiliser l'UID de l'utilisateur pour charger le profil depuis la collection 'users'
    try {
      // => CORRECTION : Appelle la m√©thode via l'instance du service
      final userData = await _firestoreService.getUserProfile(user.uid);

      // Extraire le pr√©nom (firstName est le champ pr√©f√©r√©) ou utiliser un fallback
      final displayName = userData?['firstName'] ?? userData?['displayName'] ?? '';

      // Mettre √† jour le contr√¥leur de texte et les variables d'√©tat
      _displayNameController.text = displayName;
      _initialDisplayName = displayName; // Sauvegarde le nom initial
      _hasChanged = false; // Initialise √† false car pas de changement au d√©marrage

      setState(() {
        _email = user.email ?? '(email inconnu)'; // Affiche l'email de Firebase Auth
        _isLoading = false; // Fin du chargement
        _errorMessage = null; // S'assurer qu'il n'y a pas d'ancienne erreur affich√©e
      });

      debugLog("üìÑ Chargement profil r√©ussi pour UID ${user.uid} : $displayName (${user.email})", level: 'INFO');
    } catch (e) {
      // G√©rer l'erreur de lecture Firestore via getUserProfile
      debugLog("‚ùå Erreur chargement profil pour UID ${user.uid} : $e", level: 'ERROR');
      setState(() {
        _errorMessage = getUILabel('profile_load_error', widget.deviceLang); // Utilise i18n_service
        _isLoading = false; // Fin du chargement (avec erreur)
      });
    }
    // L'ancienne logique de fallback sur devices/{deviceId} est supprim√©e.
    /*
     if (displayName.isEmpty) { // <-- Ancien fallback
        final doc = await FirebaseFirestore.instance
            .collection('devices') // <-- Ancien chemin
            .doc(widget.deviceId) // <-- Ancien ID
            .get();

        displayName = doc.data()?['displayName'] ?? '';
     }
     */
  }

  // Modifi√© pour enregistrer le profil UNIQUEMENT dans users/{uid} via saveUserProfile
  Future<void> _saveProfile() async {
    final newName = _displayNameController.text.trim();
    if (newName.isEmpty) {
      // Valider que le champ n'est pas vide (devrait aussi √™tre g√©r√© par validator)
      setState(() => _errorMessage = getUILabel('required_field', widget.deviceLang)); // Utilise i18n_service
      return;
    }

    setState(() {
      _isLoading = true; // Afficher un indicateur de chargement pendant la sauvegarde
      _errorMessage = null; // R√©initialiser les messages
      _successMessage = null;
    });

    // Obtenir l'utilisateur Firebase actuellement connect√©
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      debugLog("‚ö†Ô∏è ProfileScreen : Tentative de sauvegarde, mais utilisateur non connect√©.", level: 'ERROR');
      setState(() {
        _errorMessage = getUILabel('profile_save_error_not_logged_in', widget.deviceLang); // TODO: Add key
        _isLoading = false;
      });
      return;
    }

    try {
      // **Suppression de l'√©criture obsol√®te dans devices/{deviceId}**
      // await FirebaseFirestore.instance // <-- SUPPRIM√â
      //     .collection('devices') // <-- SUPPRIM√â
      //     .doc(widget.deviceId) // <-- SUPPRIM√â
      //     .update({'displayName': newName}); // <-- SUPPRIM√â


      // Enregistrer le profil dans la collection 'users' en utilisant l'UID via firestore_service
      // => CORRECTION : Appelle la m√©thode via l'instance du service
      await _firestoreService.saveUserProfile(
        uid: user.uid,
        email: user.email ?? '',
        firstName: newName,
      );

      // Optionnel : Mettre √† jour le displayName dans Firebase Auth aussi
      await user.updateDisplayName(newName);
      debugLog("‚úÖ updateDisplayName Firebase Auth r√©ussi"); // Log pour confirmation

      setState(() {
        _successMessage = getUILabel('profile_saved', widget.deviceLang); // Utilise i18n_service
        _hasChanged = false; // R√©initialise l'indicateur de changement apr√®s sauvegarde
        _initialDisplayName = newName; // Met √† jour le nom initial sauvegard√©
        _isLoading = false; // Fin du chargement
        _errorMessage = null; // S'assurer qu'il n'y a pas d'erreur affich√©e en m√™me temps
      });

      debugLog("üíæ Profil mis √† jour dans Firestore (users/${user.uid}) : $newName", level: 'INFO');

      // Le message de succ√®s s'affiche via SnackBar si impl√©ment√©, ou ici directement.
      // L'ancienne logique affichait le message dans l'UI de l'√©cran. On garde cette approche.

    } catch (e) {
      debugLog("‚ùå Erreur sauvegarde profil pour UID ${user.uid} : $e", level: 'ERROR');
      setState(() {
        _errorMessage = getUILabel('profile_save_error', widget.deviceLang); // Utilise i18n_service
        _isLoading = false; // Fin du chargement (avec erreur)
        _successMessage = null; // S'assurer qu'il n'y a pas de succ√®s affich√© en m√™me temps
      });
    }
  }

  // G√®re la d√©connexion utilisateur via Firebase Auth
  Future<void> _logout() async {
    setState(() => _isLoading = true); // Peut-√™tre afficher un indicateur pendant la d√©connexion

    try {
      await FirebaseAuth.instance.signOut(); // D√©connexion via Firebase Auth
      debugLog("üëã Utilisateur d√©connect√© (UID: ${FirebaseAuth.instance.currentUser?.uid})", level: 'INFO');
      // Firebase Auth met √† jour son √©tat global.
      // main.dart (qui √©coute authStateChanges()) d√©tectera le passage √† null
      // et naviguera automatiquement vers LoginScreen.
      // Donc, cet √©cran n'a PAS besoin de naviguer ici !

      // L'ancienne logique de popUntil √©tait n√©cessaire si main.dart ne g√©rait pas la navigation globale.
      // if (mounted) Navigator.of(context).popUntil((route) => route.isFirst); // <-- Potentiellement SUPPRIM√â si main.dart g√®re tout

    } catch (e) {
      debugLog("‚ùå Erreur d√©connexion : $e", level: 'ERROR');
      setState(() {
        _errorMessage = getUILabel('logout_error', widget.deviceLang); // TODO: Add this key
        _isLoading = false;
      });
      // TODO: Afficher un message d'erreur √† l'utilisateur si la d√©connexion √©choue ?
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // Fonction pour revenir √† l'√©cran d'accueil (HomeSelector)
  // Modifi√© pour ne PAS passer deviceId
  void _goToHome() {
    // Navigue vers HomeSelector. On ne passe PLUS deviceId.
    // HomeSelector obtiendra l'UID via FirebaseAuth.instance.currentUser.
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => HomeSelector(
          // deviceId: widget.deviceId, // <-- SUPPRIM√â
          deviceLang: widget.deviceLang, // La langue est toujours pass√©e
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    // L'UI reste similaire, affichant les champs de profil et les boutons d'action.
    // Elle utilise _isLoading pour d√©sactiver les actions pendant le chargement/sauvegarde.
    return Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
        title: Text(getUILabel('profile_title', widget.deviceLang)), // Utilise i18n_service
    backgroundColor: Colors.black,
    foregroundColor: Colors.white,
    ),
    body: _isLoading && _initialDisplayName == null // Afficher l'indicateur de chargement uniquement pendant le chargement initial
    ? const Center(
    child: CircularProgressIndicator(color: Colors.pink),
    )
        : Padding(
    padding: const EdgeInsets.all(24),
    child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
    // Section Pr√©nom/Nom affich√©
    Text(
    getUILabel('profile_firstname_label', widget.deviceLang), // Utilise i18n_service
    style: const TextStyle(
    color: Colors.white70,
    fontWeight: FontWeight.bold,
    ),
    ),
    const SizedBox(height: 4),
    // Champ de texte pour le pr√©nom (utilise _displayNameController)
    TextFormField(
    controller: _displayNameController,
    style: const TextStyle(color: Colors.white),
    decoration: InputDecoration(
    hintText: getUILabel('profile_firstname_hint', widget.deviceLang), // Utilise i18n_service
    hintStyle: const TextStyle(color: Colors.white38),
    enabledBorder: const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.white24),
    ),
    focusedBorder: const UnderlineInputBorder(
    borderSide: BorderSide(color: Colors.pink),
    ),
    ),
    // onChanged est d√©j√† configur√© pour d√©tecter les modifications et activer le bouton de sauvegarde
      // onChanged: (_) {
      //     if (!_hasChanged) {
      //       setState(() => _hasChanged = true);
      //     }
      //   }, // <-- Comment√© car l'√©couteur est ajout√© dans initState
    ),
      const SizedBox(height: 32),
      // Section Email (lecture seule)
      Align(
        alignment: Alignment.centerLeft,
        child: Text(
          getUILabel('profile_email_label', widget.deviceLang), // Utilise i18n_service
          style: const TextStyle(
            color: Colors.white70,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      const SizedBox(height: 4),
      Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.white24),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Text(
          _email ?? '', // Affiche l'email charg√©
          style: const TextStyle(color: Colors.white),
        ),
      ),
      const SizedBox(height: 32),
      // Affichage des messages d'erreur ou de succ√®s
      if (_errorMessage != null)
        Text(
          _errorMessage!,
          style: const TextStyle(color: Colors.redAccent),
          textAlign: TextAlign.center, // Centrer le texte
        ),
      if (_successMessage != null)
        Text(
          _successMessage!,
          style: const TextStyle(color: Colors.greenAccent),
          textAlign: TextAlign.center, // Centrer le texte
        ),
      const Spacer(), // Pousse les boutons vers le bas
      // Bouton pour sauvegarder (activ√© seulement si des changements ont eu lieu)
      if (_hasChanged) // Bouton visible seulement s'il y a des modifications non sauvegard√©es
        ElevatedButton.icon(
          onPressed: _isLoading ? null : _saveProfile, // D√©sactiv√© pendant la sauvegarde
          icon: _isLoading ? const CircularProgressIndicator(color: Colors.white) : const Icon(Icons.save), // Indicateur de chargement sur l'ic√¥ne ou texte
          label: _isLoading ? Text(getUILabel('saving', widget.deviceLang)) : Text(getUILabel('profile_save_button', widget.deviceLang)), // TODO: Add 'saving' key, texte du bouton
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.pink,
            foregroundColor: Colors.white,
            minimumSize: const Size.fromHeight(48),
          ),
        ),
      const SizedBox(height: 12),
      // Bouton de D√©connexion
      ElevatedButton.icon(
        onPressed: _isLoading ? null : _logout, // D√©sactiv√© si d'autres op√©rations sont en cours
        icon: const Icon(Icons.logout),
        label: Text(getUILabel('logout_button', widget.deviceLang)), // Utilise i18n_service
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.white10,
          foregroundColor: Colors.white,
          minimumSize: const Size.fromHeight(48),
        ),
      ),
      const SizedBox(height: 12),
      // Bouton pour revenir √† l'accueil
      ElevatedButton.icon(
        onPressed: _isLoading ? null : _goToHome, // D√©sactiv√© si d'autres op√©rations sont en cours
        icon: const Icon(Icons.home),
        label: Text(getUILabel('back_home_button', widget.deviceLang)), // Utilise i18n_service
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.white10,
          foregroundColor: Colors.white,
          minimumSize: const Size.fromHeight(48),
        ),
      ),
    ],
    ),
    ),
    );
  } // <-- Fin de la m√©thode build

// TODO: Potentiellement ajouter d'autres m√©thodes li√©es au profil ici si n√©cessaire.
} // <-- Fin de la classe _ProfileScreenState

// TODO: Pensez √† supprimer la classe ProfileScreen si elle n'est pas utilis√©e ailleurs (c'est un StatefulWidget, donc elle a sa classe State associ√©e)

// TODO: S'assurer que ProfileScreen n'est pas appel√© avec un deviceId n'importe o√π.
