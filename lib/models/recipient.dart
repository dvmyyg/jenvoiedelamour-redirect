// -------------------------------------------------------------
// üìÑ FICHIER : lib/models/recipient.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Mod√®le de donn√©es pour repr√©senter un destinataire (un autre utilisateur appair√©).
// ‚úÖ Contient les informations essentielles d'un destinataire (nom d'affichage, ic√¥ne, relation, packs autoris√©s, √©tat d'appairage, type de catalogue).
// ‚úÖ Utilise l'UID Firebase de l'autre utilisateur comme identifiant unique principal ('id').
// ‚úÖ Fournit des m√©thodes pour copier l'objet (copyWith).
// ‚úÖ Inclut des factories et m√©thodes pour la conversion entre l'objet Dart et le format de donn√©es Firestore (Map<String, dynamic>).
// ‚úÖ La conversion Firestore utilise l'ID du document (qui est l'UID du destinataire) pour remplir le champ 'id' du mod√®le.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V005 - Code examin√© par Gemini. Mod√®le Recipient confirm√© comme correctement refactoris√© pour utiliser l'UID du destinataire comme ID principal ('id') et pour la conversion Firestore. Logique obsol√®te (deviceId) bien retir√©e. - 2025/05/31
// V004 - Remplacement du champ deviceId par l'UID du destinataire dans le mod√®le. L'ID du document Firestore (stock√© dans le champ 'id') devient l'UID du destinataire. - 2025/05/29
// V003 - ajout de la m√©thode copyWith - 2025/05/27
// V002 - ajout du champ catalogType pour s√©lection du type de messages - 2025/05/28 10h26
// V001 - version initiale - 2025/05/21
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/29

import 'package:cloud_firestore/cloud_firestore.dart';

class Recipient {
  // L'identifiant de ce destinataire. Apr√®s refactoring, c'est l'UID Firebase de l'autre utilisateur.
  final String id;

  final String displayName;
  final String icon;
  final String relation;
  final List<String> allowedPacks;
  final bool paired;
  final String catalogType;
  final Timestamp? createdAt; // ‚≠êÔ∏è AJOUTER LA D√âCLARATION DU CHAMP ICI

  Recipient({
    required this.id, // <-- ID (qui sera l'UID Firebase)
    required this.displayName,
    required this.icon,
    required this.relation,
    required this.allowedPacks,
    required this.paired,
    this.catalogType = 'partner',
    this.createdAt, // ‚≠êÔ∏è AJOUTER LE PARAM√àTRE AU CONSTRUCTEUR ICI
  });

  Recipient copyWith({
    String? id,
    String? displayName,
    String? icon,
    String? relation,
    List<String>? allowedPacks,
    bool? paired,
    String? catalogType,
  }) {
    return Recipient(
      id: id ?? this.id,
      displayName: displayName ?? this.displayName,
      icon: icon ?? this.icon,
      relation: relation ?? this.relation,
      allowedPacks: allowedPacks ?? this.allowedPacks,
      paired: paired ?? this.paired,
      catalogType: catalogType ?? this.catalogType,
    );
  }

  // Factory pour transformation Firestore ‚Üí objet Recipient (adapt√©e pour lire l'UID comme ID principal)
  factory Recipient.fromMap(String id, Map<String, dynamic> data) {
    // 'id' vient de l'ID du document Firestore (qui sera l'UID du destinataire apr√®s refactoring)
    return Recipient(
      id: id,
      displayName: data['displayName'] ?? '',
      icon: data['icon'] ?? '',
      relation: data['relation'] ?? '',
      allowedPacks: List<String>.from(data['allowedPacks'] ?? []),
      paired: data['paired'] ?? false,
      catalogType: data['catalogType'] ?? 'partner',
    );
  }

  // Transformation objet Recipient ‚Üí Firestore (adapt√©e pour ne pas √©crire le champ deviceId)
  Map<String, dynamic> toMap() {
    return {
      'displayName': displayName,
      'icon': icon,
      'relation': relation,
      'allowedPacks': allowedPacks,
      'paired': paired,
      'catalogType': catalogType,
    };
  }
}
// üìÑ FIN de lib/models/recipient.dart
