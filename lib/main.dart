// -------------------------------------------------------------
// üìÑ FICHIER : lib/main.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Point d'entr√©e principal de l'application Flutter.
// ‚úÖ Initialise Firebase et g√®re l'√©tat d'authentification initial.
// ‚úÖ Initialise le conteneur d'injection de d√©pendances (get_it) et enregistre les services/ressources (incluant le plugin local notifications).
// ‚úÖ D√©termine l'√©cran initial affich√© √† l'utilisateur (Login, Email Verification, HomeSelector, PairSuccessScreen).
// ‚úÖ G√®re les deep links d'appairage via app_links (d√©clenchement initial et stream).
// ‚úÖ G√®re la langue du device via PlatformDispatcher et la passe √† l'UI.
// ‚úÖ Enregistre le handler top-level FCM pour les messages background (_firebaseMessagingBackgroundHandler).
// ‚úÖ Enregistre le handler top-level pour les clics sur notifications background (onDidReceiveBackgroundNotificationResponse).
// ‚úÖ Rend le NavigatorKey global accessible via le conteneur d'injection.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V020 - Nettoyage du code comment√© suite au d√©placement de la logique FCM/Notifications locales vers FcmService. Suppression des d√©clarations locales inutilis√©es et des listeners/initialisations d√©plac√©s. - 2025/06/16 20h52
// V019 - Utilisation de notification_config.dart pour la configuration des notifications locales. Suppression des constantes de configuration locales. - 2025/06/16 18h56
// V018 - Comment√© proprement la fonction pairUsers (devenue obsol√®te). Ajout d‚Äôun tag de d√©pr√©ciation. Confirmation de la pr√©sence correcte du dispose(). Ajustement du plan d'action et v√©rification de la coh√©rence entre blocs. - 2025/06/13 19h50
// V017 - Int√©gration de get_it pour l'injection de d√©pendances. Remplacement des acc√®s globaux √† navigatorKey et flutterLocalNotificationsPlugin par des appels via getIt. Appel √† setupLocator dans main(). Suppression (comment√©e) des d√©clarations globales de ces variables. Mise √† jour de la description des fonctionnalit√©s impact√©es dans l'en-t√™te. - 2025/06/11 17h25
// V016 - Suppression de la constante globale isReceiver ; lecture du statut isReceiver depuis Firestore dans les handlers de notification pour une source de v√©rit√© unique et fiable. - 2025/06/07
// V015 - Correction de l'avertissement '!' sur currentUser.uid et ajout de la parenth√®se fermante manquante dans le listener onMessageOpenedApp. - 2025/06/07
// V014 - Initialisation du plugin flutter_local_notifications directement dans le handler background _firebaseMessagingBackgroundHandler. - 2025/06/07
// V013 - Ajout des listeners FCM onMessage (premier plan) et onMessageOpenedApp (clic sur notif). - 2025/06/07
// V012 - D√©claration globale du plugin flutterLocalNotificationsPlugin. - 2025/06/07
// V011 - Impl√©mente et enregistre le handler onDidReceiveBackgroundNotificationResponse pour Android >= 13+. - 2025/06/04
// V010 - Impl√©mente la logique de navigation pour les clics sur notifications locales (onDidReceiveNotificationResponse). - 2025/06/04
// V009 - Ajout d'un NavigatorKey global pour navigation hors contexte widget. - 2025/06/02
// V008 - Affichage de la notification locale dans le background handler FCM. - 2025/06/02
// V007 - Initialisation de flutter_local_notifications. - 2025/06/02
// V006 - Correction des appels internes √† pairUsers. - 2025/05/30
// V005 - HomeSelector converti en StatefulWidget pour g√©rer le token FCM. - 2025/06/02
// V004 - Correction deviceLang dans un StatelessWidget. - 2025/05/30
// V003 - Refactoring vers UID Firebase. - 2025/05/29
// V002 - Ajout explicite du param√®tre displayName. - 2025/05/24
// V001 - Version initiale n√©cessitant correction pr√©nom utilisateur. - 2025/05/23
// -------------------------------------------------------------

// GEM - code corrig√© et historique mis √† jour par G√©mini le 2025/06/13 21h25
// GEM - Import CurrentUserService comment√© car plus utilis√© dans main.dart - 2025/06/15

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Essentiel pour l'authentification bas√©e sur l'utilisateur
import 'package:app_links/app_links.dart'; // Reste pour g√©rer les deep links
import 'dart:ui'; // N√©cessaire pour PlatformDispatcher.instance.locale
import 'dart:async';
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // Import n√©cessaire pour les notifs locales

// ‚úÖ AJOUT : Import du service locator
import 'utils/service_locator.dart';

// ‚úÖ AJOUT : Import de la configuration de notification centralis√©e
import 'services/notification_config.dart'; // Ajuste le chemin si n√©cessaire

// On importe les √©crans principaux. Ils devront maintenant g√©rer l'UID via FirebaseAuth.currentUser
// ou le recevoir en param√®tre si l'action concerne un autre utilisateur.
import 'screens/home_selector.dart';
import 'screens/login_screen.dart'; // √âcran de connexion pour les utilisateurs non connect√©s
import 'screens/email_verification_screen.dart'; // √âcran de v√©rification pour les nouveaux comptes

import 'firebase_options.dart';
import 'utils/debug_log.dart'; // Votre utilitaire de log

import 'package:jelamvp01/models/recipient.dart'; // Importe le mod√®le Recipient
import 'package:jelamvp01/screens/recipient_details_screen.dart'; // Importe l'√©cran de chat

// TODO: Etape 2 - R√©√©valuer le r√¥le de CurrentUserService // Ce TODO reste pour la refacto future
import 'package:jelamvp01/services/pairing_service.dart'; // ‚úÖ AJOUT : Import de PairingService

// --- FIN   DU BLOC 01 ---

// --- DEBUT DU BLOC 02 ---

// D√©clare un Navigator Key global. Utilis√© pour naviguer depuis des contextes sans BuildContext (comme les handlers FCM).
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

// Instance du plugin local de notifications - Reste en dehors de main()
// Doit √™tre accessible par le background handler et potentiellement d'autres parties de l'app

// TODO: D√©finir les d√©tails de la notification Android une fois (peut-√™tre dans un service ou ici)
// Ces d√©tails sont r√©utilis√©s pour toutes les notifications Android.

// D√©tails de la notification pour diff√©rentes plateformes (pour l'instant, principalement Android)

// TOP LEVEL FUNCTION: obligatoire pour le background handler FCM
// Elle DOIT √™tre d√©clar√©e en dehors de toute classe ou fonction
// Le d√©corateur @pragma('vm:entry-point') est crucial pour les versions r√©centes de Flutter/Dart.
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Assurer que Firebase est initialis√©, car cette fonction peut s'ex√©cuter en dehors du contexte principal
  // o√π main() a √©t√© appel√©. V√©rifier Firebase.apps.isEmpty est une bonne pratique pour √©viter la double initialisation.
  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    debugLog("üñô [FCM-BG] Firebase initialis√© dans le background handler.", level: 'INFO');
  }

  debugLog("üñô [FCM-BG] Message re√ßu en arri√®re-plan : ${message.messageId}", level: 'INFO');
  debugLog("üñô [FCM-BG] Notification payload: ${message.notification?.title} / ${message.notification?.body}", level: 'DEBUG');
  debugLog("üñô [FCM-BG] Data payload: ${message.data}", level: 'DEBUG');

  // --- Logique pour afficher une notification locale ---
  // Cette logique s'ex√©cute UNIQUEMENT si l'app est en arri√®re-plan ou termin√©e.
  // Si l'app est au premier plan, le message est g√©r√© par FirebaseMessaging.onMessage (√† impl√©menter plus tard).

  RemoteNotification? notification = message.notification;
  // On v√©rifie si le message contient une partie 'notification' visible par l'OS.
  // Dans la Cloud Function, nous avons mis un titre et un corps dans ce champ.
  // On v√©rifie aussi message.data.isNotEmpty car le champ 'data' est toujours
  // pass√© au handler m√™me si le champ 'notification' n'y est pas, et contient
  // les infos (senderId, messageId, etc.) dont nous avons besoin pour potentiellement le clic.
  if (notification != null && message.data.isNotEmpty) {
    try {
      // Utilise flutter_local_notifications pour afficher la notification locale.
      // Chaque notification a besoin d'un ID entier unique. Si tu envoies plusieurs
      // notifications (ex: plusieurs messages), chaque nouvelle notif devrait avoir un ID
      // diff√©rent, sinon elle √©craserait la pr√©c√©dente dans la barre de notifs.
      // Utiliser messageId (qui est une String) ne fonctionne pas directement ici.
      // Il faut g√©n√©rer un ID entier unique. Utiliser un hash bas√© sur l'ID du message
      // ou l'UID de l'exp√©diteur est une option simple. Assure-toi que le hash est un int.
      // Un ID bas√© sur le temps (DateTime.now().millisecondsSinceEpoch % 2147483647)
      // peut aussi √™tre utilis√©, mais ne regroupe pas les notifs par conversation.
      // Pour l'instant, utilisons un hash simple de l'ID du message pour avoir un ID "unique" par message.
      // Conversion de l'ID String en un entier unique (potentiellement en utilisant String.hashCode)
      final int notificationId = message.messageId.hashCode; // Utilise le hash de l'ID message comme ID de notif locale

      // Le 'payload' de show() est une cha√Æne de caract√®res qui est renvoy√©e
      // quand l'utilisateur clique sur la notification. Il doit contenir les
      // informations n√©cessaires (comme l'UID de l'exp√©diteur) pour que l'app
      // puisse naviguer vers la bonne conversation au clic.
      // On utilise les donn√©es personnalis√©es ('data') envoy√©es par la Cloud Function.
      // IMPORTANT: Ce payload doit √™tre une STRING.
      final String notificationClickPayload = message.data['senderId'] ?? ''; // Exemple: passe l'UID de l'exp√©diteur comme payload

      await getIt<FlutterLocalNotificationsPlugin>().show( // <-- Utilisation de getIt ici
        notificationId, // ID unique de la notification locale (entier)
        notification.title, // Titre de la notification (vient du champ 'notification' FCM)
        notification.body, // Corps de la notification (vient du champ 'notification' FCM)
        // ‚õîÔ∏è √Ä remplacer - Utilise messageNotificationDetails de notification_config.dart - 2025/06/15
        // platformChannelSpecifics, // D√©tails sp√©cifiques √† la plateforme (Android) d√©finis plus haut
        messageNotificationDetails, // ‚úÖ Remplac√© par messageNotificationDetails de notification_config.dart
        payload: notificationClickPayload, // Donn√©es pass√©es √† l'app lors du clic (String)
      );
      debugLog("üîî [FCM-BG] Notification locale affich√©e (ID: $notificationId). Payload clic: $notificationClickPayload", level: 'INFO');

    } catch (e) {
      debugLog("‚ùå [FCM-BG] Erreur lors de l'affichage de la notification locale : $e", level: 'ERROR');
    }
  } else {
    debugLog("üñô [FCM-BG] Message re√ßu ne contient pas les donn√©es suffisantes pour l'affichage local de notification.", level: 'DEBUG');
    // Ce cas pourrait arriver si la Cloud Function n'inclut pas le champ 'notification'
    // ou les donn√©es n√©cessaires dans le champ 'data'.
    // Tu peux aussi traiter les messages qui contiennent UNIQUEMENT des donn√©es ('data') ici
    // en construisant la notification locale √† partir de message.data si n√©cessaire.
    // Exemple: if (message.data.isNotEmpty) { buildAndShowLocalNotificationFromData(message.data); }
  }


  // TODO: Ajouter ici toute autre logique n√©cessaire en arri√®re-plan (ex: sauvegarder dans Firestore, etc.)
  // Note: Le temps d'ex√©cution des background handlers est limit√© par l'OS. Ne fais pas d'op√©rations longues ou complexes.

  // Le handler doit retourner un Future<void> et ne pas se terminer pr√©matur√©ment.
  // Toutes les op√©rations asynchrones (comme show()) doivent √™tre await-√©es.
  return Future<void>.value(); // Explicitly return a completed Future<void>
} // <-- FIN DE LA FONCTION _firebaseMessagingBackgroundHandler

// --- FIN   DU BLOC 02 ---

// --- DEBUT DU BLOC 03 ---

// Capture et gestion des liens d'appairage via app_links.
// Cette fonction suppose maintenant que l'utilisateur est CONNECT√â lorsqu'il clique sur un lien d'appairage.
// Le lien devrait contenir l'UID Firebase de l'inviteur ('recipient' est l'inviteur).
Future<String?> handleAppLinks() async {
  final AppLinks appLinks = AppLinks();

  // √âcoute des liens d'appairage √† chaud pendant que l'app est ouverte
  appLinks.uriLinkStream.listen((Uri? uri) async {
    final User? currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser != null && uri != null && uri.queryParameters.containsKey('recipient')) {
      final String? recipientInviterUid = uri.queryParameters['recipient']; // C'est l'UID de l'inviteur
      if (recipientInviterUid != null && recipientInviterUid.isNotEmpty && currentUser.uid != recipientInviterUid) {
        debugLog("üì® AppLink (stream) ‚Üí Inviteur UID=$recipientInviterUid", level: 'INFO');
        // Tente d'appairer cet utilisateur (currentUser.uid) avec l'inviteur (recipientInviterUid)
        // ‚õîÔ∏è √Ä remplacer - appel √† la fonction locale pairUsers
        // final String? pairedWithUid = await pairUsers(recipientInviterUid, currentUser.uid);
        // ‚úÖ Remplac√© par appel PairingService
        try {
          await getIt<PairingService>().pairUsers(currentUser.uid, recipientInviterUid);
          debugLog("‚úÖ Appairage stream r√©ussi avec UID $recipientInviterUid", level: 'SUCCESS');
          // TODO: Potentiellement naviguer vers l'√©cran de succ√®s ou rafra√Æchir la liste des destinataires
          // ou afficher une notification locale "Appairage r√©ussi" si l'app n'est pas au premier plan.
          // Si l'app est au premier plan, une simple mise √† jour de l'UI peut suffire.
        } catch (e) {
          debugLog("‚ùå Appairage stream √©chou√© avec UID $recipientInviterUid : $e", level: 'ERROR');
          // G√©rer l'erreur (afficher un message ?)
        }
      } else {
        debugLog("‚ö†Ô∏è AppLink stream re√ßu mais utilisateur non connect√©, ou lien invalide, ou auto-appairage.", level: 'WARNING');
      }
    }
  });

  // V√©rification d'un lien d'appairage initial lors du d√©marrage de l'app
  final Uri? initialUri = await appLinks.getInitialAppLink();
  final User? currentUser = FirebaseAuth.instance.currentUser;
  if (currentUser != null && initialUri != null && initialUri.queryParameters.containsKey('recipient')) {
    final String? recipientInviterUid = initialUri.queryParameters['recipient']; // C'est l'UID de l'inviteur
    if (recipientInviterUid != null && recipientInviterUid.isNotEmpty && currentUser.uid != recipientInviterUid) {
      debugLog("üì® AppLink (initial) ‚Üí Inviteur UID=$recipientInviterUid", level: 'INFO');
      // Tente d'appairer cet utilisateur (currentUser.uid) avec l'inviteur (recipientInviterUid)
      // ‚õîÔ∏è √Ä remplacer - appel √† la fonction locale pairUsers
      // final String? pairedWithUid = await pairUsers(recipientInviterUid, currentUser.uid);
      // ‚úÖ Remplac√© par appel PairingService
      try {
        await getIt<PairingService>().pairUsers(currentUser.uid, recipientInviterUid);
        debugLog("‚úÖ Appairage initial r√©ussi avec UID $recipientInviterUid", level: 'SUCCESS');
        return recipientInviterUid; // Retourne l'UID du destinataire appair√© pour affichage initial

      } catch (e) {
        debugLog("‚ùå Appairage initial √©chou√© avec UID $recipientInviterUid : $e", level: 'ERROR');
        // G√©rer l'erreur (afficher un message ?)
        return null; // Aucun appairage initial via lien r√©ussi
      }
    } else {
      debugLog("‚ö†Ô∏è AppLink initial re√ßu mais utilisateur non connect√©, ou lien invalide, ou auto-appairage.", level: 'WARNING');
    }
  }

  return null; // Aucun appairage initial via lien (ou √©chec)
}

// --- FIN   DU BLOC 03 ---

// --- DEBUT DU BLOC 04 ---

// --- FIN   DU BLOC 04 ---

// --- DEBUT DU BLOC 05 ---

Future<void> main() async {
  // Assure que les bindings Flutter sont initialis√©s. Crucial avant d'appeler des m√©thodes natives (comme Firebase ou les notifs locales).
  WidgetsFlutterBinding.ensureInitialized();
  debugLog("üõ†Ô∏è WidgetsFlutterBinding initialized", level: 'INFO');

  setupLocator(); // <-- Ligne √† ajouter ici
  debugLog("üõ†Ô∏è Service locator initialis√©", level: 'INFO');

  // Initialisation de Firebase
  await Firebase.initializeApp();
  debugLog("‚úÖ Firebase initialized", level: 'INFO');

  // Ajout√© pour connaitre le token FCM d'un t√©l√©phone qui se connecte
  final fcmToken = await FirebaseMessaging.instance.getToken();
  debugLog("üì± Token FCM : $fcmToken", level: 'INFO');

  // Initialisation de flutter_local_notifications TRES TOT
  // Configurer les param√®tres sp√©cifiques √† Android (utilise les d√©tails d√©finis plus haut)
  // Assure-toi que les 'androidPlatformChannelSpecifics' et 'platformChannelSpecifics' sont d√©finis AVANT cet appel.

  // Enregistrement du background handler FCM TRES TOT, juste apr√®s ensureInitialized et les notifs locales
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  debugLog("üñô FCM background handler enregistr√©", level: 'INFO');

  // Initialiser Firebase (important avant d'utiliser Firebase Auth ou Firestore)
  // Assure-toi que ton fichier firebase_options.dart est correct.
  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  }

  debugLog("‚ú® Firebase initialis√©", level: 'INFO');

  // Attendre que Firebase Auth r√©cup√®re l'√©tat de connexion persistant.
  // Cela est crucial pour savoir si un utilisateur est d√©j√† connect√© au d√©marrage.
  await FirebaseAuth.instance.authStateChanges().first;
  debugLog("üë§ √âtat d'auth Firebase synchronis√©", level: 'INFO');

  // La langue du t√©l√©phone reste utile pour l'internationalisation et peut √™tre r√©cup√©r√©e ind√©pendamment de l'identifiant utilisateur.
  final String deviceLang = PlatformDispatcher.instance.locale.languageCode; // La langue reste importante
  debugLog("üåê Langue du t√©l√©phone : $deviceLang", level: 'INFO');

  // TODO: La sauvegarde/mise √† jour du token FCM est maintenant g√©r√©e par le FcmService
  // qui est appel√© dans HomeSelector apr√®s authentification/v√©rification email r√©ussie.
  // Nous n'avons plus besoin de cette logique ici dans main().

  final String? initialPairedRecipientUid = await handleAppLinks();

  // Lance l'application principale ...
  runApp(MyApp(
    // deviceId: deviceId, // <-- SUPPRIM√â du constructeur de MyApp
    deviceLang: deviceLang, // La langue reste pertinente
    // On passe l'UID de l'autre utilisateur si un appairage via deep link a r√©ussi au d√©marrage
    initialPairSuccessRecipientUid: initialPairedRecipientUid,
  ));
}

// --- FIN   DU BLOC 05 ---

// --- DEBUT DU BLOC 06 ---

// Le widget racine de l'application.
// Utilise StreamBuilder pour √©couter l'√©tat d'authentification Firebase et d√©cider quel √©cran afficher.
class MyApp extends StatefulWidget {
  // Le deviceId n'est plus requis, car l'identit√© de l'utilisateur est g√©r√©e par Firebase Auth.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste un param√®tre utile
  // Le param√®tre initialPairSuccessRecipientId est maintenant l'UID de l'autre utilisateur
  final String? initialPairSuccessRecipientUid;

  const MyApp({
    super.key,
    required this.deviceLang,
    this.initialPairSuccessRecipientUid, // Optionnel, utilis√© si un appairage initial via lien a eu lieu
  });

  @override
  State<MyApp> createState() => _MyAppState();
}

// --- FIN   DU BLOC 06 ---

// --- DEBUT DU BLOC 07 ---

class _MyAppState extends State<MyApp> {
  // Indicateur pour afficher temporairement l'√©cran de succ√®s d'appairage si d√©clench√© par un lien au d√©marrage
  bool _showPairSuccess = false;

  // Stocke les souscriptions aux listeners FCM pour pouvoir les annuler dans dispose()

  // --- FIN   DU BLOC 07 ---

// --- DEBUT DU BLOC 08 ---
  @override
  void initState() {
    super.initState();
    // Si un appairage initial via deep link a r√©ussi (UID de l'autre utilisateur re√ßu)
    if (widget.initialPairSuccessRecipientUid != null) {
      debugLog("üöÄ D√©clenchement de l'affichage de l'√©cran succ√®s appairage pour UID ${widget.initialPairSuccessRecipientUid}", level: 'INFO');
      _showPairSuccess = true;
      // Afficher l'√©cran de succ√®s pendant quelques secondes, puis masquer
      Timer(const Duration(seconds: 4), () { // Augment√© l√©g√®rement le d√©lai pour une meilleure lecture
        if (mounted) {
          debugLog("‚è≥ Fin de l'affichage de l'√©cran succ√®s", level: 'INFO');
          setState(() => _showPairSuccess = false);
          // TODO: Potentiellement, apr√®s l'√©cran de succ√®s, naviguer vers l'√©cran des destinataires
          // ou rafra√Æchir la liste sur l'√©cran principal si on y retourne automatiquement.
          // Pour l'instant, masquer l'√©cran de succ√®s ram√®ne √† l'√©cran d√©termin√© par authStateChanges (HomeSelector si connect√©).
          // Note: Si tu veux naviguer ici, il te faudra un Navigator Key global accessible depuis ce contexte.
        }
      });

    }

    // ‚õîÔ∏è √Ä supprimer - TODO obsol√®te, logique impl√©ment√©e ci-dessous - 2025/06/13
    // TODO: Ajouter ici la gestion des messages FCM re√ßus quand l'app est au premier plan (FirebaseMessaging.onMessage)
    // et potentiellement la gestion du clic sur la notification quand l'app est ouverte par le clic (FirebaseMessaging.onMessageOpenedApp).
    // Ces listeners peuvent √™tre mis en place ici ou dans un service FCM d√©di√© qui g√®re aussi le token.
    // S'ils sont mis ici, assure-toi de les nettoyer (annuler la subscription) dans la m√©thode dispose().

    // --- D√âBUT DU BLOC LISTENERS FCM ACTIFS ---
    // Ces listeners g√®rent les messages FCM quand l'app est au premier plan ou en arri√®re-plan actif.

    // debugLog("üîî FCM onMessageOpenedApp listener enregistr√©", level: 'INFO');
  } // <-- Fin de la m√©thode initState de _MyAppState

  // --- FIN   DU BLOC 08 ---

  // --- DEBUT DU BLOC 09 ---

  // Nettoyage des listeners pour √©viter les fuites de m√©moire

  // --- FIN   DU BLOC 09 ---

  // --- DEBUT DU BLOC 10 ---

  @override
  Widget build(BuildContext context) {
    // StreamBuilder √©coute les changements de l'√©tat d'authentification Firebase (connexion/d√©connexion)
    // Il est d√©j√† correct pour d√©terminer l'√©cran initial.
    return MaterialApp(
      debugShowCheckedModeBanner: false,
        title: 'Jela', // TODO: Utiliser getUILabel pour le titre de l'app ?
        theme: ThemeData(useMaterial3: true), // TODO: Configurer le th√®me global ici
        // AJOUTE CETTE LIGNE : Assigne le Navigator Key global √† ton MaterialApp
        navigatorKey: getIt<GlobalKey<NavigatorState>>(), // <-- Utilisation de getIt ici
    //navigatorKey: navigatorKey, // <-- AJOUTEZ CETTE LIGNE (Ancienne ligne √† commenter ou supprimer)

    // Utilise le StreamBuilder sur l'√©tat d'authentification pour d√©cider de l'√©cran de d√©part
    home: StreamBuilder<User?>(
    stream: FirebaseAuth.instance.authStateChanges(), // Le stream qui √©met l'utilisateur actuel ou null
    builder: (context, snapshot) {
    // Afficher un indicateur de chargement pendant que l'√©tat d'auth est d√©termin√©
    if (snapshot.connectionState == ConnectionState.waiting) {
            debugLog("‚è≥ Attente √©tat d'authentification Firebase...", level: 'DEBUG');
            return const Scaffold(
              body: Center(
                child: CircularProgressIndicator(color: Colors.pink),
              ),
            );
          }

          // R√©cup√©rer l'utilisateur connect√© (ou null s'il n'y en a pas)
          final User? user = snapshot.data;
          debugLog("üë§ √âtat actuel de l'utilisateur : ${user == null ? 'D√©connect√©' : 'Connect√© (UID: ${user.uid})'}", level: 'INFO');

          // Si un utilisateur est connect√©...
          if (user != null) {
            // V√©rifier si son email est v√©rifi√©
            if (!user.emailVerified) {
              debugLog("üîí Email non v√©rifi√© ‚Äî Redirection vers EmailVerificationScreen", level: 'WARNING');
              // Rediriger vers l'√©cran de v√©rification email.
              // Cet √©cran n'a plus besoin du deviceId, mais de la langue. L'UID est accessible via FirebaseAuth.currentUser.
              return EmailVerificationScreen(
                // deviceId: widget.deviceId, // <-- SUPPRIM√â
                deviceLang: widget.deviceLang,
              );
            }

            // Si l'email est v√©rifi√©, v√©rifier si un appairage initial via deep link a eu lieu et a r√©ussi.
            if (_showPairSuccess && widget.initialPairSuccessRecipientUid != null) {
              debugLog("üéâ Affichage temporaire de PairSuccessScreen", level: 'INFO');
              // Afficher l'√©cran de succ√®s d'appairage.
              // On lui passe l'UID de l'autre utilisateur, pas l'ancien deviceId.
              return PairSuccessScreen(recipientUid: widget.initialPairSuccessRecipientUid!);
            }

            // Si l'utilisateur est connect√©, email v√©rifi√©, et pas d'√©cran de succ√®s temporaire :
            // Afficher l'√©cran principal (HomeSelector).
            // HomeSelector n'a plus besoin du deviceId. Il devra acc√©der √† l'UID via FirebaseAuth.currentUser.
            debugLog("‚û°Ô∏è Redirection vers HomeSelector pour UID ${user.uid}", level: 'INFO');
            return HomeSelector(
              // deviceId: widget.deviceId, // <-- SUPPRIM√â
              deviceLang: widget.deviceLang,
              // HomeSelector devra charger les donn√©es de l'utilisateur connect√© (bas√© sur user.uid)
              // et ses destinataires (bas√© sur user.uid)
            );

          } else {
            // Si aucun utilisateur n'est connect√© :
            // Rediriger vers l'√©cran de connexion.
            // LoginScreen n'a plus besoin du deviceId, juste de la langue.
            debugLog("‚û°Ô∏è Redirection vers LoginScreen (aucun utilisateur connect√©)", level: 'INFO');
            return LoginScreen(
              deviceLang: widget.deviceLang,
              // deviceId: widget.deviceId, // <-- SUPPRIM√â
              // LoginScreen g√©rera la connexion et l'inscription via Firebase Auth.
            );
          }
        },
      ),
    );
  } // <-- Fin de la m√©thode build de _MyAppState
} // <-- Fin de la classe _MyAppState

// --- FIN   DU BLOC 10 ---

// --- DEBUT DU BLOC 11 ---

// √âcran temporaire pour montrer le succ√®s de l'appairage via deep link.
// Il affiche maintenant l'UID de l'autre utilisateur.
class PairSuccessScreen extends StatelessWidget {
  // Re√ßoit l'UID de l'autre utilisateur (l'inviteur) qui a √©t√© appair√©.
  final String recipientUid; // Renomm√© de recipientId pour refl√©ter qu'il s'agit de l'UID

  const PairSuccessScreen({super.key, required this.recipientUid});

  @override
  Widget build(BuildContext context) {
    // TODO: Afficher le pr√©nom de l'autre utilisateur au lieu de son UID pour une meilleure exp√©rience.
    // Cela n√©cessiterait de charger le profil de cet UID depuis Firestore dans ce widget.
    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.check_circle_outline, color: Colors.white, size: 80),
            const SizedBox(height: 20),
            const Text("‚úÖ Appairage r√©ussi !", // TODO: Utiliser getUILabel
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.white, fontSize: 22)),
            const SizedBox(height: 10),
            // Afficher l'UID de l'autre utilisateur (temporaire, afficher le nom serait mieux)
            Text(
              "Appair√© avec (UID) : $recipientUid", // TODO: Afficher le nom r√©el de l'autre utilisateur
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.white70, fontSize: 16),
            ),
            const SizedBox(height: 40),
            const CircularProgressIndicator(color: Colors.white),
            const SizedBox(height: 20),
            const Text("Redirection vers l'application...", // TODO: Utiliser getUILabel
                style: TextStyle(color: Colors.white70, fontSize: 14)),
          ],
        ),
      ),
    );
  }
} // <-- Fin de la classe PairSuccessScreen

// --- FIN   DU BLOC 11 ---

// --- DEBUT DU BLOC 12 ---

// TOP LEVEL FUNCTION: Recommand√©e pour la gestion des clics sur notifications locales depuis l'√©tat TERMIN√â sur Android >= 13
// Elle DOIT √™tre d√©clar√©e en dehors de toute classe ou fonction
// Le d√©corateur @pragma('vm:entry-point') est crucial pour les versions r√©centes de Flutter/Dart.
@pragma('vm:entry-point')
Future<void> onDidReceiveBackgroundNotificationResponse(
    NotificationResponse notificationResponse) async {
  debugLog("üîî [MAIN - BG NOTIF CLICK] Clic sur notification (termin√©e, Android 13+). Payload: ${notificationResponse.payload}", level: 'INFO');

  // Assurer que Firebase est initialis√©, car cette fonction peut s'ex√©cuter en dehors du contexte principal
  // o√π main() a √©t√© appel√©. V√©rifier Firebase.apps.isEmpty est une bonne pratique pour √©viter la double initialisation.
  // On utilise un try-catch car cette initialisation pourrait √©chouer dans des cas extr√™mes.
  try {
    if (Firebase.apps.isEmpty) {
      await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
      debugLog("üñô [MAIN - BG NOTIF CLICK] Firebase initialis√©.", level: 'INFO');
    }
  } catch (e) {
    debugLog("‚ùå [MAIN - BG NOTIF CLICK] Erreur lors de l'initialisation de Firebase : $e", level: 'ERROR');
    // Si Firebase ne s'initialise pas, nous ne pouvons pas charger les donn√©es ou naviguer, on s'arr√™te ici.
    return; // Sortie pr√©coce
  }


  final String? senderUid = notificationResponse.payload; // Le payload de la notification locale est l'UID de l'exp√©diteur

  // S'assurer que le payload contient bien un UID valide et que l'utilisateur actuel est connect√©.
  // Pour un lancement depuis l'√©tat termin√© via ce handler, l'utilisateur DEVRAIT √™tre connect√© (sinon LoginScreen s'affiche en premier),
  // mais une v√©rification est plus robuste.
  final User? currentUser = FirebaseAuth.instance.currentUser;

  if (senderUid != null && senderUid.isNotEmpty && currentUser != null && currentUser.uid != senderUid) {
    debugLog('‚û°Ô∏è [MAIN - BG NOTIF CLICK] Tentative de navigation vers conversation avec $senderUid', level: 'INFO');

    // Utilise CurrentUserService pour obtenir les donn√©es de l'utilisateur actuel.
    // Pour ce handler sp√©cifique (Android 13+, termin√©), CurrentUserService N'EST PAS initialis√© par HomeSelector
    // CAR HomeSelector ne sera pas affich√© AVANT la navigation d√©clench√©e ici.
    // C'est une limite de cette approche Singleton simple dans ce sc√©nario pr√©cis.
    // Cependant, pour les besoins de la d√©mo et si les valeurs isReceiver/deviceLang ne changent pas souvent
    // APRES la connexion, tu pourrais les relire ici ou accepter une valeur par d√©faut.
    // Relire Firestore pour isReceiver/deviceLang est possible mais moins performant.
    // Pour l'instant, utilisons la langue du syst√®me comme fallback si CurrentUserService n'est pas fiable √† ce stade.
    // La variable 'isReceiver' est plus probl√©matique. Elle DOIT venir des donn√©es utilisateur.
    // TODO: Id√©alement, CurrentUserService devrait √™tre initialisable plus t√¥t ou ses donn√©es devraient √™tre stock√©es
    // de mani√®re persistante et charg√©es tr√®s t√¥t dans main().
    // Pour l'instant, nous allons LIRE la langue et isReceiver depuis Firestore ICI.
    // C'est moins propre que via CurrentUserService, mais n√©cessaire si ce handler s'ex√©cute AVANT HomeSelector.

    String currentUserDeviceLang = PlatformDispatcher.instance.locale.languageCode; // Fallback sur langue syst√®me
    bool currentUserIsReceiver = false; // Valeur par d√©faut prudente

    try {
      final userDoc = await FirebaseFirestore.instance.collection('users').doc(currentUser.uid).get();
      if (userDoc.exists) {
        final userData = userDoc.data();
        currentUserIsReceiver = userData?['isReceiver'] == true;
        // Tu pourrais aussi stocker la langue pr√©f√©r√©e de l'utilisateur dans son doc si tu ne veux pas utiliser PlatformDispatcher
        // currentUserDeviceLang = userData?['deviceLang'] ?? PlatformDispatcher.instance.locale.languageCode;
        debugLog("‚úÖ [MAIN - BG NOTIF CLICK] Donn√©es utilisateur (isReceiver) charg√©es depuis Firestore pour navigation.", level: 'INFO');
      } else {
        debugLog("‚ö†Ô∏è [MAIN - BG NOTIF CLICK] Document utilisateur actuel (${currentUser.uid}) non trouv√© pour charger isReceiver.", level: 'WARNING');
      }
    } catch (e) {
      debugLog("‚ùå [MAIN - BG NOTIF CLICK] Erreur lors du chargement des donn√©es utilisateur pour navigation : $e", level: 'ERROR');
    }

    Recipient? recipientDetails; // Initialise √† null

    try {
      // Charger les d√©tails du destinataire depuis la sous-collection 'recipients' de l'utilisateur actuel
      final recipientSnap = await FirebaseFirestore.instance
          .collection('users')
          .doc(currentUser.uid) // UID de l'utilisateur actuellement connect√©
          .collection('recipients')
          .doc(senderUid) // L'UID du document est l'UID de l'exp√©diteur (le destinataire de notre point de vue)
          .get();

      if (recipientSnap.exists) {
        final data = recipientSnap.data();
        recipientDetails = Recipient(
          id: senderUid, // L'UID du destinataire (l'exp√©diteur du message)
          displayName: data?['displayName'] ?? 'Inconnu', // Nom d'affichage du destinataire (si trouv√© dans Firestore)
          icon: data?['icon'] ?? 'üí¨', // Ic√¥ne par d√©faut si non trouv√©e
          relation: data?['relation'] ?? 'relation_partner', // Relation par d√©faut si non trouv√©e
          allowedPacks: (data?['allowedPacks'] as List?)?.cast<String>() ?? [], // G√©rer la liste
          paired: data?['paired'] == true, // G√©rer le bool√©en
          catalogType: data?['catalogType'] ?? 'partner', // Type de catalogue
          createdAt: data?['createdAt'] as Timestamp?, // Timestamp
        );
        debugLog("‚úÖ [MAIN - BG NOTIF CLICK] D√©tails destinataire ($senderUid) charg√©s pour navigation.", level: 'INFO');

      } else {
        debugLog("‚ö†Ô∏è [MAIN - BG NOTIF CLICK] Destinataire ($senderUid) non trouv√© dans la liste de l'utilisateur actuel (${currentUser.uid}) pour navigation.", level: 'WARNING');
        // Optionnel: Naviguer vers l'√©cran principal ou afficher un message si le destinataire n'est pas appair√©.
        // navigatorKey.currentState?.pushReplacementNamed('/');
      }
    } catch (e) {
      debugLog("‚ùå [MAIN - BG NOTIF CLICK] Erreur lors du chargement des d√©tails du destinataire ($senderUid) pour navigation : $e", level: 'ERROR');
      // G√©rer l'erreur (ex: ne pas naviguer, afficher un message d'erreur)
    }

    if (recipientDetails != null) {
      // Utilise le navigatorKey global pour naviguer.
      // Utiliser Future.delayed(Duration.zero) est une bonne pratique pour s'assurer
      // que la navigation est pouss√©e apr√®s que l'UI initiale potentielle (comme un SplashScreen)
      // soit rendue, mais AVANT que le reste de l'app ne soit compl√®tement charg√©.
      Future.delayed(Duration.zero, () {
        // ‚õîÔ∏è √Ä supprimer - acc√®s direct √† navigatorKey - remplac√© par getIt - 2025/06/12
        // navigatorKey.currentState?.push(MaterialPageRoute(
        getIt<GlobalKey<NavigatorState>>().currentState?.push(MaterialPageRoute(
          builder: (context) => RecipientDetailsScreen(
            deviceLang: currentUserDeviceLang, // Langue - lue depuis Firestore ou PlatformDispatcher
            recipient: recipientDetails!, // Objet Recipient charg√©
            isReceiver: currentUserIsReceiver, // R√¥le de l'utilisateur actuel - lu depuis Firestore
          ),
        ));
        debugLog("‚û°Ô∏è [MAIN - BG NOTIF CLICK] Navigation vers RecipientDetailsScreen r√©ussie pour UID destinataire $senderUid", level: 'INFO');
      });


    } else {
      debugLog("‚ö†Ô∏è [MAIN - BG NOTIF CLICK] Navigation vers RecipientDetailsScreen annul√©e car d√©tails destinataire non charg√©s ou introuvables.", level: 'WARNING');
      // Optionnel : Naviguer vers l'√©cran principal si la navigation cibl√©e √©choue
      // Future.delayed(Duration.zero, () {
      //   navigatorKey.currentState?.pushReplacementNamed('/');
      // });
    }

  } else {
    // Cas o√π senderUid est invalide, currentUser est null, ou clic sur sa propre notification
    if (currentUser == null) {
      debugLog("‚ö†Ô∏è [MAIN - BG NOTIF CLICK] Utilisateur actuel null. Impossible de naviguer post-notification locale.", level: 'WARNING');
      // Le flux normal de l'app devrait ramener l'utilisateur √† l'√©cran de connexion via le StreamBuilder.
    } else if (senderUid == null || senderUid.isEmpty) {
      debugLog('‚ö†Ô∏è [MAIN - BG NOTIF CLICK] Payload senderId manquant ou invalide dans la r√©ponse de notification. Pas de navigation cibl√©e.', level: 'WARNING');
      // L'app continuera son flux normal.
    } else if (currentUser.uid == senderUid) {
      debugLog("‚ö†Ô∏è [MAIN - BG NOTIF CLICK] Clic sur notification de soi-m√™me ($senderUid). Pas de navigation cibl√©e.", level: 'INFO');
      // Ne rien faire ou naviguer vers l'√©cran principal.
      // Future.delayed(Duration.zero, () {
      //   navigatorKey.currentState?.pushReplacementNamed('/');
      // });
    }
  }
}

// --- FIN   DU BLOC 12 ---

// =============================================================
// üéØ TODO REFAC : D√©coupler les responsabilit√©s de main.dart
// =============================================================
// `main.dart` g√®re actuellement Firebase Init, Auth State, Deep Links,
// Appairage (`pairUsers`), FCM Config & Listeners, Navigation globale.
//
// √Ä terme, envisager de d√©l√©guer ces logiques √† des services d√©di√©s
// (ex: `FcmService`, `DeepLinkService`, `PairingService`) pour
// am√©liorer la modularit√© et la maintenabilit√© du code.
// =============================================================

// üìÑ FIN de lib/main.dart
