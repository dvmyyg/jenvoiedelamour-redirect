// -------------------------------------------------------------
// üìÑ FICHIER : lib/utils/service_locator.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Configure le conteneur d'injection de d√©pendances (get_it).
// ‚úÖ Enregistre les instances singleton des services (AuthService, FirestoreService, FcmService).
// ‚úÖ RecipientService est temporairement non enregistr√© car son constructeur n√©cessite un UID utilisateur.
// ‚úÖ Enregistre les instances singleton de ressources globales (GlobalKey<NavigatorState>, FlutterLocalNotificationsPlugin).
// ‚úÖ Permet d'acc√©der aux services et ressources via getIt<T>().
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V002 - Comment√© l'enregistrement de RecipientService pour corriger l'erreur de type, car son constructeur attend une String (UID utilisateur) et non FirestoreService. - 2025/06/12 15h30
// V001 - Cr√©ation du fichier et configuration initiale de get_it avec enregistrement des services et ressources existants. - 2025/06/12 HHhMM (Date/heure initiale)
// -------------------------------------------------------------

import 'package:get_it/get_it.dart';
import 'package:flutter/material.dart'; // Pour GlobalKey
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // Pour FlutterLocalNotificationsPlugin

// Importe tes services
import '../services/auth_service.dart';
import '../services/firestore_service.dart';
import '../services/fcm_service.dart';
import '../services/recipient_service.dart'; // L'import reste n√©cessaire pour les types
// import '../services/message_service.dart'; // Ne pas enregistrer, car il est instanci√© par conversation

// ‚≠êÔ∏è Obtient l'instance globale de GetIt
final getIt = GetIt.instance;

// ‚≠êÔ∏è Fonction de configuration du locator
void setupLocator() {
  // Enregistre les services comme Lazy Singletons (cr√©√©s seulement √† la premi√®re demande)
  // Ils n'ont pas encore de d√©pendances inject√©es, on le fera plus tard (√âtape 5)
  getIt.registerLazySingleton<AuthService>(() => AuthService());
  // FirestoreService doit √™tre enregistr√© pour √™tre inject√© dans d'autres services m√©tier (√âtape 5)
  getIt.registerLazySingleton<FirestoreService>(() => FirestoreService());
  // RecipientService d√©pendra de FirestoreService, on injecte d√©j√† ici
  // ‚õîÔ∏è √Ä supprimer/revoir (√âtape 5) : RecipientService n√©cessite un UID utilisateur (String) dans son constructeur, ce qui est incompatible avec un enregistrement LazySingleton standard o√π l'UID n'est pas encore connu.
  // getIt.registerLazySingleton<RecipientService>(() => RecipientService(getIt<FirestoreService>()));
  // FcmService a des d√©pendances (notifs locales, nav key), on les injectera bient√¥t (√âtape 6)
  getIt.registerLazySingleton<FcmService>(() => FcmService());

  // MessageService n'est PAS enregistr√© ici car il est instanci√© par conversation avec des param√®tres sp√©cifiques.
  // Il devra simplement recevoir ses d√©pendances (comme FirestoreService) au moment de sa cr√©ation si n√©cessaire.

  // Enregistre les ressources globales comme Singletons (cr√©√©es tout de suite)
  // Elles sont n√©cessaires t√¥t dans le cycle de vie de l'app (√âtape 1.3).
  getIt.registerSingleton<GlobalKey<NavigatorState>>(GlobalKey<NavigatorState>());
  getIt.registerSingleton<FlutterLocalNotificationsPlugin>(FlutterLocalNotificationsPlugin());


  // TODO: Enregistrer d'autres services ou ressources si n√©cessaire par la suite.
  // Ex: DeepLinkService, NotificationRouter (√âtape 6)
}

// üìÑ FIN de lib/utils/service_locator.dart
