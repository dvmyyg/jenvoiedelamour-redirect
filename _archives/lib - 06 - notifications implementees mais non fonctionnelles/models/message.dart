// -------------------------------------------------------------
// üìÑ FICHIER : lib/models/message.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Mod√®le de donn√©es pour repr√©senter un message dans l'application.
// ‚úÖ Contient les informations essentielles d'un message (exp√©diteur, destinataire, type, contenu, horodatages).
// ‚úÖ Utilise les UID Firebase pour identifier l'exp√©diteur et le destinataire.
// ‚úÖ Fournit des m√©thodes de conversion pour/depuis les Map (format Firestore).
// ‚úÖ Inclut une factory pour cr√©er facilement des messages rapides pr√©d√©finis.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V003 - Remplacement des champs 'from' et 'to' par l'UID Firebase de l'exp√©diteur et du destinataire. - 2025/05/29
// V002 - ajout de la m√©thode statique quick() pour messages rapides - 2025/05/26 20h12
// V001 - cr√©ation du mod√®le de message structur√© avec formes multiples - 2025/05/26 19h18
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/30 // Mise √† jour de la date au 30/05

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:uuid/uuid.dart'; // Ajout de l'import pour g√©n√©rer des UUID

class Message {
  final String id; // L'identifiant unique du message (souvent l'ID du document Firestore si g√©n√©r√© l√†)
  final String from; // UID Firebase de l'exp√©diteur
  final String to; // UID Firebase du destinataire
  final String type;
  final String content;
  final Timestamp sentAt;
  final Timestamp? receivedAt;
  final Timestamp? seenAt;

  Message({
    required this.id,
    required this.from, // <-- Expects Firebase UID
    required this.to,   // <-- Expects Firebase UID
    required this.type,
    required this.content,
    required this.sentAt,
    this.receivedAt,
    this.seenAt,
  });

  // ‚úÖ Factory pour g√©n√©rer un message rapide (‚ù§Ô∏è)
  // Re√ßoit maintenant les UID Firebase pour 'from' et 'to'
  static Message quick({required String from, required String to, required String content}) { // Ajout du param√®tre 'content'
    // Utilisation de Uuid().v4() pour g√©n√©rer un ID unique, plus fiable que l'horodatage
    final id = const Uuid().v4();
    return Message(
      id: id,
      from: from, // UID de l'exp√©diteur
      to: to, // UID du destinataire
      type: 'quick', // Peut-√™tre un type g√©n√©rique 'quick' au lieu de 'heart' si content varie? Ou 'heart' si c'est juste pour le c≈ìur
      content: content, // Le contenu est maintenant pass√© en param√®tre
      sentAt: Timestamp.now(),
      // receivedAt et seenAt sont null par d√©faut
    );
  }

  // ‚úÖ Transformation Firestore ‚Üí objet
  // Lit les UID Firebase depuis les champs 'from' et 'to'
  factory Message.fromMap(String id, Map<String, dynamic> data) {
    // Ajout de v√©rifications ou de valeurs par d√©faut au cas o√π des champs manqueraient (robustesse)
    return Message(
      id: id, // ID du document Firestore
      from: (data['from'] as String?) ?? '', // Utilise ?? '' pour √©viter null si le champ est manquant
      to: (data['to'] as String?) ?? '',     // Utilise ?? '' pour √©viter null si le champ est manquant
      type: (data['type'] as String?) ?? 'text', // Valeur par d√©faut si type est manquant
      content: (data['content'] as String?) ?? '', // Valeur par d√©faut si content est manquant
      sentAt: (data['sentAt'] as Timestamp?) ?? Timestamp.now(), // Valeur par d√©faut si sentAt est manquant
      receivedAt: data['receivedAt'] as Timestamp?, // Peut √™tre null
      seenAt: data['seenAt'] as Timestamp?,         // Peut √™tre null
    );
  }

  // ‚úÖ Transformation objet ‚Üí Firestore
  // √âcrit les UID Firebase dans les champs 'from' et 'to'
  Map<String, dynamic> toMap() {
    // S'assure que les champs obligatoires ne sont pas null avant de cr√©er la map
    // Bien que le constructeur l'exige d√©j√†, c'est une s√©curit√© suppl√©mentaire
    return {
      'from': from, // UID de l'exp√©diteur
      'to': to, // UID du destinataire
      'type': type,
      'content': content,
      'sentAt': sentAt,
      if (receivedAt != null) 'receivedAt': receivedAt,
      if (seenAt != null) 'seenAt': seenAt,
    };
  }

// Optionnel: Ajouter une m√©thode copyWith pour faciliter la modification d'instances
// Message copyWith({
//   String? id,
//   String? from,
//   String? to,
//   String? type,
//   String? content,
//   Timestamp? sentAt,
//   Timestamp? receivedAt,
//   Timestamp? seenAt,
// }) {
//   return Message(
//     id: id ?? this.id,
//     from: from ?? this.from,
//     to: to ?? this.to,
//     type: type ?? this.type,
//     content: content ?? this.content,
//     sentAt: sentAt ?? this.sentAt,
//     receivedAt: receivedAt ?? this.receivedAt,
//     seenAt: seenAt ?? this.seenAt,
//   );
// }
}
// üìÑ FIN de lib/models/message.dart
