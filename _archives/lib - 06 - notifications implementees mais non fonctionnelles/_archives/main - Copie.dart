// -------------------------------------------------------------
// üìÑ lib/main.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Point d'entr√©e principal de l'application Flutter.
// ‚úÖ Initialise Firebase et g√®re l'√©tat d'authentification initial.
// ‚úÖ D√©termine l'√©cran initial affich√© √† l'utilisateur (Login, Email Verification, HomeSelector).
// ‚úÖ G√®re les deep links d'appairage via app_links et d√©clenche la fonction d'appairage.
// ‚úÖ Contient la logique de la fonction d'appairage bilat√©ral 'pairUsers' (bas√©e sur UID).
// ‚úÖ G√®re la langue de l'appareil.
// ‚úÖ Configure la gestion des messages FCM en arri√®re-plan.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V006 - Correction des appels internes √† la fonction 'pairUsers' (anciennement _pairUsers) apr√®s son renommage et sa publicisation. - 2025/05/30
// V005 - Correction des avertissements 'unused_import' et 'local_variable_starts_with_underscore'. - 2025/05/30
// V004 - Refonte majeure : Remplacement de la logique bas√©e sur deviceId par l'UID Firebase pour l'identification utilisateur globale et la navigation initiale.
//      - Suppression de getDeviceId, registerDevice.
//      - Suppression du param√®tre deviceId partout o√π il n'est plus pertinent.
//      - Mise √† jour des param√®tres pass√©s aux √©crans (utilisation de userId/uid au lieu de deviceId).
//      - Adaptation de la gestion des deep links (_pairWith) pour extraire les UID et utiliser la nouvelle structure Firestore (users/{uid}/recipients).
//      - La logique _pairWith suppose maintenant que l'utilisateur RECEVANT le lien est d√©j√† connect√© pour obtenir son UID.
//      - Adaptation de PairSuccessScreen pour potentiellement afficher l'UID du destinataire appair√© (via deep link).
//      - Simplification du flux d'initialisation en attendant l'√©tat Firebase Auth avant de d√©cider de l'√©cran initial. - 2025/05/29
// V003 - Remplacement de la logique bas√©e sur deviceId par l'UID Firebase... (Description pr√©c√©dente incompl√®te)
// V002 - ajout import cloud_firestore pour FirebaseFirestore & SetOptions - 2025/05/24 10h31 (Historique h√©rit√© de LoginScreen / RegisterScreen)
// V001 - version initiale (Historique h√©rit√©)
// -------------------------------------------------------------

// GEM - Code corrig√© par G√©mini le 2025/05/30 // Mise √† jour le 30/05

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Essentiel pour l'authentification bas√©e sur l'utilisateur
import 'package:app_links/app_links.dart'; // Reste pour g√©rer les deep links
import 'dart:ui'; // N√©cessaire pour PlatformDispatcher.instance.locale
import 'dart:async';

// On importe les √©crans principaux. Ils devront maintenant g√©rer l'UID via FirebaseAuth.currentUser
// ou le recevoir en param√®tre si l'action concerne un autre utilisateur.
import 'screens/home_selector.dart';
import 'screens/login_screen.dart'; // √âcran de connexion pour les utilisateurs non connect√©s
import 'screens/email_verification_screen.dart'; // √âcran de v√©rification pour les nouveaux comptes
// import 'screens/recipients_screen.dart'; // Pour potentiellement afficher le succ√®s de l'appairage

// On supprime l'import de l'ancien device_service.dart car on n'utilise plus getDeviceId
// import 'services/device_service.dart'; // <-- SUPPRIM√â
// On supprime l'import de firestore_service pour l'ancienne fonction registerDevice
// import 'services/firestore_service.dart'; // <-- SUPPRIM√â (car registerDevice est supprim√© ou d√©plac√©)

import 'firebase_options.dart';
import 'utils/debug_log.dart'; // Votre utilitaire de log

// Gestion des messages FCM en arri√®re-plan
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // Assurer que Firebase est initialis√©, car cette fonction peut s'ex√©cuter en dehors du contexte principal
  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  }
  debugLog("üñô [FCM-BG] Message re√ßu en arri√®re-plan : ${message.messageId}", level: 'INFO');
  // TODO: Ajouter ici la logique de gestion de la notification si n√©cessaire (ex: sauvegarder dans Firestore, afficher une notification locale, etc.)
}

// Capture et gestion des liens d'appairage via app_links.
// Cette fonction suppose maintenant que l'utilisateur est CONNECT√â lorsqu'il clique sur un lien d'appairage.
// Le lien devrait contenir l'UID Firebase de l'inviteur ('recipient' est l'inviteur).
Future<String?> handleAppLinks() async {
  final AppLinks appLinks = AppLinks();

  // √âcoute des liens d'appairage √† chaud pendant que l'app est ouverte
  appLinks.uriLinkStream.listen((Uri? uri) async {
    final User? currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser != null && uri != null && uri.queryParameters.containsKey('recipient')) {
      final String? recipientInviterUid = uri.queryParameters['recipient']; // C'est l'UID de l'inviteur
      if (recipientInviterUid != null && recipientInviterUid.isNotEmpty && currentUser.uid != recipientInviterUid) {
        debugLog("üì® AppLink (stream) ‚Üí Inviteur UID=$recipientInviterUid", level: 'INFO');
        // Tente d'appairer cet utilisateur (currentUser.uid) avec l'inviteur (recipientInviterUid)
        final String? pairedWithUid = await pairUsers(recipientInviterUid, currentUser.uid);
        if (pairedWithUid != null) {
          debugLog("‚úÖ Appairage stream r√©ussi avec UID $pairedWithUid", level: 'SUCCESS');
          // TODO: Potentiellement naviguer vers l'√©cran de succ√®s ou rafra√Æchir la liste des destinataires
        }
      } else {
        debugLog("‚ö†Ô∏è AppLink stream re√ßu mais utilisateur non connect√©, ou lien invalide, ou auto-appairage.", level: 'WARNING');
      }
    }
  });

  // V√©rification d'un lien d'appairage initial lors du d√©marrage de l'app
  final Uri? initialUri = await appLinks.getInitialAppLink();
  final User? currentUser = FirebaseAuth.instance.currentUser;
  if (currentUser != null && initialUri != null && initialUri.queryParameters.containsKey('recipient')) {
    final String? recipientInviterUid = initialUri.queryParameters['recipient']; // C'est l'UID de l'inviteur
    if (recipientInviterUid != null && recipientInviterUid.isNotEmpty && currentUser.uid != recipientInviterUid) {
      debugLog("üì® AppLink (initial) ‚Üí Inviteur UID=$recipientInviterUid", level: 'INFO');
      // Tente d'appairer cet utilisateur (currentUser.uid) avec l'inviteur (recipientInviterUid)
      final String? pairedWithUid = await pairUsers(recipientInviterUid, currentUser.uid);
      if (pairedWithUid != null) {
        debugLog("‚úÖ Appairage initial r√©ussi avec UID $pairedWithUid", level: 'SUCCESS');
        return pairedWithUid; // Retourne l'UID du destinataire appair√© pour affichage initial
      }
    } else {
      debugLog("‚ö†Ô∏è AppLink initial re√ßu mais utilisateur non connect√©, ou lien invalide, ou auto-appairage.", level: 'WARNING');
    }
  }

  return null; // Aucun appairage initial via lien
}

// Fonction d'appairage bilat√©ral entre deux utilisateurs (identifi√©s par UID)
// Met √† jour les collections 'recipients' sous les UID des deux utilisateurs dans Firestore.
// userAId est l'UID de l'utilisateur qui a partag√© le lien (l'inviteur)
// userBId est l'UID de l'utilisateur qui a cliqu√© sur le lien (l'invit√©, l'utilisateur actuel)
Future<String?> pairUsers(String userAId, String userBId) async {
  if (userAId.isEmpty || userBId.isEmpty || userAId == userBId) {
    debugLog("‚ö†Ô∏è Appairage tent√© avec UID(s) invalide(s) ou auto-appairage.", level: 'WARN');
    return null;
  }
  try {
    final FirebaseFirestore firestore = FirebaseFirestore.instance;

    // R√©cup√©rer les noms d'affichage des deux utilisateurs pour les mettre dans les objets Recipient
    final userASnap = await firestore.collection('users').doc(userAId).get();
    final userADisplayName = userASnap.data()?['firstName'] ?? 'Utilisateur A'; // Default name
    final userBSnap = await firestore.collection('users').doc(userBId).get();
    final userBDisplayName = userBSnap.data()?['firstName'] ?? 'Utilisateur B'; // Default name


    // 1. Ajouter l'utilisateur B comme destinataire chez l'utilisateur A
    // Chemin : users/{userAId}/recipients/{userBId}
    await firestore
        .collection('users')
        .doc(userAId)
        .collection('recipients')
        .doc(userBId) // ID du document est l'UID de l'autre utilisateur
        .set({
      'id': userBId, // Inclure l'UID aussi comme champ pour faciliter les requ√™tes futures si besoin
      'displayName': userBDisplayName, // Le nom de l'utilisateur B vu par A
      'icon': 'üíå', // Ic√¥ne par d√©faut
      'relation': 'relation_partner', // Relation par d√©faut
      'allowedPacks': [], // Packs par d√©faut
      'paired': true, // Marqu√© comme appair√©
      'catalogType': 'partner', // Type de catalogue par d√©faut
      'createdAt': FieldValue.serverTimestamp(), // Horodatage de cr√©ation
    }, SetOptions(merge: true)); // Utilise merge pour ne pas √©craser d'autres champs si le doc existe d√©j√†

    // 2. Ajouter l'utilisateur A comme destinataire chez l'utilisateur B
    // Chemin : users/{userBId}/recipients/{userAId}
    await firestore
        .collection('users')
        .doc(userBId)
        .collection('recipients')
        .doc(userAId) // ID du document est l'UID de l'autre utilisateur
        .set({
      'id': userAId, // Inclure l'UID aussi comme champ
      'displayName': userADisplayName, // Le nom de l'utilisateur A vu par B
      'icon': 'üíå', // Ic√¥ne par d√©faut
      'relation': 'relation_partner', // Relation par d√©faut
      'allowedPacks': [], // Packs par d√©faut
      'paired': true, // Marqu√© comme appair√©
      'catalogType': 'partner', // Type de catalogue par d√©faut
      'createdAt': FieldValue.serverTimestamp(), // Horodatage de cr√©ation
    }, SetOptions(merge: true));

    debugLog("‚úÖ Appairage r√©ussi entre UID $userAId et UID $userBId", level: 'SUCCESS');
    return userAId; // Retourne l'UID de l'inviteur pour confirmation
  } catch (e) {
    debugLog("‚ùå Erreur d‚Äôappairage Firestore entre $userAId et $userBId : $e", level: 'ERROR');
    // TODO: G√©rer cette erreur (afficher message √† l'utilisateur ?)
    return null;
  }
} // <-- Fin de la fonction _pairUsers

// TODO: Cette variable 'isReceiver' semble √™tre une propri√©t√© de l'utilisateur plut√¥t que globale.
// Elle devrait probablement √™tre stock√©e dans le document users/{uid} et g√©r√©e par une fonction dans firestore_service.
// Pour l'instant, on la laisse comme une constante locale mais il faudra la reconsid√©rer.
const bool isReceiver = true; // TODO: Cette variable est-elle toujours pertinente au niveau global ou devrait-elle √™tre stock√©e par utilisateur ?

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialiser Firebase (important avant d'utiliser Firebase Auth ou Firestore)
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  debugLog("‚ú® Firebase initialis√©", level: 'INFO');

  // Attendre que Firebase Auth r√©cup√®re l'√©tat de connexion persistant
  // Cela √©vite d'afficher l'√©cran de connexion bri√®vement si l'utilisateur est d√©j√† connect√©.
  await FirebaseAuth.instance.authStateChanges().first;
  debugLog("üë§ √âtat d'auth Firebase synchronis√©", level: 'INFO');

  // On ne g√©n√®re PLUS de deviceId ici et on ne le passe PLUS √† MyApp.
  // L'identifiant est l'UID de l'utilisateur Firebase, accessible via FirebaseAuth.instance.currentUser?.uid.
  // final deviceId = await getDeviceId(); // <-- SUPPRIM√â

  // La langue du t√©l√©phone reste utile pour l'internationalisation et peut √™tre r√©cup√©r√©e ind√©pendamment de l'identifiant utilisateur.
    final String deviceLang = PlatformDispatcher.instance.locale.languageCode; // La langue reste importante

  // On ne loggue PLUS le deviceId comme identifiant principal ici
  debugLog("üåê Langue du t√©l√©phone : $deviceLang", level: 'INFO');
  // debugLog("üîñ Device ID : $deviceId", level: 'INFO'); // <-- SUPPRIM√â

  // On n'appelle PLUS registerDevice ici car on utilise l'UID Firebase
  // await registerDevice(deviceId, isReceiver); // <-- SUPPRIM√â

  // Configurer la gestion des messages FCM en arri√®re-plan d√®s que possible
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // TODO: G√©rer la sauvegarde/mise √† jour du token FCM. Le token est li√© √† l'installation de l'appli sur cet appareil,
  // mais il est g√©n√©ralement utile de l'associer √† l'UID de l'utilisateur *connect√©* pour pouvoir lui envoyer des notifications cibl√©es sur CET appareil.
  // Cela n√©cessiterait une fonction dans un service (ex: FirestoreService ou un nouveau service FCM)
  // qui prendrait l'UID de l'utilisateur actuel et le token FCM et l'enregistrerait dans Firestore
  // (par exemple, sous users/{uid}/fcmTokens/{thisDeviceToken}).
  // final token = await FirebaseMessaging.instance.getToken();
  // debugLog("ü™™ FCM Token: $token", level: 'INFO');
  // Si l'utilisateur est connect√© √† ce point (apr√®s authStateChanges().first), on peut tenter de sauvegarder le token :
  // final User? currentUser = FirebaseAuth.instance.currentUser;
  // if (currentUser != null && token != null) {
  //   await saveFcmTokenForUser(currentUser.uid, token); // Cette fonction doit √™tre cr√©√©e.
  // }


  // G√©rer les liens d'appairage initiaux (deep links) AVANT de lancer l'UI.
  // handleAppLinks suppose que l'utilisateur est d√©j√† connect√©. Si initialPairedRecipientUid n'est pas null,
  // cela signifie qu'un deep link d'appairage a √©t√© cliqu√© ET que l'utilisateur √©tait d√©j√† connect√© (ou s'est connect√© automatiquement).
  // initialPairedRecipientUid contiendra l'UID de l'inviteur si l'appairage via lien a r√©ussi.
  final String? initialPairedRecipientUid = await handleAppLinks();


  // Lance l'application principale (le widget racine de l'UI).
  // MyApp n'a plus besoin de recevoir le deviceId. Il peut recevoir la langue et l'info sur l'appairage initial.
  runApp(MyApp(
    // deviceId: deviceId, // <-- SUPPRIM√â du constructeur de MyApp
    deviceLang: deviceLang, // La langue reste pertinente
    // On passe l'UID de l'autre utilisateur si un appairage via deep link a r√©ussi au d√©marrage
    initialPairSuccessRecipientUid: initialPairedRecipientUid,
  ));
}

// Le widget racine de l'application.
// Utilise StreamBuilder pour √©couter l'√©tat d'authentification Firebase et d√©cider quel √©cran afficher.
class MyApp extends StatefulWidget {
  // Le deviceId n'est plus requis, car l'identit√© de l'utilisateur est g√©r√©e par Firebase Auth.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste un param√®tre utile
  // Le param√®tre initialPairSuccessRecipientId est maintenant l'UID de l'autre utilisateur
  final String? initialPairSuccessRecipientUid;


  const MyApp({
    super.key,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
    required this.deviceLang,
    this.initialPairSuccessRecipientUid, // Optionnel, utilis√© si un appairage initial via lien a eu lieu
  });

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // Indicateur pour afficher temporairement l'√©cran de succ√®s d'appairage si d√©clench√© par un lien au d√©marrage
  bool _showPairSuccess = false;

  @override
  void initState() {
    super.initState();
    // Si un appairage initial via deep link a r√©ussi (UID de l'autre utilisateur re√ßu)
    if (widget.initialPairSuccessRecipientUid != null) {
      debugLog("üöÄ D√©clenchement de l'affichage de l'√©cran succ√®s appairage pour UID ${widget.initialPairSuccessRecipientUid}", level: 'INFO');
      _showPairSuccess = true;
      // Afficher l'√©cran de succ√®s pendant quelques secondes, puis masquer
      Timer(const Duration(seconds: 4), () { // Augment√© l√©g√®rement le d√©lai pour une meilleure lecture
        if (mounted) {
          debugLog("‚è≥ Fin de l'affichage de l'√©cran succ√®s", level: 'INFO');
          setState(() => _showPairSuccess = false);
          // TODO: Potentiellement, apr√®s l'√©cran de succ√®s, naviguer vers l'√©cran des destinataires
          // ou rafra√Æchir la liste sur l'√©cran principal si on y retourne automatiquement.
          // Pour l'instant, masquer l'√©cran de succ√®s ram√®ne √† l'√©cran d√©termin√© par authStateChanges (HomeSelector si connect√©).
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // StreamBuilder √©coute les changements de l'√©tat d'authentification Firebase (connexion/d√©connexion)
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Jela', // TODO: Utiliser getUILabel pour le titre de l'app ?
      theme: ThemeData(useMaterial3: true), // TODO: Configurer le th√®me global ici
      // Utilise le StreamBuilder sur l'√©tat d'authentification pour d√©cider de l'√©cran de d√©part
      home: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(), // Le stream qui √©met l'utilisateur actuel ou null
        builder: (context, snapshot) {
          // Afficher un indicateur de chargement pendant que l'√©tat d'auth est d√©termin√©
          if (snapshot.connectionState == ConnectionState.waiting) {
            debugLog("‚è≥ Attente √©tat d'authentification Firebase...", level: 'DEBUG');
            return const Scaffold(
              body: Center(
                child: CircularProgressIndicator(color: Colors.pink),
              ),
            );
          }

          // R√©cup√©rer l'utilisateur connect√© (ou null s'il n'y en a pas)
          final User? user = snapshot.data;
          debugLog("üë§ √âtat actuel de l'utilisateur : ${user == null ? 'D√©connect√©' : 'Connect√© (UID: ${user.uid})'}", level: 'INFO');

          // Si un utilisateur est connect√©...
          if (user != null) {
            // V√©rifier si son email est v√©rifi√©
            if (!user.emailVerified) {
              debugLog("üîí Email non v√©rifi√© ‚Äî Redirection vers EmailVerificationScreen", level: 'WARNING');
              // Rediriger vers l'√©cran de v√©rification email.
              // Cet √©cran n'a plus besoin du deviceId, mais de la langue. L'UID est accessible via FirebaseAuth.currentUser.
              return EmailVerificationScreen(
                // deviceId: widget.deviceId, // <-- SUPPRIM√â
                deviceLang: widget.deviceLang,
              );
            }

            // Si l'email est v√©rifi√©, v√©rifier si un appairage initial via deep link a eu lieu et a r√©ussi.
            if (_showPairSuccess && widget.initialPairSuccessRecipientUid != null) {
              debugLog("üéâ Affichage temporaire de PairSuccessScreen", level: 'INFO');
              // Afficher l'√©cran de succ√®s d'appairage.
              // On lui passe l'UID de l'autre utilisateur, pas l'ancien deviceId.
              return PairSuccessScreen(recipientUid: widget.initialPairSuccessRecipientUid!);
            }

            // Si l'utilisateur est connect√©, email v√©rifi√©, et pas d'√©cran de succ√®s temporaire :
            // Afficher l'√©cran principal (HomeSelector).
            // HomeSelector n'a plus besoin du deviceId. Il devra acc√©der √† l'UID via FirebaseAuth.currentUser.
            debugLog("‚û°Ô∏è Redirection vers HomeSelector pour UID ${user.uid}", level: 'INFO');
            return HomeSelector(
              // deviceId: widget.deviceId, // <-- SUPPRIM√â
              deviceLang: widget.deviceLang,
              // HomeSelector devra charger les donn√©es de l'utilisateur connect√© (bas√© sur user.uid)
              // et ses destinataires (bas√© sur user.uid)
            );

          } else {
            // Si aucun utilisateur n'est connect√© :
            // Rediriger vers l'√©cran de connexion.
            // LoginScreen n'a plus besoin du deviceId, juste de la langue.
            debugLog("‚û°Ô∏è Redirection vers LoginScreen (aucun utilisateur connect√©)", level: 'INFO');
            return LoginScreen(
              deviceLang: widget.deviceLang,
              // deviceId: widget.deviceId, // <-- SUPPRIM√â
              // LoginScreen g√©rera la connexion et l'inscription via Firebase Auth.
            );
          }
        },
      ),
    );
  } // <-- Fin de la m√©thode build de _MyAppState
} // <-- Fin de la classe _MyAppState

// √âcran temporaire pour montrer le succ√®s de l'appairage via deep link.
// Il affiche maintenant l'UID de l'autre utilisateur.
class PairSuccessScreen extends StatelessWidget {
  // Re√ßoit l'UID de l'autre utilisateur (l'inviteur) qui a √©t√© appair√©.
  final String recipientUid; // Renomm√© de recipientId pour refl√©ter qu'il s'agit de l'UID

  const PairSuccessScreen({super.key, required this.recipientUid});

  @override
  Widget build(BuildContext context) {
    // TODO: Afficher le pr√©nom de l'autre utilisateur au lieu de son UID pour une meilleure exp√©rience.
    // Cela n√©cessiterait de charger le profil de cet UID depuis Firestore dans ce widget.
    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.check_circle_outline, color: Colors.white, size: 80),
            const SizedBox(height: 20),
            const Text("‚úÖ Appairage r√©ussi !", // TODO: Utiliser getUILabel
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.white, fontSize: 22)),
            const SizedBox(height: 10),
            // Afficher l'UID de l'autre utilisateur (temporaire, afficher le nom serait mieux)
            Text(
              "Appair√© avec (UID) : $recipientUid", // TODO: Afficher le nom r√©el de l'autre utilisateur
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.white70, fontSize: 16),
            ),
            const SizedBox(height: 40),
            const CircularProgressIndicator(color: Colors.white),
            const SizedBox(height: 20),
            const Text("Redirection vers l'application...", // TODO: Utiliser getUILabel
                style: TextStyle(color: Colors.white70, fontSize: 14)),
          ],
        ),
      ),
    );
  }
} // <-- Fin de la classe PairSuccessScreen

// üìÑ FIN de lib/main.dart
