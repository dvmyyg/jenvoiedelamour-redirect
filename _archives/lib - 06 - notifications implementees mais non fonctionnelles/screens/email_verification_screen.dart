// -------------------------------------------------------------
// üìÑ FICHIER : lib/screens/email_verification_screen.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ √âcran d'attente pour la v√©rification de l'adresse email apr√®s inscription ou connexion.
// ‚úÖ V√©rifie p√©riodiquement l'√©tat de v√©rification de l'email de l'utilisateur actuel via Firebase Authentication.
// ‚úÖ Redirige automatiquement vers l'√©cran HomeSelector une fois l'email v√©rifi√©.
// ‚úÖ Permet de renvoyer l'email de v√©rification manuellement.
// ‚úÖ S'appuie enti√®rement sur FirebaseAuth.instance.currentUser pour la logique utilisateur.
// ‚úÖ N'utilise plus deviceId pour l'identification ou la logique.
// ‚úÖ Boutons de v√©rification manuelle et de renvoi.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V004 - Code examin√© par Gemini. Logique de v√©rification automatique (polling) et manuelle confirm√©e comme fonctionnelle et bas√©e sur l'UID Firebase. - 2025/05/31
// V003 - Refactoring : Suppression du param√®tre deviceId. L'√©cran s'appuie enti√®rement sur FirebaseAuth.instance.currentUser.
//      - Suppression du passage de deviceId lors de la navigation vers HomeSelector. - 2025/05/29
// V002 - suppression fl√®che retour + redirection automatique vers HomeSelector - 2025/05/25 21h45 (Historique h√©rit√©)
// V001 - ajout polling automatique + boutons de v√©rif - 2025/05/22 (Historique h√©rit√©)
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/31 // Mise √† jour le 31/05


import 'dart:async'; // pour timer p√©riodique
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Essentiel pour la v√©rification email
import '../services/i18n_service.dart';
import '../utils/debug_log.dart';
// On importe HomeSelector, qui n'a plus besoin de deviceId en param√®tre
import 'home_selector.dart';

// On supprime l'import de ProfileScreen car il n'est pas utilis√© ici
// import 'profile_screen.dart'; // <-- SUPPRIM√â


class EmailVerificationScreen extends StatefulWidget {
  // Le deviceId n'est plus pertinent ici. L'√©tat de v√©rification et l'utilisateur
  // sont g√©r√©s par FirebaseAuth.instance.currentUser.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste pertinente

  const EmailVerificationScreen({
    super.key,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
    required this.deviceLang,
  });

  @override
  State<EmailVerificationScreen> createState() => _EmailVerificationScreenState();
}

class _EmailVerificationScreenState extends State<EmailVerificationScreen> {
  bool _isSending = false;
  bool _isChecking = false;
  String? _errorMessage;
  String? _successMessage;
  Timer? _pollingTimer; // pour v√©rification automatique p√©riodique

  @override
  void initState() {
    super.initState();
    // Lance la v√©rification automatique de l'√©tat de v√©rification de l'email
    _startAutoCheck();
  }

  @override
  void dispose() {
    // Annule le timer lorsque l'√©cran est d√©truit pour √©viter les fuites de m√©moire
    _pollingTimer?.cancel();
    super.dispose();
  }

  // D√©marre un timer pour v√©rifier p√©riodiquement l'√©tat de v√©rification de l'email
  void _startAutoCheck() {
    _pollingTimer = Timer.periodic(const Duration(seconds: 3), (_) async {
      // Obtient l'utilisateur Firebase actuellement connect√©.
      // Si l'utilisateur est null, le timer s'arr√™te implicitement car on ne fait rien.
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        // Recharge l'√©tat de l'utilisateur depuis Firebase (y compris l'√©tat emailVerified)
        await user.reload();
        // V√©rifie si l'email est maintenant v√©rifi√©
        if (user.emailVerified) {
          debugLog("‚úÖ Email v√©rifi√© via polling, redirection automatique", level: 'INFO');
          // Annule le timer et navigue si l'√©cran est toujours mont√©
          _pollingTimer?.cancel();
          if (!mounted) return;
          // Navigue vers HomeSelector. On ne passe PLUS deviceId.
          // HomeSelector obtiendra l'UID via FirebaseAuth.instance.currentUser.
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (_) => HomeSelector(
                // deviceId: widget.deviceId, // <-- SUPPRIM√â
                deviceLang: widget.deviceLang, // La langue est toujours pass√©e
              ),
            ),
          );
        }
      }
    });
  }

  // V√©rifie manuellement l'√©tat de v√©rification de l'email
  Future<void> _checkEmailVerified() async {
    setState(() {
      _isChecking = true;
      _errorMessage = null;
      _successMessage = null;
    });

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      // G√©rer le cas o√π l'utilisateur n'est pas connect√© (ne devrait pas arriver ici)
      setState(() {
        _errorMessage = getUILabel('email_verification_error_not_logged_in', widget.deviceLang); // TODO: Ajouter cette cl√© de traduction
        _isChecking = false;
      });
      debugLog("‚ö†Ô∏è V√©rification manuelle √©chou√©e : Utilisateur non connect√©.", level: 'WARNING');
      return;
    }

    await user.reload(); // Recharge l'√©tat de l'utilisateur
    // R√©cup√®re l'utilisateur apr√®s rechargement (au cas o√π l'objet User aurait chang√©, bien que reload modifie souvent l'objet existant)
    final refreshedUser = FirebaseAuth.instance.currentUser;

    // V√©rifie si l'email est v√©rifi√© apr√®s rechargement
    if (refreshedUser?.emailVerified == true) {
      debugLog("‚úÖ Email v√©rifi√© (manuel), acc√®s autoris√©", level: 'INFO');
      // Annule le timer et navigue si l'√©cran est toujours mont√©
      _pollingTimer?.cancel();
      if (!mounted) return;
      // Navigue vers HomeSelector. On ne passe PLUS deviceId.
      // HomeSelector obtiendra l'UID via FirebaseAuth.instance.currentUser.
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (_) => HomeSelector(
            // deviceId: widget.deviceId, // <-- SUPPRIM√â
            deviceLang: widget.deviceLang, // La langue est toujours pass√©e
          ),
        ),
      );
    } else {
      debugLog("‚ùå Email non v√©rifi√© (manuel)", level: 'WARNING');
      setState(() {
        _errorMessage = getUILabel('email_not_verified', widget.deviceLang); // Utilise i18n_service
        _isChecking = false;
      });
    }
  }

  // Renvoie l'email de v√©rification
  Future<void> _resendVerificationEmail() async {
    setState(() {
      _isSending = true;
      _errorMessage = null;
      _successMessage = null;
    });

    try {
      final user = FirebaseAuth.instance.currentUser;
      // V√©rifie qu'un utilisateur est connect√© et que son email n'est pas d√©j√† v√©rifi√©
      if (user != null && !user.emailVerified) {
        await user.sendEmailVerification(); // Envoie l'email via Firebase Auth
        debugLog("üì© Email de v√©rification renvoy√© √† ${user.email}", level: 'INFO');
        setState(() {
          _successMessage = getUILabel('email_resent_success', widget.deviceLang); // Utilise i18n_service
        });
      } else if (user != null && user.emailVerified) {
        // Cas o√π l'email est d√©j√† v√©rifi√© mais le bouton renvoyer est cliqu√© (devrait √™tre d√©sactiv√©)
        debugLog("‚ÑπÔ∏è Tentative de renvoi d'email, mais l'email est d√©j√† v√©rifi√©.", level: 'INFO');
        setState(() {
          _errorMessage = getUILabel('email_already_verified', widget.deviceLang); // TODO: Ajouter cette cl√©
        });
      } else {
        // Cas o√π l'utilisateur est null
        debugLog("‚ö†Ô∏è Tentative de renvoi d'email, mais utilisateur non connect√©.", level: 'WARNING');
        setState(() {
          _errorMessage = getUILabel('email_verification_error_not_logged_in', widget.deviceLang); // TODO: Ajouter cette cl√©
        });
      }
    } catch (e) {
      debugLog("‚ùå Erreur envoi email de v√©rification : $e", level: 'ERROR');
      setState(() {
        _errorMessage = getUILabel('email_resent_error', widget.deviceLang); // Utilise i18n_service
      });
    } finally {
      setState(() {
        _isSending = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // L'UI reste globalement la m√™me, car elle ne d√©pendait pas du deviceId pour son affichage.
    // Elle utilise FirebaseAuth.currentUser en interne pour la logique.
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text(getUILabel('email_verification_title', widget.deviceLang)), // Utilise i18n_service
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        automaticallyImplyLeading: false, // Emp√™che le retour arri√®re avec la fl√®che
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              getUILabel('email_verification_message', widget.deviceLang), // Utilise i18n_service
              style: const TextStyle(color: Colors.white70),
            ),
            const SizedBox(height: 24),
            // Affichage des messages de succ√®s ou d'erreur
            if (_successMessage != null)
              Text(
                _successMessage!,
                style: const TextStyle(color: Colors.greenAccent),
              ),
            if (_errorMessage != null)
              Text(
                _errorMessage!,
                style: const TextStyle(color: Colors.redAccent),
              ),
            const SizedBox(height: 24),
            // Bouton pour v√©rifier manuellement (appelle _checkEmailVerified refactoris√©)
            ElevatedButton.icon(
              onPressed: _isChecking ? null : _checkEmailVerified,
              icon: const Icon(Icons.check),
              label: Text(getUILabel('email_verification_check_button', widget.deviceLang)), // Utilise i18n_service
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.pink,
                foregroundColor: Colors.white,
                minimumSize: const Size.fromHeight(48),
              ),
            ),
            const SizedBox(height: 12),
            // Bouton pour renvoyer l'email (appelle _resendVerificationEmail refactoris√©)
            ElevatedButton.icon(
              onPressed: _isSending ? null : _resendVerificationEmail,
              icon: const Icon(Icons.email),
              label: Text(getUILabel('email_verification_resend_button', widget.deviceLang)), // Utilise i18n_service
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white10,
                foregroundColor: Colors.white,
                minimumSize: const Size.fromHeight(48),
              ),
            ),
            // TODO: Potentiellement ajouter un bouton pour se d√©connecter ici,
            // si l'utilisateur ne veut pas v√©rifier son email tout de suite et veut revenir √† la page de connexion.
            // ElevatedButton( onPressed: () async { await FirebaseAuth.instance.signOut(); }, child: Text(getUILabel('logout_button', widget.deviceLang)))
          ],
        ),
      ),
    );
  }
}
// üìÑ FIN de lib/screens/email_verification_screen.dart
