// -------------------------------------------------------------
// üìÑ FICHIER : lib/screens/recipients_screen.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ Affiche la liste des destinataires li√©s √† l‚Äôutilisateur authentifi√© (par UID)
// ‚úÖ Bouton ‚ÄúInviter quelqu‚Äôun‚Äù ‚Üí navigue vers AddRecipientScreen (qui g√®re le partage de lien par UID)
// ‚úÖ Bouton ‚ÄúValider une invitation‚Äù ‚Üí saisie manuelle du lien/UID, d√©clenche l'appairage pairUsers (bas√© sur UID). La bo√Æte de dialogue accepte l'URL compl√®te ou l'UID pur.
// ‚úÖ Ic√¥ne ‚úé ‚Üí navigation vers √©cran d‚Äô√©dition (passant l'UID du destinataire)
// ‚úÖ Ic√¥ne üóëÔ∏è ‚Üí suppression d‚Äôun destinataire (appelant RecipientService par UID, avec confirmation)
// ‚úÖ Navigation ‚Üí √©cran de chat/d√©tail (RecipientDetailsScreen, passant l'UID du destinataire)
// ‚úÖ Textes traduits dynamiquement via getUILabel (i18n_service)
// ‚úÖ Chargement Firestore + appel √† RecipientService (maintenant bas√©s sur UID)
// ‚úÖ **Re√ßoit le r√¥le isReceiver de l'utilisateur actuel en param√®tre.**
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V021 - Ajout du param√®tre isReceiver au constructeur de RecipientsScreen. - 2025/06/03
// V020 - Modification du bloc onPressed dans _showPasteLinkDialog pour accepter soit l'URL d'invitation (param√®tre 'recipient'), soit l'UID Firebase pur, pour faciliter l'appairage manuel. Utilisation des nouvelles cl√©s i18n pour les messages d'erreur. Code valid√©. - 2025/05/31
// V019 - Correction de l'erreur d'exportation de '_pairUsers' en renommant la fonction en 'pairUsers' dans main.dart et en mettant √† jour l'import et l'appel ici. - 2025/05/30
// V018 - Correction de l'erreur Undefined name '_pairUsers' en d√©commentant l'import de main.dart. - 2025/05/30
// V017 - Correction de l'avertissement 'unnecessary_to_list'. Code refactoris√© vers UID confirm√©. - 2025/05/30
// V015 - Refactoring : Remplacement de deviceId par l'UID Firebase de l'utilisateur actuel.
//      - Suppression du param√®tre deviceId. Acc√®s √† l'UID via FirebaseAuth.currentUser.
//      - Initialisation de RecipientService avec l'UID.
//      - Adaptation de la logique d'appairage manuel (_showPasteLinkDialog) pour utiliser les UID et appeler pairUsers (main.dart).
//      - Adaptation des appels √† RecipientService (add/delete/update) pour utiliser les UID.
//      - Adaptation de la navigation vers les √©crans d√©taill√©s/√©dition/envoi pour passer l'UID du destinataire. - 2025/05/29
// V014 - ajout du bloc descriptif des fonctionnalit√©s principales - 2025/05/28 14h32 (Historique h√©rit√©)
// V013 - restauration des boutons d'invitation et de suppression - 2025/05/28 20h25 (Historique h√©rit√©)
// V012 - r√©int√©gration suppression recipient via menu contextuel - 2025/05/27 21h35 (Historique h√©rit√©)
// V011 - ajout menu √©dition du destinataire avec changement de cat√©gorie - 2025/05/27 14h54 (Historique h√©rit√©)
// V010 - suppression de l‚Äôaffichage du champ 'relation' dans la liste - 2025/05/26 15h13 (Historique h√©rit√©)
// V009 - v√©rification correcte du pr√©nom miroir dans l‚Äôappairage - 2025/05/26 11h47 (Historique h√©rit√©)
// V008 - appairage bilat√©ral avec pr√©nom miroir - 2025/05/26 11h08 (Historique h√©rit√©)
// V007 - ajout v√©rification doublon lors de l'appairage manuel - 2025/05/26 09:38 (Historique h√©rit√©)
// V006 - ajout des param√®tres obligatoires 'allowedPacks' et 'paired' dans Recipient - 2025/05/26 09:18 (Historique h√©rit√©)
// V005 - ajout de la validation du champ de lien dans la bo√Æte de dialogue - 2025/05/26 09h13 (Historique h√©rit√©)
// V004 - connexion du lien coll√© √† la m√©thode d‚Äôappairage - 2025/05/26 08h55 (Historique h√©rit√©)
// V003 - ajout du bouton "Valider une invitation" avec champ de lien - 2025/05/26 08h52 (Historique h√©rit√©)
// V002 - bouton "Envoyer une invitation" + partage lien - 2025/05/25 22h40 (Historique h√©rit√©)
// V001 - version initiale - 2025/05/21 (Historique h√©rit√©)
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/31 // Mise √† jour le 31/05

import 'package:flutter/material.dart';
import '../main.dart' show pairUsers; // Importe sp√©cifiquement _pairUsers depuis main.dart
import 'package:firebase_auth/firebase_auth.dart';
import '../services/recipient_service.dart'; // Utilise le RecipientService refactoris√©
import '../models/recipient.dart'; // Utilise le mod√®le Recipient refactoris√© (contient l'UID du destinataire dans .id)
import 'recipient_details_screen.dart';
import 'edit_recipient_screen.dart';
import 'add_recipient_screen.dart'; // √âcran pour g√©n√©rer le lien d'invitation
import '../services/i18n_service.dart'; // Pour les traductions
import '../utils/debug_log.dart'; // Pour le logger


class RecipientsScreen extends StatefulWidget {
  final String deviceLang; // La langue reste pertinente
  final bool isReceiver; // R√¥le de l'utilisateur ACTUEL (celui qui est sur cet √©cran)

  const RecipientsScreen({
    super.key,
    required this.deviceLang,
    required this.isReceiver, // Ce param√®tre est requis
  });

  @override
  State<RecipientsScreen> createState() => _RecipientsScreenState();
}

class _RecipientsScreenState extends State<RecipientsScreen> {
  // RecipientService sera initialis√© avec l'UID de l'utilisateur actuel.
  late RecipientService _recipientService;
  List<Recipient> _recipients = []; // Liste des destinataires

  String? _currentUserId;

  @override
  void initState() {
    super.initState();
    // Obtenir l'UID de l'utilisateur actuel d√®s que possible.
    _currentUserId = FirebaseAuth.instance.currentUser?.uid;

    if (_currentUserId == null) {

      debugLog("‚ö†Ô∏è RecipientsScreen : Utilisateur non connect√©. Ne peut pas charger les destinataires.", level: 'ERROR');
      // TODO: Afficher un message d'erreur ou rediriger vers la page de connexion.

      return; // Sortir si l'UID n'est pas disponible
    }

    _recipientService = RecipientService(_currentUserId!); // UID de l'utilisateur actuel (non null car v√©rifi√© au-dessus)

    _loadRecipients();
  }

  Future<void> _loadRecipients() async {
    if (_currentUserId == null) return; // Protection suppl√©mentaire

    final recipients = await _recipientService.fetchRecipients();
    setState(() => _recipients = recipients); // Met √† jour l'√©tat avec la nouvelle liste
    debugLog("‚úÖ ${_recipients.length} destinataires charg√©s pour l'UID $_currentUserId", level: 'INFO');
  }

  Future<void> _confirmDeleteRecipient(Recipient recipientToDelete) async { // Re√ßoit l'objet Recipient pour acc√©der √† son ID/UID
    if (_currentUserId == null) return; // Protection suppl√©mentaire

    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black,
        title: Text(getUILabel('delete_contact_title', widget.deviceLang), style: const TextStyle(color: Colors.white)), // Utilise i18n_service
        content: Text(getUILabel('delete_contact_warning', widget.deviceLang), style: const TextStyle(color: Colors.white70)), // Utilise i18n_service
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text(getUILabel('cancel_button', widget.deviceLang), style: const TextStyle(color: Colors.grey)), // Utilise i18n_service
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: Text(getUILabel('delete_button', widget.deviceLang), style: const TextStyle(color: Colors.red)), // Utilise i18n_service
          ),
        ],
      ),
    );

    if (confirmed == true) {

      await _recipientService.deleteRecipient(recipientToDelete.id); // recipientToDelete.id contient maintenant l'UID de l'autre utilisateur
      // TODO: Optionnel : Supprimer aussi le destinataire miroir chez l'autre utilisateur si cette logique est souhait√©e.

      _loadRecipients(); // Recharge la liste apr√®s suppression
    }
  }

  void _goToAddRecipientScreen() async {
    if (_currentUserId == null) return; // Protection suppl√©mentaire

    await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => AddRecipientScreen(
          // deviceId: widget.deviceId, // <-- SUPPRIM√â
          deviceLang: widget.deviceLang, // La langue est toujours pass√©e
        ),
      ),
    );

    _loadRecipients();
  }

  void _showPasteLinkDialog() {
    if (_currentUserId == null) return; // Protection suppl√©mentaire

    final controller = TextEditingController();
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        backgroundColor: Colors.black,
        title: Text(getUILabel('validate_invite_button', widget.deviceLang), style: const TextStyle(color: Colors.white)), // Utilise i18n_service
        content: TextFormField(
          controller: controller,
          style: const TextStyle(color: Colors.white),
          decoration: InputDecoration(
            hintText: getUILabel('paste_invite_hint', widget.deviceLang), // Utilise i18n_service
            hintStyle: const TextStyle(color: Colors.white38),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(getUILabel('cancel_button', widget.deviceLang), style: const TextStyle(color: Colors.grey)), // Utilise i18n_service
          ),
          TextButton(
            onPressed: () async {
              final input = controller.text.trim();
              String? recipientInviterUid;

              final uri = Uri.tryParse(input);
              // Tente d'abord de parser comme une URL avec le param√®tre 'recipient'
              if (uri != null && uri.queryParameters.containsKey('recipient')) {
                recipientInviterUid = uri.queryParameters['recipient'];
                debugLog("‚û°Ô∏è [RecipientsScreen] Pars√© comme URL d'invitation. UID: $recipientInviterUid", level: 'DEBUG');
              } else {

                if (input.length >= 20 && input.length <= 40) { // Assoupli la validation de longueur
                  recipientInviterUid = input;
                  debugLog("‚û°Ô∏è [RecipientsScreen] Pars√© comme UID direct. UID: $recipientInviterUid", level: 'DEBUG');
                } else {

                  debugLog("‚ö†Ô∏è [RecipientsScreen] Entr√©e invalide : ne ressemble pas √† une URL d'invitation ou un UID valide.", level: 'WARNING');
                }
              }

              if (recipientInviterUid != null && recipientInviterUid.isNotEmpty && _currentUserId != recipientInviterUid) {

                final alreadyPaired = _recipients.any((r) => r.id == recipientInviterUid); // r.id contient maintenant l'UID
                if (alreadyPaired) {

                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(getUILabel('already_paired', widget.deviceLang)), // Utilise i18n_service
                      backgroundColor: Colors.orange,
                    ),
                  );
                  Navigator.of(context).pop(); // Ferme la bo√Æte de dialogue
                  return; // Sortir apr√®s le message "d√©j√† appair√©"
                }

                final String? pairedWithUid = await pairUsers(recipientInviterUid, _currentUserId!);
                if (mounted) { // V√©rifier si le widget est toujours mont√© apr√®s l'op√©ration asynchrone

                  if (pairedWithUid != null) {

                    _loadRecipients(); // Recharge la liste pour inclure le nouveau destinataire
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(getUILabel('pairing_success', widget.deviceLang)), // Utilise i18n_service
                        backgroundColor: Colors.green,
                      ),
                    );
                    Navigator.of(context).pop(); // Ferme la bo√Æte de dialogue UNIQUEMENT en cas de succ√®s
                  } else {

                    debugLog("‚ö†Ô∏è [RecipientsScreen] pairUsers a retourn√© null. √âchec de l'appairage.", level: 'WARNING');
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(getUILabel('pairing_failed', widget.deviceLang)), // Utilise i18n_service
                        backgroundColor: Colors.red,
                      ),
                    );
                  }
                }
              } else {

                final errorMessage = (_currentUserId == recipientInviterUid && recipientInviterUid != null && recipientInviterUid.isNotEmpty)
                    ? getUILabel('cannot_pair_with_self', widget.deviceLang) // Utilise i18n_service
                    : getUILabel('invalid_invite_code', widget.deviceLang); // Utilise i18n_service

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(errorMessage),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: Text(getUILabel('validate_button', widget.deviceLang), style: const TextStyle(color: Colors.pink)), // Utilise i18n_service
          ),
        ],
      ),
    );
  }

  void _editRecipient(Recipient r) { // Prend l'objet Recipient en param√®tre
    if (_currentUserId == null) return; // Protection suppl√©mentaire

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => EditRecipientScreen(
          deviceLang: widget.deviceLang, // La langue est toujours pass√©e
          recipient: r, // Passe l'objet Recipient refactoris√©
        ),
      ),
    ).then((result) {
      if (result == true) {
        _loadRecipients(); // Recharge la liste pour refl√©ter les changements potentiels (nom, relation, ic√¥ne)
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_currentUserId == null) {
      return Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          title: Text(getUILabel('recipients_title', widget.deviceLang)),
          backgroundColor: Colors.black,
          foregroundColor: Colors.white,
        ),
        body: const Center(
          child: CircularProgressIndicator(color: Colors.pink), // Ou un message d'erreur
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(getUILabel('recipients_title', widget.deviceLang)), // Utilise i18n_service
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
      ),
      backgroundColor: Colors.black,
      body: ListView(
        children: [
          GestureDetector(
            onTap: _goToAddRecipientScreen, // Appelle la navigation refactoris√©e
            child: Padding(
              padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
              child: Row(
                children: [
                  const CircleAvatar(
                    radius: 16,
                    backgroundColor: Colors.pink,
                    child: Icon(Icons.add, size: 20, color: Colors.white),
                  ),
                  const SizedBox(width: 12),
                  Text(getUILabel('invite_someone_button', widget.deviceLang), style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)), // Utilise i18n_service
                ],
              ),
            ),
          ),
          // Bouton "Valider une invitation"
          GestureDetector(
            onTap: _showPasteLinkDialog, // Appelle la bo√Æte de dialogue refactoris√©e pour appairage manuel
            child: Padding(
              padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
              child: Row(
                children: [
                  const CircleAvatar(
                    radius: 16,
                    backgroundColor: Colors.white12,
                    child: Icon(Icons.link, size: 20, color: Colors.white),
                  ),
                  const SizedBox(width: 12),
                  Text(getUILabel('validate_invite_button', widget.deviceLang), style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)), // Utilise i18n_service
                ],
              ),
            ),
          ),
          const Divider(color: Colors.white24),
          // Liste des destinataires
          ..._recipients.map((r) { // _recipients contient des objets Recipient refactoris√©s (ID = UID)
            return ListTile(
              leading: Text(r.icon, style: const TextStyle(fontSize: 24)), // Utilise les donn√©es du mod√®le Recipient
              title: Text(r.displayName, style: const TextStyle(color: Colors.white)), // Utilise les donn√©es du mod√®le Recipient
              subtitle: Text(getUILabel(r.relation, widget.deviceLang), style: const TextStyle(color: Colors.white70)), // Utilise les donn√©es du mod√®le Recipient et i18n_service
              trailing: Wrap(
                spacing: 12,
                children: [
                  // Bouton d'√©dition
                  IconButton(
                    icon: const Icon(Icons.edit, color: Colors.white70),
                    onPressed: () => _editRecipient(r), // Appelle la m√©thode d'√©dition refactoris√©e (passe l'objet Recipient)
                  ),
                  // Bouton de suppression
                  IconButton(
                    icon: const Icon(Icons.delete, color: Colors.redAccent),
                    onPressed: () => _confirmDeleteRecipient(r), // Appelle la m√©thode de suppression refactoris√©e (passe l'objet Recipient)
                  ),
                  // TODO: Optionnel : Bouton pour acc√©der directement au chat depuis la liste ?
                  IconButton(
                    icon: const Icon(Icons.chat, color: Colors.white70), // Ic√¥ne de chat
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => RecipientDetailsScreen(
                            deviceLang: widget.deviceLang, // La langue est toujours pass√©e
                            recipient: r, // Passe l'objet Recipient refactoris√©
                            isReceiver: widget.isReceiver, // Passe le r√¥le isReceiver de l'utilisateur ACTUEL (disponible via widget)
                          ),
                        ),
                      );
                    },
                  ),
                ],
              ),
              // L'action onTap sur l'√©l√©ment de liste pourrait aussi naviguer vers le chat
              // onTap: () { /* naviguer vers RecipientDetailsScreen(recipient: r, deviceLang: widget.deviceLang) */ },
            );
          }), // Suppression de .toList()
        ],
      ),
    );
  }
} // <-- Fin de la classe _RecipientsScreenState et de la classe RecipientsScreen

// üìÑ FIN de lib/screens/recipients_screen.dart
