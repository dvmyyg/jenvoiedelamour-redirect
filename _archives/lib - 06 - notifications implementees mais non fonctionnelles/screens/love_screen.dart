// -------------------------------------------------------------
// üìÑ FICHIER : lib/screens/love_screen.dart
// -------------------------------------------------------------
// üßπ FONCTIONNALIT√âS PRINCIPALES
// -------------------------------------------------------------
// ‚úÖ √âcran principal de l'application affichant la liste des destinataires de l'utilisateur actuel.
// ‚úÖ Permet de naviguer vers les √©crans de chat (via RecipientDetailsScreen), gestion des destinataires (RecipientsScreen), et profil (ProfileScreen).
// ‚úÖ Charge la liste des destinataires en temps r√©el via RecipientService.streamPairedRecipients.
// ‚úÖ Affiche le nom d'affichage de l'utilisateur actuel (pass√© en param√®tre).
// ‚úÖ N'utilise plus deviceId pour l'identification ou les op√©rations Firestore.
// ‚úÖ Initialise et configure la r√©ception de notifications FCM et l'affichage de notifications locales (y compris en avant-plan).
// ‚ö†Ô∏è NOTE : La logique de pr√©sence en temps r√©el bas√©e sur l'ancien mod√®le deviceId a √©t√© retir√©e et n√©cessitera une r√©impl√©mentation si n√©cessaire.
// -------------------------------------------------------------
// üïì HISTORIQUE DES MODIFICATIONS
// -------------------------------------------------------------
// V011 - Correction de l'erreur 'recipientUid' isn't a field en d√©clarant le champ dans la classe LoveScreen. - 2025/06/03
// V010 - Nettoyage du code comment√© obsol√®te li√© √† l'ancienne logique deviceId et gestion des notifs remplac√©e. - 2025/06/03
// V009 - Suppression du code comment√© li√© √† l'ancienne logique deviceId et gestion des notifs remplac√©e. - 2025/06/03 (Refactoring)
// V008 - Rendu le param√®tre recipientUid optionnel dans le constructeur pour l'accueil principal. - 2025/06/03
// V007 - Suppression du FloatingActionButton (ic√¥ne de r√©glage en bas √† droite) pour d√©sencombrer l'√©cran principal et garder l'ic√¥ne dans l'AppBar (en haut √† droite). - 2025/05/31
// V006 - Suppression de l'ic√¥ne de r√©glage dupliqu√©e dans l'AppBar (le FloatingActionButton en bas √† droite est conserv√© comme position correcte). - 2025/05/31 (Annul√© par V007 suite √† discussion)
// V005 - Fichier totalement propre.
//        R√©solution du dernier avertissement ('showNotification not referenced') en d√©commentant son appel dans le listener FCM.
//        Code refactoris√© vers UID confirm√© et √©cran pr√™t √† fonctionner. - 2025/05/30
// V004 - Refonte majeure : Remplacement de toute la logique bas√©e sur deviceId. Utilisation de l'UID Firebase. - 2025/05/30
// V003 - ajout explicite du param√®tre displayName (pr√©nom) (historique h√©rit√©). - 2025/05/24 08h20
// V002 - ajout explicite du param√®tre displayName (pr√©nom) (historique h√©rit√©). - 2025/05/24 08h20
// V001 - version initiale (historique h√©rit√©). - 2025/05/23 21h00
// -------------------------------------------------------------

// GEM - code corrig√© par G√©mini le 2025/05/31 // Mise √† jour le 31/05

import '../utils/debug_log.dart'; // Utilise la fonction unique de debug_log.dart
import 'dart:async'; // Reste si d'autres timers sont ajout√©s (comme pour rafra√Æchir la liste si pas de stream)
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import '../services/i18n_service.dart'; // Import conserv√© pour l'internationalisation (getUILabel, getMessageBody, getPreviewText)
import '../screens/recipients_screen.dart'; // Navigation vers cet √©cran
import '../screens/recipient_details_screen.dart'; // Si vous utilisez RecipientDetailsScreen pour le chat
import '../models/recipient.dart'; // Utilise le mod√®le Recipient refactoris√©
import '../services/recipient_service.dart'; // Utilise le RecipientService refactoris√©
import '../screens/profile_screen.dart'; // Navigation vers cet √©cran
import 'package:firebase_auth/firebase_auth.dart'; // N√©cessaire pour obtenir l'UID de l'utilisateur actuel

@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  debugLog(
    "üîî [FCM-BG] Notification re√ßue en arri√®re-plan : ${message.notification?.title}",
    level: 'INFO',
  );
  // TODO: Ajouter ici la logique pour traiter le message/notification en arri√®re-plan.

  if (message.notification != null) {
    // Exemple minimal pour logguer les d√©tails de la notification en arri√®re-plan
    debugLog("üì¢ [FCM-BG] Titre: ${message.notification?.title}, Body: ${message.notification?.body}", level: 'DEBUG');
  }
}

class LoveScreen extends StatefulWidget {
  // Le deviceId n'est plus requis.

  // Ces informations sont maintenant pass√©es par HomeSelector qui les a charg√©es depuis users/{uid}.
  final bool isReceiver; // R√¥le charg√© depuis HomeSelector
  final String deviceLang; // Langue pass√©e depuis main.dart
  final String? displayName; // Nom d'affichage charg√© depuis HomeSelector
  // ‚≠êÔ∏è CORRECTION ICI : D√©claration du champ recipientUid manquant
  final String? recipientUid; // Ajout de la d√©claration du champ

  const LoveScreen({
    super.key,
    required this.isReceiver,
    required this.deviceLang,
    this.displayName,
    this.recipientUid, // Ce param√®tre dans le constructeur initialise le champ d√©clar√© juste au-dessus.
  });

  @override
  State<LoveScreen> createState() => _LoveScreenState();
}

class _LoveScreenState extends State<LoveScreen> {
  // La liste des destinataires sera obtenue via un Stream<List<Recipient>> depuis RecipientService.

  // Instance du RecipientService (initialis√©e une fois avec l'UID de l'utilisateur actuel)
  late RecipientService _recipientService;
  // Variable pour stocker l'UID de l'utilisateur actuel
  String? _currentUserId;

  // Notifications locales plugin instance
  // Conserver si vous comptez utiliser les notifications locales d√©clench√©es par FCM en avant-plan ou arri√®re-plan.
  late FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin;

  @override
  void initState() {
    super.initState();
    debugLog("üîÑ LoveScreen initialis√©.", level: 'INFO');

    // Obtenir l'UID de l'utilisateur actuel d√®s que possible.
    _currentUserId = FirebaseAuth.instance.currentUser?.uid;

    // V√©rifier si l'utilisateur est connect√©. LoveScreen devrait toujours √™tre atteint par un utilisateur connect√© (via HomeSelector).
    if (_currentUserId == null) {
      debugLog("‚ö†Ô∏è LoveScreen : Utilisateur non connect√©. Cela ne devrait pas arriver ici.", level: 'ERROR');
      // TODO: G√©rer cette erreur critique (ex: afficher un message, rediriger vers Login).
      return; // Sortir t√¥t si l'UID n'est pas disponible
    }

    // Initialiser le RecipientService avec l'UID de l'utilisateur actuel
    _recipientService = RecipientService(_currentUserId!); // _currentUserId! est s√ªr car v√©rifi√© au-dessus

    _initNotifications();

    _configureFCM();
  }

  // Initialise le plugin de notifications locales.
  Future<void> _initNotifications() async {
    debugLog("üîî Initialisation des notifications locales.", level: 'INFO');
    flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
    const androidSettings = AndroidInitializationSettings(
      // 'ic_launcher' est le nom du drawable dans les ressources Android
      '@mipmap/ic_launcher', // Assurez-vous que cette ressource existe dans votre projet Android (android/app/src/main/res/mipmap-*)
    );
    const DarwinInitializationSettings iosSettings = DarwinInitializationSettings( // iOS settings
      requestAlertPermission: true, // Demande la permission pour les alertes
      requestBadgePermission: true, // Demande la permission pour les badges d'ic√¥ne
      requestSoundPermission: true, // Demande la permission pour les sons
      // onDidReceiveLocalNotification: (int id, String? title, String? body, String? payload) async {
      //   // TODO: G√©rer la r√©ception de notifications locales en avant-plan sur les anciennes versions d'iOS (< 10)
      //   // Cette m√©thode est d√©pr√©ci√©e dans les versions r√©centes.
      //   debugLog("üì¢ [iOS Legacy] Notification locale re√ßue en avant-plan: $title", level: 'DEBUG');
      // },
    );
    const InitializationSettings initSettings = InitializationSettings(android: androidSettings, iOS: iosSettings); // Combiner les settings Android et iOS

    try {
      bool? initialized = await flutterLocalNotificationsPlugin.initialize(
        initSettings,
        // onDidReceiveNotificationResponse: (NotificationResponse notificationResponse) {
        //   // TODO: G√©rer la r√©ponse utilisateur √† la notification (ex: tap sur la notification) pour les versions r√©centes (>= 10)
        //   // Cela se d√©clenche lorsque l'utilisateur interagit avec une notification (locale ou affich√©e suite √† FCM).
        //   // Vous pouvez acc√©der au payload via notificationResponse.payload si vous en avez d√©fini un lors de l'affichage.
        //   // Vous pourriez par exemple naviguer vers l'√©cran de chat correspondant au message.
        //   debugLog("üì¢ R√©ponse notification re√ßue: ${notificationResponse.notificationResponseType}", level: 'DEBUG');
        //   debugLog("üì¢ Payload: ${notificationResponse.payload}", level: 'DEBUG');
        //   // Exemple de gestion basique : si payload contient un UID de destinataire, naviguer vers le chat
        //   // if (notificationResponse.payload != null && notificationResponse.payload!.startsWith('chat:')) {
        //   //    final recipientUid = notificationResponse.payload!.substring(5); // Extraire l'UID apr√®s 'chat:'
        //   //    // Trouver le destinataire correspondant dans la liste charg√©e ou le charger depuis Firestore
        //   //    final recipient = _findRecipientByUid(recipientUid); // Cette m√©thode doit √™tre impl√©ment√©e
        //   //    if (recipient != null && mounted) {
        //   //       Navigator.push(context, MaterialPageRoute(builder: (_) => RecipientDetailsScreen(deviceLang: widget.deviceLang, recipient: recipient)));
        //   //    }
        //   // }
        // },
        // onDidReceiveBackgroundNotificationResponse: (NotificationResponse notificationResponse) {
        //   // TODO: G√©rer la r√©ponse utilisateur √† la notification re√ßue en arri√®re-plan (Android 12+ ou si setup headless est fait)
        //   // C'est l'√©quivalent pour les actions en arri√®re-plan/termin√©. N√©cessite un setup sp√©cifique du plugin.
        //   debugLog("üì¢ R√©ponse notification BACKGROUND re√ßue: ${notificationResponse.notificationResponseType}", level: 'DEBUG');
        //   debugLog("üì¢ Payload BACKGROUND: ${notificationResponse.payload}", level: 'DEBUG');
        // }
      );

      if (initialized != null && initialized) {
        debugLog("‚úÖ Notifications locales initialis√©es avec succ√®s.", level: 'SUCCESS');
      } else {
        debugLog("‚ùå √âchec de l'initialisation des notifications locales.", level: 'ERROR');
        // TODO: Afficher un message √† l'utilisateur si les notifications ne fonctionnent pas.
      }
  } catch (e) {
  debugLog("‚ùå Erreur lors de l'initialisation des notifications locales : $e", level: 'ERROR');
  // TODO: Afficher un message d'erreur plus d√©taill√© √† l'utilisateur.
  }
}

// Configure Firebase Cloud Messaging (FCM).
// La logique FCM en avant-plan qui utilisait showIcon a √©t√© retir√©e car bas√©e sur l'ancien mod√®le.
// Vous pouvez r√©impl√©menter la gestion des notifications FCM en avant-plan ici si n√©cessaire,
// en utilisant les donn√©es de la notification (RemoteMessage) pour d√©clencher par exemple une notification locale.
Future<void> _configureFCM() async {
  debugLog("‚öôÔ∏è Configuration de FCM.", level: 'INFO');
  // Demander la permission de recevoir des notifications (pour iOS et Web).
  // Sur Android, les permissions sont g√©n√©ralement g√©r√©es au niveau de l'installation de l'appli.
  try {
    NotificationSettings settings = await FirebaseMessaging.instance.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );
    debugLog('‚úÖ Permissions notification accord√©es: ${settings.authorizationStatus}', level: 'INFO');

    // TODO: G√©rer la sauvegarde/mise √† jour du token FCM.
    // Le token est li√© √† l'installation de l'appli sur cet appareil.
    // Il est g√©n√©ralement utile de l'associer √† l'UID de l'utilisateur *connect√©*
    // pour pouvoir lui envoyer des notifications cibl√©es sur CET appareil.
    // Cela n√©cessiterait une fonction dans un service (ex: FirestoreService ou un nouveau service FCM)
    // qui prendrait l'UID de l'utilisateur actuel et le token FCM et l'enregistrerait dans Firestore
    // (par exemple, sous users/{uid}/fcmTokens/{thisDeviceToken}).
    // final token = await FirebaseMessaging.instance.getToken();
    // debugLog("ü™™ FCM Token: $token", level: 'INFO');
    // if (_currentUserId != null && token != null) {
    //   // await _firestoreService.saveFcmTokenForUser(_currentUserId!, token); // Cette fonction saveFcmTokenForUser doit exister.
    //    debugLog("‚ÑπÔ∏è TODO: Sauvegarder/mettre √† jour le token FCM pour l'UID $_currentUserId.", level: 'DEBUG');
    // }

    // √âcouter les messages FCM re√ßus pendant que l'application est au premier plan.
    // L'ancienne logique d'affichage de showIcon est supprim√©e.
    // Vous pouvez utiliser ceci pour afficher une notification locale (via flutter_local_notifications)
    // ou mettre √† jour l'UI en temps r√©el si le message FCM contient des donn√©es pertinentes.
    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      debugLog("üì® [FCM-FG] Message re√ßu en avant-plan : ${message.messageId}", level: 'INFO');
      // TODO: Traiter le message FCM en avant-plan.
      // Par exemple, afficher une notification locale ou rafra√Æchir l'UI.
      if (message.notification != null) {
        debugLog("üì¢ [FCM-FG] Titre: ${message.notification?.title}, Body: ${message.notification?.body}", level: 'DEBUG');
        // Exemple: Afficher une notification locale bas√©e sur le message FCM
        _showNotification(message.notification!.body ?? '', message.notification!.title); // N√©cessite adaptation de _showNotification
      }
    });

    // √âcouter les interactions avec les notifications quand l'appli est ouverte (depuis terminated ou background).
    // G√©r√© par onDidReceiveNotificationResponse dans _initNotifications().
    // FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
    //    debugLog("üöÄ [FCM] Application ouverte depuis notification : ${message.messageId}", level: 'INFO');
    //    // TODO: G√©rer l'action lorsque l'utilisateur tape sur la notification.
    //    // Ceci est g√©n√©ralement utilis√© pour naviguer vers un √©cran sp√©cifique (ex: l'√©cran de chat).
    //    // Vous pouvez utiliser message.data ou message.notification.body pour d√©cider o√π naviguer.
    //    // Si vous avez mis un payload dans la notification locale affich√©e suite au FCM,
    //    // le handling via onDidReceiveNotificationResponse dans _initNotifications est peut-√™tre suffisant.
    // });

    // Vous pouvez aussi g√©rer l'√©tat initial (si l'app est lanc√©e en tapant sur une notification)
    // FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? message) {
    //   if (message != null) {
    //     debugLog("üöÄ [FCM] Application lanc√©e depuis notification initiale : ${message.messageId}", level: 'INFO');
    //     // TODO: G√©rer l'action de lancement depuis notification initiale.
    //     // Similaire √† onMessageOpenedApp, mais pour le lancement initial.
    //   }
    // });

  } catch (e) {
    debugLog("‚ùå Erreur lors de la configuration de FCM ou des permissions : $e", level: 'ERROR');
    // TODO: Afficher un message √† l'utilisateur.
  }

}

@override
void dispose() {
  debugLog("üö™ LoveScreen dispose. Lib√©ration des ressources.", level: 'INFO');
  super.dispose();
}

@override
Widget build(BuildContext context) {
  if (_currentUserId == null) {
    debugLog("‚ö†Ô∏è LoveScreen build : _currentUserId est null. Affichage de l'√©cran d'erreur.", level: 'ERROR');
    // Afficher un √©cran d'erreur ou rediriger
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text(getUILabel('app_title', widget.deviceLang)), // TODO: Fallback title
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
      ),
      body: Center(
        // TODO: Use i18n_service
        child: Text("Erreur : Utilisateur non identifi√©. Veuillez vous reconnecter.", style: TextStyle(color: Colors.red)),
      ),
    );
  }

  return Scaffold(
    backgroundColor: Colors.black,
    appBar: AppBar(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisSize: MainAxisSize.min, // Adapter la taille de la Row au contenu
              children: [
                const Icon(Icons.favorite, color: Colors.red), // Ic√¥ne d'amour
                const SizedBox(width: 8),
                Text(getUILabel('love_screen_title', widget.deviceLang)), // Titre de l'√©cran (internationalis√©)
              ],
            ),
            if (widget.displayName != null && widget.displayName!.isNotEmpty) // V√©rifier aussi si non vide
              Padding(
                padding: const EdgeInsets.only(top: 4),
                child: Text(
                  widget.displayName!, // Nom d'affichage de l'utilisateur actuel
                  style: const TextStyle(
                    color: Colors.white70, // Couleur discr√®te
                    fontSize: 14,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ),
            // TODO: Afficher 'isReceiver' ou un statut pertinent si n√©cessaire
          ],
        ),
        actions: [
    IconButton(
    icon: const Icon(Icons.group), // Ic√¥ne de groupe/contacts
    tooltip: getUILabel('manage_recipients_tooltip', widget.deviceLang), // Tooltip internationalis√©
    onPressed: () async {
      debugLog("‚û°Ô∏è Navigation vers RecipientsScreen", level: 'INFO');
      await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (_) => RecipientsScreen(
            deviceLang: widget.deviceLang, // Passer la langue
            isReceiver: widget.isReceiver, // Passe le r√¥le isReceiver de l'utilisateur ACTUEL (disponible via widget)
          ),
        ),
      );
      // TODO: Si RecipientsScreen permet des modifications (ajout/suppression),
    },
  ),
  IconButton( // Ajout du bouton Settings/Profile
  icon: const Icon(Icons.settings), // Ic√¥ne param√®tres
  tooltip: getUILabel('settings_tooltip', widget.deviceLang), // TODO: Add settings tooltip key
  onPressed: () {
  debugLog("‚û°Ô∏è Navigation vers ProfileScreen/SettingsScreen", level: 'INFO');
  Navigator.push(
    context,
    MaterialPageRoute(
      builder: (_) => ProfileScreen(
          deviceLang: widget.deviceLang
      ),
    ),
  );
  },
  ),
        ],
    ),
    body: Column( // Utilise Column pour structurer le corps
      children: [
        const SizedBox(height: 12), // Espacement en haut
        Expanded( // Le StreamBuilder prend l'espace restant
          child: StreamBuilder<List<Recipient>>(
            stream: _recipientService.streamPairedRecipients(), // Utilise la m√©thode streamPairedRecipients du service
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                debugLog("‚è≥ LoveScreen StreamBuilder : Attente des destinataires...", level: 'DEBUG');

                return const Center(child: CircularProgressIndicator(color: Colors.pink));
              }

              if (snapshot.hasError) {
                debugLog("‚ùå LoveScreen StreamBuilder Error: ${snapshot.error}", level: 'ERROR');
                // Afficher un message d'erreur si le stream rencontre un probl√®me
                // TODO: Utiliser i18n_service pour le message d'erreur
                return Center(child: Text("Erreur lors du chargement des destinataires.", style: TextStyle(color: Colors.red)));
              }

              // Si snapshot.data est null ou vide, afficher un message "Pas de destinataires" ou le bouton d'ajout
              // Le cas snapshot.data est null ne devrait pas arriver si le stream retourne List<Recipient>[], mais on v√©rifie par s√©curit√©.
              if (!snapshot.hasData || snapshot.data!.isEmpty) {
                debugLog("‚ÑπÔ∏è LoveScreen StreamBuilder : Aucun destinataire appair√© trouv√©.", level: 'INFO');
                // Afficher un message ou un widget sp√©cial (ex: invitation √† ajouter un destinataire)
                return Center(
                    child: _buildAddRecipientCard(context) // Widget pour ajouter un destinataire
                );
              }

              // Les donn√©es sont disponibles et non vides
              final recipients = snapshot.data!; // Liste des destinataires (non null ici)
              debugLog("‚úÖ LoveScreen StreamBuilder : ${recipients.length} destinataires appair√©s re√ßus.", level: 'INFO');

              // Afficher la liste des destinataires via un PageView (scroll vertical)
              return PageView.builder(
                scrollDirection: Axis.vertical, // D√©filement vertical
                itemCount: recipients.length, // Plus +1 pour le bouton d'ajout ici, car g√©r√© conditionnellement au-dessus
                itemBuilder: (context, index) {
                  final r = recipients[index]; // Le destinataire pour cet index

                  // Utilise un GestureDetector pour rendre le conteneur cliquable (navigue vers l'√©cran de chat/message)
                  return Center( // Centre chaque √©l√©ment du PageView
                    child: GestureDetector(
                      onTap: () {
                        debugLog(
                          "üì® [LoveScreen] Destinataire s√©lectionn√© pour chat : ${r.displayName} (UID: ${r.id})",
                          level: 'INFO',
                        );
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (_) => RecipientDetailsScreen( // Ou ChatScreen(
                              deviceLang: widget.deviceLang, // Passer la langue
                              recipient: r, // Passer l'objet Recipient (contient l'UID)
                              isReceiver: widget.isReceiver, // Passe le r√¥le isReceiver de l'utilisateur ACTUEL (disponible via widget)
                            ),
                          ),
                        );
                      },
                      // Le conteneur affichant les informations du destinataire
                      child: Container(
                        width: MediaQuery.of(context).size.width * 0.8, // Largeur relative √† l'√©cran
                        height: 140, // Hauteur fixe
                        padding: const EdgeInsets.all(16), // Espacement interne
                        decoration: BoxDecoration(
                          color: Colors.pink, // Couleur de fond
                          borderRadius: BorderRadius.circular(16), // Coins arrondis
                        ),
                        child: Column( // Colonne pour aligner les √©l√©ments verticalement
                          mainAxisAlignment: MainAxisAlignment.center, // Centrer les √©l√©ments dans la colonne
                          children: [
                            // Affichage de l'ic√¥ne du destinataire (champ 'icon' du mod√®le Recipient)
                            Text(r.icon, style: const TextStyle(fontSize: 36)),
                            const SizedBox(height: 10), // Espacement
                            // Affichage du nom du destinataire (champ 'displayName')
                            Text(
                              r.displayName, // Nom d'affichage du destinataire
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 18,
                              ),
                            ),
                            // Affichage de la relation (champ 'relation', internationalis√© via i18n_service)
                            Text(
                              getUILabel(r.relation, widget.deviceLang), // Libell√© internationalis√© de la relation
                              style: const TextStyle(color: Colors.white70), // Couleur discr√®te
                            ),
                            // TODO: Afficher un indicateur si l'utilisateur est en ligne (si la logique de pr√©sence est r√©impl√©ment√©e)
                            // if (r.isOnline == true) Icon(Icons.circle, color: Colors.greenAccent, size: 12)
                          ],
                        ),
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),

        const SizedBox(height: 8), // Un peu d'espace en bas

      ],
    ),
  );
} // <-- Fin de la m√©thode build

  // Widget s√©par√© pour le bouton "Ajouter un destinataire"
  // Peut √™tre utilis√© dans le StreamBuilder si la liste est vide, ou toujours en bas de l'√©cran.
  Widget _buildAddRecipientCard(BuildContext context) {
    return GestureDetector(
      onTap: () async {
        debugLog("‚û°Ô∏è Navigation vers RecipientsScreen (pour ajouter/g√©rer)", level: 'INFO');
        // Navigue vers RecipientsScreen (o√π l'utilisateur peut ajouter de nouveaux destinataires ou voir la liste compl√®te).
        // RecipientsScreen n'a besoin que de la langue.
        await Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => RecipientsScreen(
              deviceLang: widget.deviceLang,
              isReceiver: widget.isReceiver, // Passe le r√¥le isReceiver de l'utilisateur ACTUEL (disponible via widget)
            ),
          ),
        );
        // Si RecipientsScreen permet d'ajouter/modifier, le stream streamPairedRecipients rechargera automatiquement.
        // L'appel _loadRecipients() n'est plus n√©cessaire.
      },
      child: Container(
        width: MediaQuery.of(context).size.width * 0.8, // Largeur relative
        height: 140, // Hauteur fixe
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey), // Bordure grise
          borderRadius: BorderRadius.circular(16), // Coins arrondis
        ),
        child: Center( // Centrer l'ic√¥ne
          child: Icon(Icons.add, color: Colors.white, size: 40), // Ic√¥ne d'ajout
        ),
      ),
    );
  }

  Future<void> _showNotification(String body, String? receivedSenderName) async {
    // Adapter le titre si n√©cessaire, peut-√™tre bas√© sur le nom de l'exp√©diteur r√©el via UID si disponible dans le message FCM.
    final title = receivedSenderName != null && receivedSenderName.isNotEmpty
        ? "üíå $receivedSenderName t‚Äôa envoy√© un message" // TODO: Use i18n_service + interpolate name
        : getUILabel('message_received_title', widget.deviceLang); // Titre g√©n√©rique si pas de nom


    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'love_channel', // ID unique du canal
      'Love Notifications', // Nom du canal visible par l'utilisateur
      description: 'Notifications pour les messages d\'amour', // Description visible par l'utilisateur
      importance: Importance.high, // Niveau d'importance (High ou Max pour son/vibration)
      playSound: true,
      enableVibration: true,
      // Vous pouvez aussi configurer un son personnalis√© ici
      // sound: RawResourceAndroidNotificationSound('mysound'), // Requires sound file in res/raw
    );

    final AndroidFlutterLocalNotificationsPlugin? androidPlugin = flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>();
    if (androidPlugin != null) {
      try {
        await androidPlugin.createNotificationChannel(channel);
        // debugLog("‚úÖ Canal de notification 'love_channel' cr√©√© ou mis √† jour.", level: 'DEBUG');
      } catch (e) {
        debugLog("‚ùå Erreur lors de la cr√©ation du canal de notification : $e", level: 'ERROR');
      }
    }


    final androidDetails = AndroidNotificationDetails(
      channel.id, // Utilise l'ID du canal d√©fini ci-dessus
      channel.name, // Utilise le nom du canal d√©fini ci-dessus
      channelDescription: channel.description, // Utilise la description du canal
      importance: channel.importance, // Utilise l'importance du canal
      priority: Priority.high,
      playSound: channel.playSound,
      enableVibration: channel.enableVibration,
      // Autres options comme largeIcon, smallIcon, color, actions, etc.
      // largeIcon: const DrawableResourceAndroidBitmap('@mipmap/ic_launcher'), // Une ic√¥ne plus grande
      // smallIcon: '@mipmap/ic_launcher', // L'ic√¥ne qui s'affiche dans la barre de notification
      // color: Colors.pink.toAccentColor(), // Couleur de l'ic√¥ne et titre (si ic√¥ne smallIcon est monochrome)
      // payload: 'chat:${senderUid}', // Exemple de payload pour naviguer au tap (doit √™tre une String)
    );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      // Param√®tres sp√©cifiques √† iOS
      presentAlert: true, // Afficher une alerte
      presentBadge: true, // Mettre √† jour le badge
      presentSound: true, // Jouer un son
      // sound: 'mysound.caf', // Son personnalis√© (doit √™tre inclus dans le bundle de l'appli)
    );

    final NotificationDetails notificationDetails = NotificationDetails(android: androidDetails, iOS: iosDetails);

    try {
      await flutterLocalNotificationsPlugin.show(
        0, // ID unique de la notification (si vous affichez plusieurs notifications, utilisez des IDs diff√©rents)
        title, // Titre de la notification
        body, // Corps de la notification (le message localis√©)
        notificationDetails, // Les d√©tails de la plateforme
        // payload: 'your_payload_data', // Optionnel: une cha√Æne de caract√®res associ√©e √† la notification
      );
      debugLog("üì¢ Notification locale affich√©e !", level: 'SUCCESS');
    } catch (e) {
      debugLog("‚ùå Erreur lors de l'affichage de la notification locale : $e", level: 'ERROR');
      // TODO: G√©rer l'√©chec d'affichage de la notification.
    }
  }

// TODO: Impl√©menter _findRecipientByUid(String uid) pour la navigation depuis la notification si vous ajoutez un payload avec l'UID.
// Cela pourrait chercher le destinataire dans la liste actuellement affich√©e par le StreamBuilder
// ou faire un appel rapide √† RecipientService.getRecipient(uid).
// Recipient? _findRecipientByUid(String uid) {
//   // Chercher dans la liste recipients si elle est accessible ici (elle l'est via le snapshot du StreamBuilder)
//   // Si vous stockez la liste dans une variable d'√©tat (moins r√©actif que le stream direct), cherchez ici.
//   // Sinon, utilisez le service.
//    return null; // Impl√©mentation r√©elle n√©cessaire
// }

} // <-- Ceci est l'accolade fermante de la classe _LoveScreenState

// üìÑ FIN de lib/screens/love_screen.dart
