// ğŸ“„ lib/services/user_service.dart

// Historique du fichier
// V001 - refactoring deviceId > userId - 2025/05/29

// On importe le package Firebase Authentication
import 'package:firebase_auth/firebase_auth.dart';
// On garde l'import pour le log, si vous souhaitez continuer Ã  l'utiliser
import '../utils/debug_log.dart';

/// RÃ©cupÃ¨re l'UID de l'utilisateur Firebase actuellement connectÃ©.
/// Retourne l'UID (String?) si un utilisateur est signÃ©, sinon retourne null.
/// Cette fonction ne crÃ©e PAS d'utilisateur ; elle rÃ©cupÃ¨re simplement celui qui est dÃ©jÃ  signÃ©.
Future<String?> getCurrentUserUid() async { // Le type de retour est maintenant Future<String?> car l'UID peut Ãªtre null
  // On accÃ¨de Ã  l'instance de Firebase Authentication
  final user = FirebaseAuth.instance.currentUser;

  if (user != null) {
    // Si user n'est pas null, cela signifie qu'un utilisateur est connectÃ©
    debugLog(
      'ğŸ‘¤ [getCurrentUserUid] Utilisateur connectÃ© trouvÃ©. UID: ${user.uid}',
      level: 'INFO',
    );
    // On retourne l'UID de l'utilisateur connectÃ©
    return user.uid;
  } else {
    // Si user est null, aucun utilisateur n'est connectÃ©
    debugLog(
      'ğŸš« [getCurrentUserUid] Aucun utilisateur connectÃ© trouvÃ©.',
      level: 'INFO',
    );
    // On retourne null pour indiquer qu'il n'y a pas d'utilisateur connectÃ©
    return null;
  }
}

// TODO: Ajoutez ici d'autres fonctions liÃ©es Ã  l'utilisateur si nÃ©cessaire,
// comme signInWithEmailPassword, signUpWithEmailPassword, signOut,
// ou un stream pour Ã©couter les changements d'Ã©tat d'authentification.
