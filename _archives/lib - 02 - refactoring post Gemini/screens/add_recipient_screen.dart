//  lib/screens/add_recipient_screen.dart

// Historique du fichier
// V002 - Refactoring : Suppression de la logique de cr√©ation d'un destinataire "en attente" bas√©e sur deviceId.
//      - L'√©cran se concentre d√©sormais sur la g√©n√©ration et le partage d'un lien d'invitation contenant l'UID Firebase de l'utilisateur actuel.
//      - Suppression du param√®tre deviceId. Acc√®s √† l'UID via FirebaseAuth.
//      - Utilisation de l'UID dans le lien d'invitation. - 2025/05/29
// V001 - version initiale (bas√©e sur deviceId et cr√©ation d'un destinataire en attente localement) - 2025/05/21

// GEM - code corrig√© par G√©mini le 2025/05/29

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart'; // N√©cessaire pour obtenir l'UID de l'utilisateur actuel
import 'package:share_plus/share_plus.dart';
import '../services/i18n_service.dart';

// On supprime les imports qui ne sont plus utilis√©s
// import 'package:cloud_firestore/cloud_firestore.dart'; // <-- SUPPRIM√â
// import 'package:uuid/uuid.dart'; // <-- SUPPRIM√â

class AddRecipientScreen extends StatefulWidget {
  // Le deviceId n'est plus pertinent ici. L'√©cran n'a pas besoin de l'ID de l'appareil.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste pertinente

  const AddRecipientScreen({
    super.key,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
    required this.deviceLang,
  });

  @override
  State<AddRecipientScreen> createState() => _AddRecipientScreenState();
}

class _AddRecipientScreenState extends State<AddRecipientScreen> {
  // Les contr√¥leurs de texte ne sont plus n√©cessaires si on ne cr√©e pas un destinataire localement ici
  // final _formKey = GlobalKey<FormState>(); // <-- POTENTIELLEMENT SUPPRIM√â si le formulaire n'est plus utilis√©
  // final _displayNameController = TextEditingController(); // <-- POTENTIELLEMENT SUPPRIM√â
  // final _iconController = TextEditingController(); // <-- POTENTIELLEMENT SUPPRIM√â

  // Les listes de relations et le champ s√©lectionn√© pourraient √™tre supprim√©s si le formulaire est retir√©
  /*
  final List<String> relationKeys = [ // <-- POTENTIELLEMENT SUPPRIM√â
    'compagne',
    'compagnon',
    'enfant',
    'maman',
    'papa',
    'ami',
    'autre',
  ];
  late String _selectedRelationKey; // <-- POTENTIELLEMENT SUPPRIM√â
  */


  @override
  void initState() {
    super.initState();
    // Si le formulaire et les relations sont supprim√©s, cette initialisation l'est aussi
    // _selectedRelationKey = relationKeys.first; // <-- POTENTIELLEMENT SUPPRIM√â
  }

  // La m√©thode capitalize n'est plus n√©cessaire si on ne g√®re pas l'affichage du nom ici
  /*
  String capitalize(String input) { // <-- POTENTIELLEMENT SUPPRIM√â
    if (input.isEmpty) return input;
    return input[0].toUpperCase() + input.substring(1).toLowerCase();
  }
  */

  // La logique de sauvegarde d'un destinataire "en attente" est supprim√©e.
  // L'appairage cr√©e le destinataire directement via _pairUsers dans main.dart.
  /*
  Future<void> _saveRecipient() async { // <-- SUPPRIM√â
    if (!_formKey.currentState!.validate()) return;

    final displayName = capitalize(_displayNameController.text.trim());
    final icon = _iconController.text.trim();
    final relation = _selectedRelationKey;

    final id = const Uuid().v4(); // <-- ID local g√©n√©r√©, obsol√®te

    // Chemin Firestore bas√© sur deviceId, obsol√®te
    final docRef = FirebaseFirestore.instance
        .collection('devices')
        .doc(widget.deviceId) // <-- deviceId obsol√®te
        .collection('recipients')
        .doc(id);

    // √âcriture Firestore, obsol√®te
    await docRef.set({
      'id': id,
      'displayName': displayName,
      'relation': relation,
      'icon': icon,
      'deviceId': null, // Marqu√© comme non appair√©
    });

    if (!mounted) return;
    _sharePairingLink(id); // Partage l'ID local, obsol√®te
    Navigator.pop(context, true);
  }
  */

  // Cette fonction est modifi√©e pour partager l'UID Firebase de l'utilisateur actuel.
  void _sharePairingLink() { // Ne prend plus d'ID local en param√®tre
    // Obtenir l'UID de l'utilisateur actuellement connect√©
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      // G√©rer le cas o√π l'utilisateur n'est pas connect√© (ne devrait pas arriver si main.dart redirige correctement)
      debugPrint("Erreur : Impossible de g√©n√©rer le lien d'appairage, utilisateur non connect√©."); // Utilisation de debugPrint ou debugLog
      return;
    }

    // Utiliser l'UID de l'utilisateur actuel dans le lien
    // Le param√®tre 'recipient' du lien contiendra maintenant l'UID de l'inviteur
    final inviteLink = "https://dvmyyg.github.io/jenvoiedelamour-redirect/?recipient=${user.uid}";

    Share.share(
      // TODO: Utiliser getUILabel pour le message du lien
      'üíå Clique ici pour t‚Äôappairer avec moi dans l‚Äôapp J‚Äôenvoie de l‚Äôamour :\n$inviteLink',
      subject: getUILabel('pairing_link_subject', widget.deviceLang), // Utilise i18n_service
    );

    // Apr√®s avoir partag√© le lien, on peut sortir de cet √©cran.
    if (mounted) {
      Navigator.pop(context); // On sort apr√®s le partage
    }
  }


  @override
  Widget build(BuildContext context) {
    // L'UI est simplifi√©e pour se concentrer sur le partage du lien
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text(getUILabel('add_recipient_title', widget.deviceLang)), // Utilise i18n_service
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Center( // Centre le bouton de partage
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center, // Centre verticalement
            children: [
              // Le formulaire de nom/ic√¥ne/relation est potentiellement supprim√©.
              // On affiche juste un bouton pour partager le lien d'appairage.
              Text(
                getUILabel('share_pairing_link_explanation', widget.deviceLang), // TODO: Ajouter cette cl√© de traduction pour expliquer comment √ßa marche
                style: const TextStyle(color: Colors.white70, fontSize: 16),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32),

              ElevatedButton.icon(
                // onPressed appelle maintenant la fonction _sharePairingLink modifi√©e
                onPressed: _sharePairingLink,
                icon: const Icon(Icons.share), // Ic√¥ne de partage plus appropri√©e
                label: Text(getUILabel('share_pairing_link', widget.deviceLang)), // Utilise i18n_service
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.pink,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12), // Agrandir le bouton
                  textStyle: const TextStyle(fontSize: 18), // Augmenter la taille du texte
                ),
              ),

              // TODO: Ajouter ici potentiellement un bouton "Valider un code d'invitation"
              // qui ouvrirait la bo√Æte de dialogue que nous avons vue dans RecipientsScreen.
              // Cette bo√Æte de dialogue devrait √™tre adapt√©e pour accepter un code temporaire
              // et utiliser _pairUsers avec l'UID de l'utilisateur actuel et l'UID li√© au code.
              const SizedBox(height: 20),
              TextButton(
                onPressed: () {
                  // TODO: Impl√©menter la saisie d'un code d'invitation
                  // _showPasteLinkDialog(); // L'ancienne bo√Æte de dialogue doit √™tre adapt√©e
                  debugPrint("TODO: Impl√©menter la saisie d'un code d'invitation");
                },
                child: Text(getUILabel('validate_invite_button', widget.deviceLang)), // Utilise i18n_service
              ),

              // TODO: Si vous gardez le formulaire nom/ic√¥ne/relation, il faudrait l'ajouter ici.
              // Mais la logique de sauvegarde devra √™tre r√©√©valu√©e : enregistrer ces pr√©f√©rences
              // soit dans les pr√©f√©rences de l'utilisateur actuel pour les *futurs* appairages,
              // soit mettre √† jour le document Recipient *apr√®s* l'appairage.
            ],
          ),
        ),
      ),
    );
  }
}
// Les m√©thodes _buildTextField et _buildRelationDropdown sont potentiellement supprim√©es
// si le formulaire de nom/ic√¥ne/relation est retir√© de cet √©cran.
