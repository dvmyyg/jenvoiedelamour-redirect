//  lib/screens/register_screen.dart

// Historique du fichier
// V003 - Refactoring : Suppression du param√®tre deviceId. L'√©cran s'appuie sur FirebaseAuth pour l'inscription.
//      - Suppression de l'√©criture obsol√®te dans devices/{deviceId} apr√®s inscription.
//      - S'appuie sur main.dart pour la navigation apr√®s changement d'√©tat d'auth (vers EmailVerificationScreen).
//      - Utilisation potentielle de AuthService (si impl√©ment√©/pr√©f√©r√©) pour la logique d'inscription. - 2025/05/29
// V002 - ajout de la sauvegarde du pr√©nom dans Firestore et Firebase Auth + champ pr√©nom - 2025/05/25 21h30 (Historique h√©rit√©)
// V001 - version initiale - 2025/05/22 (Historique h√©rit√©)

// GEM - code corrig√© par G√©mini le 2025/05/29

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Essentiel pour l'inscription
// L'import de cloud_firestore n'est plus n√©cessaire ici si on supprime l'√©criture directe dans devices/{deviceId}
// import 'package:cloud_firestore/cloud_firestore.dart'; // <-- POTENTIELLEMENT SUPPRIM√â
import '../services/i18n_service.dart'; // Pour les traductions UI
import '../utils/debug_log.dart'; // Votre utilitaire de log
// EmailVerificationScreen n'est plus import√© si on ne navigue pas directement vers lui
// import '../screens/email_verification_screen.dart'; // <-- SUPPRIM√â
// L'import de firestore_service est toujours n√©cessaire pour saveUserProfile
import '../services/firestore_service.dart';

// Optionnel : Importer AuthService si vous pr√©f√©rez centraliser la logique d'inscription l√†-bas.
// import '../services/auth_service.dart'; // <-- Optionnel

class RegisterScreen extends StatefulWidget {
  // Le deviceId n'est plus requis ici. L'√©cran g√®re l'inscription via Firebase Auth.
  // final String deviceId; // <-- SUPPRIM√â
  final String deviceLang; // La langue reste pertinente

  const RegisterScreen({
    super.key,
    required this.deviceLang,
    // required this.deviceId, // <-- SUPPRIM√â du constructeur
  });

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController(); // Champ pr√©nom

  bool _isLoading = false; // Indicateur de chargement
  String? _errorMessage; // Pour afficher les erreurs

  @override
  void dispose() {
    // Lib√®re les contr√¥leurs lorsqu'ils ne sont plus n√©cessaires.
    _emailController.dispose();
    _passwordController.dispose();
    _nameController.dispose();
    super.dispose();
  }

  // G√®re le processus d'inscription utilisateur
  Future<void> _register() async {
    // Valider le formulaire
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true; // Active l'indicateur de chargement
      _errorMessage = null; // R√©initialise l'erreur pr√©c√©dente
    });

    final email = _emailController.text.trim();
    final password = _passwordController.text; // Ne pas trimmer le mot de passe
    final displayName = _nameController.text.trim(); // Pr√©nom

    try {
      // Appelle la m√©thode de cr√©ation de compte de Firebase Authentication
      // Alternativement, si vous utilisez AuthService:
      // final credential = await AuthService().register(email, password);
      final credential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);

      // Si la cr√©ation r√©ussit, credential.user n'est pas null
      final user = credential.user;
      if (user == null) {
        // Ce cas ne devrait pas arriver avec une cr√©ation r√©ussie
        throw Exception("Erreur interne: Utilisateur null apr√®s cr√©ation de compte."); // Lance une exception pour une erreur inattendue
      }
      final uid = user.uid; // UID du nouvel utilisateur

      debugLog("‚úÖ Compte cr√©√© pour ${user.email} (UID: $uid)", level: 'SUCCESS');

      // **Suppression de l'√©criture obsol√®te dans devices/{deviceId}**
      // Cette √©criture associait des infos utilisateur √† l'ancien deviceId. Elle est obsol√®te.
      /*
      await FirebaseFirestore.instance.collection('devices').doc(widget.deviceId).set({ // <-- Ancien chemin bas√© sur deviceId
        'deviceId': widget.deviceId, // <-- deviceId obsol√®te
        'email': email, // Cet email est d√©j√† dans Firebase Auth et sera sauvegard√© sous users/{uid}
        'displayName': displayName, // Ce nom sera sauvegard√© sous users/{uid}
        'createdAt': Timestamp.now(), // Timestamp sera g√©r√© par saveUserProfile ou ajout√© si besoin
      }, SetOptions(merge: true));
      */ // <-- Logique obsol√®te comment√©e/supprim√©e


      // Enregistrer les informations de profil (email, pr√©nom) dans la collection 'users' en utilisant l'UID
      // Cette partie √©tait d√©j√† correctement bas√©e sur l'UID et est conserv√©e.
      await saveUserProfile( // Utilise firestore_service refactoris√©
        uid: uid, // UID du nouvel utilisateur
        email: email, // Email de l'utilisateur
        firstName: displayName, // Pr√©nom
      );
      debugLog("üíæ Profil utilisateur sauvegard√© dans Firestore (users/$uid)", level: 'INFO');


      // Mettre √† jour le displayName dans le profil Firebase Auth (Optionnel mais bonne pratique)
      // Cela permet d'afficher le nom dans la console Firebase ou potentiellement dans d'autres services Firebase.
      await user.updateDisplayName(displayName);
      debugLog("‚úÖ updateDisplayName Firebase Auth r√©ussi", level: 'INFO');


      // Envoyer l'email de v√©rification.
      // L'utilisateur cr√©√© aura user.emailVerified = false initialement.
      await user.sendEmailVerification();
      debugLog("üì© Email de v√©rification envoy√© √† ${user.email}", level: 'INFO');


      // L'inscription a r√©ussi et l'email de v√©rification a √©t√© envoy√©.
      // main.dart (qui √©coute authStateChanges()) d√©tectera que user est non-null
      // et que user.emailVerified est false, et naviguera automatiquement
      // vers EmailVerificationScreen.
      // Donc, cet √©cran n'a PAS besoin de naviguer ici !
      /*
      if (!mounted) return; // <-- Cette v√©rification n'est plus n√©cessaire si on ne navigue pas
      Navigator.pushReplacement( // <-- SUPPRIM√â
        context,
        MaterialPageRoute(
          builder: (_) => EmailVerificationScreen(
            deviceId: widget.deviceId, // <-- deviceId obsol√®te, non n√©cessaire pour EmailVerificationScreen refactoris√©
            deviceLang: widget.deviceLang,
          ),
        ),
      );
      */ // <-- Logique de navigation supprim√©e


    } on FirebaseAuthException catch (e) {
      // G√©rer les erreurs sp√©cifiques de Firebase Auth lors de l'inscription
      debugLog("‚ùå Erreur cr√©ation compte : ${e.code} - ${e.message}", level: 'ERROR');
      String errorMessage = getUILabel('register_error_generic', widget.deviceLang); // TODO: Add this key for generic registration error

      // TODO: Affiner le message d'erreur bas√© sur e.code si vous voulez √™tre plus pr√©cis
      // switch (e.code) {
      //   case 'email-already-in-use':
      //     errorMessage = getUILabel('register_error_email_in_use', widget.deviceLang); // TODO: Add key
      //     break;
      //   case 'weak-password':
      //     errorMessage = getUILabel('register_error_weak_password', widget.deviceLang); // TODO: Add key
      //     break;
      //   // ... autres codes ...
      //   default:
      //     errorMessage = getUILabel('register_error_generic', widget.deviceLang); // Use the generic one defined above
      // }

      setState(() => _errorMessage = errorMessage); // Affiche le message d'erreur
    } catch (e) {
      // G√©rer les autres types d'erreurs
      debugLog("‚ùå Erreur cr√©ation compte (autre erreur) : $e", level: 'ERROR');
      setState(() => _errorMessage = getUILabel('register_error_generic', widget.deviceLang)); // Use generic error
    } finally {
      // S'ex√©cute apr√®s try/catch, que l'inscription ait r√©ussi ou √©chou√©
      setState(() => _isLoading = false); // D√©sactive l'indicateur de chargement
    }
  }

  @override
  Widget build(BuildContext context) {
    final lang = widget.deviceLang;

    // L'UI reste globalement la m√™me pour les champs et les boutons.
// La logique du bouton appelle la m√©thode _register refactoris√©e.
    return Scaffold(
        backgroundColor: Colors.black,
        appBar: AppBar(
          backgroundColor: Colors.black,
          foregroundColor: Colors.white,
          title: Text(getUILabel('register_title', lang)), // Utilise i18n_service
        ),
        body: Padding(
        padding: const EdgeInsets.all(24),
    child: Form(
    key: _formKey,
      child: ListView( // Utilise ListView pour permettre
        shrinkWrap: true, // Permet au ListView de ne prendre que l'espace n√©cessaire
        children: [
          // Champ Pr√©nom
          TextFormField(
            controller: _nameController,
            style: const TextStyle(color: Colors.white),
            decoration: InputDecoration(
              labelText: getUILabel('profile_firstname_label', lang), // Utilise i18n_service
              labelStyle: const TextStyle(color: Colors.white),
              enabledBorder: const UnderlineInputBorder(
                borderSide: BorderSide(color: Colors.white24),
              ),
              focusedBorder: const UnderlineInputBorder(
                borderSide: BorderSide(color: Colors.pink),
              ),
            ),
            validator: (value) =>
            value == null || value.trim().isEmpty ? getUILabel('required_field', lang) : null, // Utilise i18n_service
          ),
          const SizedBox(height: 16),
          // Champ Email
          TextFormField(
            controller: _emailController,
            keyboardType: TextInputType.emailAddress, // Clavier adapt√© pour email
            style: const TextStyle(color: Colors.white),
            decoration: InputDecoration(
              labelText: getUILabel('email_label', lang), // Utilise i18n_service
              labelStyle: const TextStyle(color: Colors.white),
              enabledBorder: const UnderlineInputBorder(
                borderSide: BorderSide(color: Colors.white24),
              ),
              focusedBorder: const UnderlineInputBorder(
                borderSide: BorderSide(color: Colors.pink),
              ),
            ),
            validator: (value) =>
            value != null && value.contains('@') && value.trim().isNotEmpty ? null : getUILabel('invalid_email', lang), // Utilise i18n_service, ajout check isEmpty/trim
          ),
          const SizedBox(height: 16),
          // Champ Mot de passe
          TextFormField(
            controller: _passwordController,
            obscureText: true, // Masque le texte
            style: const TextStyle(color: Colors.white),
            decoration: InputDecoration(
              labelText: getUILabel('password_label', lang), // Utilise i18n_service
              labelStyle: const TextStyle(color: Colors.white),
              enabledBorder: const UnderlineInputBorder(
                borderSide: BorderSide(color: Colors.white24),
              ),
              focusedBorder: const UnderlineInputBorder(
                borderSide: BorderSide(color: Colors.pink),
              ),
            ),
            validator: (value) =>
            value != null && value.length >= 6 ? null : getUILabel('password_min_length', lang), // Utilise i18n_service
          ),
          const SizedBox(height: 32),
          // Affichage du message d'erreur si _errorMessage n'est pas null
          if (_errorMessage != null)
            Padding(
              padding: const EdgeInsets.only(bottom: 20), // Espacement avant le bouton
              child: Text(
                _errorMessage!,
                style: const TextStyle(color: Colors.redAccent),
                textAlign: TextAlign.center, // Centrer le texte d'erreur
              ),
            ),
          // Bouton d'Inscription
          ElevatedButton.icon(
            // D√©sactiver le bouton et afficher un indicateur si _isLoading est vrai
            onPressed: _isLoading ? null : _register,
            icon: _isLoading ? const CircularProgressIndicator(color: Colors.white) : const Icon(Icons.person_add), // Indicateur de chargement sur l'ic√¥ne ou texte
            label: _isLoading ? Text(getUILabel('registering', lang)) : Text(getUILabel('register_button', lang)), // TODO: Add 'registering' key, texte du bouton
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.pink,
              foregroundColor: Colors.white,
              minimumSize: const Size.fromHeight(48), // Bouton pleine largeur
            ),
          ),
          // TODO: Optionnel : Bouton pour revenir √† l'√©cran de connexion si l'utilisateur a cliqu√© "Cr√©er un compte" par erreur.
          const SizedBox(height: 16),
          TextButton(
            onPressed: _isLoading ? null : () { // D√©sactiv√© pendant l'inscription
              Navigator.pop(context); // Revenir √† l'√©cran pr√©c√©dent (LoginScreen)
            },
            child: Text(getUILabel('back_to_login_button', lang)), // TODO: Add key for back to login
          ),
        ],
      ),
    ),
        ),
    );
  } // <-- Fin de la m√©thode build
} // <-- Fin de la classe _RegisterScreenState et de la classe RegisterScreen

// TODO: S'assurer que RegisterScreen n'est pas appel√© avec un deviceId n'importe o√π.
